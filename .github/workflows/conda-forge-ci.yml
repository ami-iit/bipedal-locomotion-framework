name: C++ CI Workflow with conda-forge dependencies

on:
  push:
    branches:
    - master
  pull_request:
  schedule:
  # * is a special character in YAML so you have to quote this string
  # Execute a "nightly" build at 2 AM UTC
  - cron:  '0 2 * * *'

jobs:
  build:
    name: '[${{ matrix.os }}@${{ matrix.build_type }}@conda]'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build_type: [Release]
        os: [ubuntu-latest, windows-2019, macos-latest]
      fail-fast: false

    steps:
    - uses: actions/checkout@v2

    - uses: conda-incubator/setup-miniconda@v2
      with:
        miniforge-variant: Mambaforge
        miniforge-version: latest
        channels: conda-forge,robostack-staging
        channel-priority: true

    - name: Dependencies
      shell: bash -l {0}
      run: |
        # Workaround for https://github.com/conda-incubator/setup-miniconda/issues/186
        conda config --remove channels defaults
        # Compilation related dependencies
        mamba install cmake compilers make ninja pkg-config
        # Actual dependencies
        mamba install "idyntree>=8.0.0" "yarp>=3.5.0" libmatio libmatio-cpp librobometry \
                      liblie-group-controllers eigen qhull "casadi>=3.5.5" cppad spdlog \
                      nlohmann_json manif manifpy pybind11 numpy pytest scipy opencv pcl \
                      tomlplusplus libunicycle-footstep-planner "icub-models>=1.23.4" \
                      ros-humble-rclcpp onnxruntime-cpp libbayes-filters-lib

    - name: Linux-only Dependencies [Linux]
      if: contains(matrix.os, 'ubuntu')
      shell: bash -l {0}
      run: |
        mamba install manifpy expat-cos6-x86_64 libselinux-cos6-x86_64 libxau-cos6-x86_64 libxcb-cos6-x86_64 \
                      libxdamage-cos6-x86_64 libxext-cos6-x86_64 libxfixes-cos6-x86_64 \
                      libxxf86vm-cos6-x86_64 mesalib mesa-libgl-cos6-x86_64 \
                      mesa-libgl-devel-cos6-x86_64

    - name: maxOS-only Dependencies [macOS]
      if: contains(matrix.os, 'macos')
      shell: bash -l {0}
      run: |
        mamba install onnxruntime-cpp


    - name: Windows-only Dependencies [Windows]
      if: contains(matrix.os, 'windows')
      shell: bash -l {0}
      run: |
        # Compilation related dependencies
        mamba install vs2019_win-64

    - name: Remove icub-models and pcl [Windows]
      if: contains(matrix.os, 'windows')
      shell: bash -l {0}
      run: |
        # Due to this https://github.com/conda-forge/icub-models-feedstock/issues/18
        # pcl is removed as a workaround for https://github.com/ami-iit/bipedal-locomotion-framework/pull/695#issuecomment-1632208836
        # pcl can be re-added once we have a ros humble build compatible with PCL 1.13.0
        mamba remove icub-models pcl

    - name: Print used environment
      shell: bash -l {0}
      run: |
        mamba list
        env

    - name: Configure [Linux&macOS]
      if: contains(matrix.os, 'macos') || contains(matrix.os, 'ubuntu')
      shell: bash -l {0}
      run: |
        mkdir -p build
        cd build
        cmake -GNinja -DBUILD_TESTING:BOOL=ON -DFRAMEWORK_COMPILE_IK:BOOL=OFF \
              -DFRAMEWORK_COMPILE_PYTHON_BINDINGS:BOOL=ON -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} ..

    - name: Build [Linux&macOS]
      if: contains(matrix.os, 'macos') || contains(matrix.os, 'ubuntu')
      shell: bash -l {0}
      run: |
        cd build
        cmake --build . --config ${{ matrix.build_type }}

    - name: Test [Linux&macOS]
      if: contains(matrix.os, 'macos') || contains(matrix.os, 'ubuntu')
      shell: bash -l {0}
      run: |
        cd build
        ctest --output-on-failure -C ${{ matrix.build_type }}

    - name: Configure [Windows]
      if: contains(matrix.os, 'windows')
      shell: cmd /C call {0}
      run: |
        mkdir -p build
        cd build
        cmake -GNinja -DBUILD_TESTING:BOOL=ON -DFRAMEWORK_COMPILE_PYTHON_BINDINGS:BOOL=ON -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} ..

    - name: Build [Windows]
      if: contains(matrix.os, 'windows')
      shell: cmd /C call {0}
      run: |
        cd build
        cmake --build . --config ${{ matrix.build_type }}

    - name: Test [Windows]
      if: contains(matrix.os, 'windows')
      shell: cmd /C call {0}
      run: |
        cd build
        ctest --output-on-failure -C ${{ matrix.build_type }}
