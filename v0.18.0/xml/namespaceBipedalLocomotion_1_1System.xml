<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="namespaceBipedalLocomotion_1_1System" kind="namespace" language="C++">
    <compoundname>BipedalLocomotion::System</compoundname>
    <innerclass refid="classBipedalLocomotion_1_1System_1_1YarpClock" prot="public">BipedalLocomotion::System::YarpClock</innerclass>
    <innerclass refid="classBipedalLocomotion_1_1System_1_1YarpClockFactory" prot="public">BipedalLocomotion::System::YarpClockFactory</innerclass>
    <innerclass refid="classBipedalLocomotion_1_1System_1_1Advanceable" prot="public">BipedalLocomotion::System::Advanceable</innerclass>
    <innerclass refid="classBipedalLocomotion_1_1System_1_1AdvanceableRunner" prot="public">BipedalLocomotion::System::AdvanceableRunner</innerclass>
    <innerclass refid="classBipedalLocomotion_1_1System_1_1Barrier" prot="public">BipedalLocomotion::System::Barrier</innerclass>
    <innerclass refid="classBipedalLocomotion_1_1System_1_1ClockBuilder" prot="public">BipedalLocomotion::System::ClockBuilder</innerclass>
    <innerclass refid="classBipedalLocomotion_1_1System_1_1ConstantWeightProvider" prot="public">BipedalLocomotion::System::ConstantWeightProvider</innerclass>
    <innerclass refid="classBipedalLocomotion_1_1System_1_1Factory" prot="public">BipedalLocomotion::System::Factory</innerclass>
    <innerclass refid="classBipedalLocomotion_1_1System_1_1IClock" prot="public">BipedalLocomotion::System::IClock</innerclass>
    <innerclass refid="classBipedalLocomotion_1_1System_1_1ClockFactory" prot="public">BipedalLocomotion::System::ClockFactory</innerclass>
    <innerclass refid="classBipedalLocomotion_1_1System_1_1ILinearTaskFactory" prot="public">BipedalLocomotion::System::ILinearTaskFactory</innerclass>
    <innerclass refid="classBipedalLocomotion_1_1System_1_1ILinearTaskSolver" prot="public">BipedalLocomotion::System::ILinearTaskSolver</innerclass>
    <innerclass refid="classBipedalLocomotion_1_1System_1_1InputPort" prot="public">BipedalLocomotion::System::InputPort</innerclass>
    <innerclass refid="structBipedalLocomotion_1_1System_1_1ITaskControllerManager" prot="public">BipedalLocomotion::System::ITaskControllerManager</innerclass>
    <innerclass refid="classBipedalLocomotion_1_1System_1_1LinearTask" prot="public">BipedalLocomotion::System::LinearTask</innerclass>
    <innerclass refid="classBipedalLocomotion_1_1System_1_1OutputPort" prot="public">BipedalLocomotion::System::OutputPort</innerclass>
    <innerclass refid="classBipedalLocomotion_1_1System_1_1SharedResource" prot="public">BipedalLocomotion::System::SharedResource</innerclass>
    <innerclass refid="classBipedalLocomotion_1_1System_1_1Sink" prot="public">BipedalLocomotion::System::Sink</innerclass>
    <innerclass refid="classBipedalLocomotion_1_1System_1_1Source" prot="public">BipedalLocomotion::System::Source</innerclass>
    <innerclass refid="classBipedalLocomotion_1_1System_1_1StdClock" prot="public">BipedalLocomotion::System::StdClock</innerclass>
    <innerclass refid="classBipedalLocomotion_1_1System_1_1StdClockFactory" prot="public">BipedalLocomotion::System::StdClockFactory</innerclass>
    <innerclass refid="classBipedalLocomotion_1_1System_1_1VariablesHandler" prot="public">BipedalLocomotion::System::VariablesHandler</innerclass>
    <innerclass refid="structBipedalLocomotion_1_1System_1_1WeightProvider" prot="public">BipedalLocomotion::System::WeightProvider</innerclass>
    <innerclass refid="classBipedalLocomotion_1_1System_1_1WeightProviderFactory" prot="public">BipedalLocomotion::System::WeightProviderFactory</innerclass>
    <innerclass refid="classBipedalLocomotion_1_1System_1_1RosClock" prot="public">BipedalLocomotion::System::RosClock</innerclass>
    <innerclass refid="classBipedalLocomotion_1_1System_1_1RosClockFactory" prot="public">BipedalLocomotion::System::RosClockFactory</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="Advanceable_8h_1a1558f6843cd1a0f40215a6364b0af652" prot="public" static="no">
        <type>std::monostate</type>
        <definition>using BipedalLocomotion::System::EmptySignal = typedef std::monostate</definition>
        <argsstring></argsstring>
        <name>EmptySignal</name>
        <briefdescription>
<para>Type that can be used to described an empty signal. </para>
        </briefdescription>
        <detaileddescription>
<para>It should be used with advanceable if Input or Output are not required. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/System/Advanceable.h" line="25" column="1" bodyfile="BipedalLocomotion/System/Advanceable.h" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="ILinearTaskSolver_8h_1aa0b9c4f50fc80885f1a6401dba73ad50" prot="public" static="no">
        <type><ref refid="classBipedalLocomotion_1_1System_1_1OutputPort" kindref="compound">OutputPort</ref>&lt; Eigen::VectorXd &gt;</type>
        <definition>using BipedalLocomotion::System::WeightProviderPort = typedef OutputPort&lt;Eigen::VectorXd&gt;</definition>
        <argsstring></argsstring>
        <name>WeightProviderPort</name>
        <briefdescription>
<para>WeightProviderPort port representing the weight. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/System/ILinearTaskSolver.h" line="32" column="1" bodyfile="BipedalLocomotion/System/ILinearTaskSolver.h" bodystart="32" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="ConstantWeightProvider_8h_1a790f80c1db0aa7224d93e58782328881" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BipedalLocomotion::System::BLF_REGISTER_WEIGHT_PROVIDER</definition>
        <argsstring>(ConstantWeightProvider)</argsstring>
        <name>BLF_REGISTER_WEIGHT_PROVIDER</name>
        <param>
          <type><ref refid="classBipedalLocomotion_1_1System_1_1ConstantWeightProvider" kindref="compound">ConstantWeightProvider</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/System/ConstantWeightProvider.h" line="72" column="1" declfile="BipedalLocomotion/System/ConstantWeightProvider.h" declline="72" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="QuitHandler_8h_1a2e69b33ec2397a9c294c5d5ebbe79e3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BipedalLocomotion::System::handleQuitSignals</definition>
        <argsstring>(std::function&lt; void()&gt; customHandler=std::function&lt; void()&gt;())</argsstring>
        <name>handleQuitSignals</name>
        <param>
          <type>std::function&lt; void()&gt;</type>
          <declname>customHandler</declname>
          <defval>std::function&lt; void()&gt;()</defval>
        </param>
        <briefdescription>
<para>handleQuitSignals should be called if you want to call a function when ctrl-c event is detected. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>customHandler</parametername>
</parameternamelist>
<parameterdescription>
<para>function that will be called when ctrl-c event is detected </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Please check the following example if you want to use the function <programlisting filename=".cpp"><codeline><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;chrono&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;thread&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="QuitHandler_8h" kindref="compound">BipedalLocomotion/System/QuitHandler.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>When<sp/>ctrl-c<sp/>event<sp/>is<sp/>called<sp/>the<sp/>application<sp/>will<sp/>print<sp/>&quot;Closing...&quot;<sp/>in<sp/>the<sp/>terminal.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="QuitHandler_8h_1a2e69b33ec2397a9c294c5d5ebbe79e3c" kindref="member">BipedalLocomotion::System::handleQuitSignals</ref>([](){std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Closing...&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;});</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::this_thread::sleep_for(std::chrono::milliseconds(100));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_SUCCESS;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
</simplesect>
<simplesect kind="note"><para>The original implementation can be found here: <ulink url="https://github.com/robotology/idyntree-yarp-tools/blob/main/src/lib/Utilities/Utilities.h">https://github.com/robotology/idyntree-yarp-tools/blob/main/src/lib/Utilities/Utilities.h</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/System/QuitHandler.h" line="44" column="6" declfile="BipedalLocomotion/System/QuitHandler.h" declline="44" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="BipedalLocomotion/System/YarpClock.h" line="19" column="1"/>
  </compounddef>
</doxygen>
