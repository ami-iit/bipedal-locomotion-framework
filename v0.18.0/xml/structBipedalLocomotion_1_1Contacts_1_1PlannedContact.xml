<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="structBipedalLocomotion_1_1Contacts_1_1PlannedContact" kind="struct" language="C++" prot="public">
    <compoundname>BipedalLocomotion::Contacts::PlannedContact</compoundname>
    <basecompoundref refid="structBipedalLocomotion_1_1Contacts_1_1ContactBase" prot="public" virt="non-virtual">BipedalLocomotion::Contacts::ContactBase</basecompoundref>
    <includes local="no">BipedalLocomotion/Contacts/Contact.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structBipedalLocomotion_1_1Contacts_1_1PlannedContact_1aa589c04446c7d15276c447a94dad913f" prot="public" static="no" mutable="no">
        <type>std::chrono::nanoseconds</type>
        <definition>std::chrono::nanoseconds BipedalLocomotion::Contacts::PlannedContact::activationTime</definition>
        <argsstring></argsstring>
        <name>activationTime</name>
        <initializer>{std::chrono::nanoseconds::zero()}</initializer>
        <briefdescription>
<para>Instant from which the contact can be considered active. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Contacts/Contact.h" line="77" column="30" bodyfile="BipedalLocomotion/Contacts/Contact.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structBipedalLocomotion_1_1Contacts_1_1PlannedContact_1a2ca83c6e9583c581057b4f46dfeda9a2" prot="public" static="no" mutable="no">
        <type>std::chrono::nanoseconds</type>
        <definition>std::chrono::nanoseconds BipedalLocomotion::Contacts::PlannedContact::deactivationTime</definition>
        <argsstring></argsstring>
        <name>deactivationTime</name>
        <initializer>{std::chrono::nanoseconds::zero()}</initializer>
        <briefdescription>
<para>Instant after which the contact is no more active. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Contacts/Contact.h" line="82" column="30" bodyfile="BipedalLocomotion/Contacts/Contact.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structBipedalLocomotion_1_1Contacts_1_1PlannedContact_1ad65cd0f8bb51507f321d5da8bdb575ce" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::Contacts::PlannedContact::operator==</definition>
        <argsstring>(const PlannedContact &amp;other) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structBipedalLocomotion_1_1Contacts_1_1PlannedContact" kindref="compound">PlannedContact</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>The equality operator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other object used for the comparison. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the contacts are the same, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Contacts/Contact.h" line="90" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structBipedalLocomotion_1_1Contacts_1_1PlannedContact_1a2a98817b1f6b0eeebfb61da5c5a28abb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::Contacts::PlannedContact::operator!=</definition>
        <argsstring>(const PlannedContact &amp;other) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="structBipedalLocomotion_1_1Contacts_1_1PlannedContact" kindref="compound">PlannedContact</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>The inequality operator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other object used for the comparison. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the contacts are the different, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Contacts/Contact.h" line="98" column="10"/>
      </memberdef>
      <memberdef kind="function" id="structBipedalLocomotion_1_1Contacts_1_1PlannedContact_1af760613841d055a39784a2c0efeb3abc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::Contacts::PlannedContact::isContactActive</definition>
        <argsstring>(const std::chrono::nanoseconds &amp;t) const</argsstring>
        <name>isContactActive</name>
        <param>
          <type>const std::chrono::nanoseconds &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Check if the contact is active at a give time instant. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>time instant at which we check if the contact is active. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if <computeroutput>activationTime &lt;= t &lt; deactivationTime</computeroutput>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Contacts/Contact.h" line="106" column="11"/>
      </memberdef>
      <memberdef kind="function" id="structBipedalLocomotion_1_1Contacts_1_1PlannedContact_1a4b262f7d7eeaf74ac1a9581a5b25adb7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string BipedalLocomotion::Contacts::PlannedContact::toString</definition>
        <argsstring>() const</argsstring>
        <name>toString</name>
        <briefdescription>
<para>Convert the contact to a string. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A string containing the information of the contact. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Contacts/Contact.h" line="113" column="18"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Definition of a Planned Contact structure. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>BipedalLocomotion::Contacts::ContactBase</label>
        <link refid="structBipedalLocomotion_1_1Contacts_1_1ContactBase"/>
      </node>
      <node id="1">
        <label>BipedalLocomotion::Contacts::PlannedContact</label>
        <link refid="structBipedalLocomotion_1_1Contacts_1_1PlannedContact"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="4">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="2">
        <label>BipedalLocomotion::Contacts::ContactBase</label>
        <link refid="structBipedalLocomotion_1_1Contacts_1_1ContactBase"/>
        <childnode refid="3" relation="usage">
          <edgelabel>name</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>BipedalLocomotion::Contacts::PlannedContact</label>
        <link refid="structBipedalLocomotion_1_1Contacts_1_1PlannedContact"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>std::string</label>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="BipedalLocomotion/Contacts/Contact.h" line="72" column="1" bodyfile="BipedalLocomotion/Contacts/Contact.h" bodystart="73" bodyend="114"/>
    <listofallmembers>
      <member refid="structBipedalLocomotion_1_1Contacts_1_1PlannedContact_1aa589c04446c7d15276c447a94dad913f" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Contacts::PlannedContact</scope><name>activationTime</name></member>
      <member refid="structBipedalLocomotion_1_1Contacts_1_1PlannedContact_1a2ca83c6e9583c581057b4f46dfeda9a2" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Contacts::PlannedContact</scope><name>deactivationTime</name></member>
      <member refid="structBipedalLocomotion_1_1Contacts_1_1ContactBase_1a21077c66c293afddc5e3f36a3bb0ec19" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Contacts::PlannedContact</scope><name>index</name></member>
      <member refid="structBipedalLocomotion_1_1Contacts_1_1PlannedContact_1af760613841d055a39784a2c0efeb3abc" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Contacts::PlannedContact</scope><name>isContactActive</name></member>
      <member refid="structBipedalLocomotion_1_1Contacts_1_1ContactBase_1a78dbda4ff9047a5d19ee3285bca4dfe2" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Contacts::PlannedContact</scope><name>name</name></member>
      <member refid="structBipedalLocomotion_1_1Contacts_1_1PlannedContact_1a2a98817b1f6b0eeebfb61da5c5a28abb" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Contacts::PlannedContact</scope><name>operator!=</name></member>
      <member refid="structBipedalLocomotion_1_1Contacts_1_1PlannedContact_1ad65cd0f8bb51507f321d5da8bdb575ce" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Contacts::PlannedContact</scope><name>operator==</name></member>
      <member refid="structBipedalLocomotion_1_1Contacts_1_1ContactBase_1aff58e7de425dabd599c896b6090fe861" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Contacts::PlannedContact</scope><name>pose</name></member>
      <member refid="structBipedalLocomotion_1_1Contacts_1_1PlannedContact_1a4b262f7d7eeaf74ac1a9581a5b25adb7" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Contacts::PlannedContact</scope><name>toString</name></member>
      <member refid="structBipedalLocomotion_1_1Contacts_1_1ContactBase_1ac6477ddb8311dc0739d0c2a1022c073f" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Contacts::PlannedContact</scope><name>type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
