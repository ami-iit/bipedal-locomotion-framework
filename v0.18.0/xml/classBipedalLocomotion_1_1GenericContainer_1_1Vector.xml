<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classBipedalLocomotion_1_1GenericContainer_1_1Vector" kind="class" language="C++" prot="public">
    <compoundname>BipedalLocomotion::GenericContainer::Vector</compoundname>
    <derivedcompoundref refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1_1Ref" prot="public" virt="non-virtual">BipedalLocomotion::GenericContainer::Vector&lt; T &gt;::Ref</derivedcompoundref>
    <includes local="no">BipedalLocomotion/GenericContainer/Vector.h</includes>
    <innerclass refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1_1Ref" prot="public">BipedalLocomotion::GenericContainer::Vector::Ref</innerclass>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a57641a052b3f164b8bfc24105f9d26f1" prot="public" static="no">
        <type>typename iDynTree::Span&lt; T &gt;::element_type</type>
        <definition>using BipedalLocomotion::GenericContainer::Vector&lt; T &gt;::vector_element_type =  typename iDynTree::Span&lt;T&gt;::element_type</definition>
        <argsstring></argsstring>
        <name>vector_element_type</name>
        <briefdescription>
<para>Utility aliases depending on the type T. </para>
        </briefdescription>
        <detaileddescription>
<para>Some notes:<itemizedlist>
<listitem><para>vector_element_type has a different name than the corresponding one in iDynTree::Span to avoid some compilation issues.</para>
</listitem><listitem><para>value_type is the same as vector_element_type, but without an eventual const attribute </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/GenericContainer/Vector.h" line="63" column="5" bodyfile="BipedalLocomotion/GenericContainer/Vector.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a57f6d86dc70039a4399369f060d508ae" prot="public" static="no">
        <type>typename iDynTree::Span&lt; T &gt;::value_type</type>
        <definition>using BipedalLocomotion::GenericContainer::Vector&lt; T &gt;::value_type =  typename iDynTree::Span&lt;T&gt;::value_type</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/GenericContainer/Vector.h" line="64" column="5" bodyfile="BipedalLocomotion/GenericContainer/Vector.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a4f55fa3873e474a690ddd800afbb98e4" prot="public" static="no">
        <type>typename iDynTree::Span&lt; T &gt;::index_type</type>
        <definition>using BipedalLocomotion::GenericContainer::Vector&lt; T &gt;::index_type =  typename iDynTree::Span&lt;T&gt;::index_type</definition>
        <argsstring></argsstring>
        <name>index_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/GenericContainer/Vector.h" line="65" column="5" bodyfile="BipedalLocomotion/GenericContainer/Vector.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1adae1d70a1d3dca657930c035e635e851" prot="public" static="no">
        <type>typename iDynTree::Span&lt; T &gt;::pointer</type>
        <definition>using BipedalLocomotion::GenericContainer::Vector&lt; T &gt;::pointer =  typename iDynTree::Span&lt;T&gt;::pointer</definition>
        <argsstring></argsstring>
        <name>pointer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/GenericContainer/Vector.h" line="66" column="5" bodyfile="BipedalLocomotion/GenericContainer/Vector.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a873edd06479798e49e1bfddc84e076d0" prot="public" static="no">
        <type>typename iDynTree::Span&lt; T &gt;::reference</type>
        <definition>using BipedalLocomotion::GenericContainer::Vector&lt; T &gt;::reference =  typename iDynTree::Span&lt;T&gt;::reference</definition>
        <argsstring></argsstring>
        <name>reference</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/GenericContainer/Vector.h" line="67" column="5" bodyfile="BipedalLocomotion/GenericContainer/Vector.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1ad7a28eb6c208fae9527f728408513a43" prot="public" static="no">
        <type>const value_type &amp;</type>
        <definition>using BipedalLocomotion::GenericContainer::Vector&lt; T &gt;::const_reference =  const value_type&amp;</definition>
        <argsstring></argsstring>
        <name>const_reference</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/GenericContainer/Vector.h" line="68" column="5" bodyfile="BipedalLocomotion/GenericContainer/Vector.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a3474ae91039b79c5f0f97363e5119f9e" prot="public" static="no">
        <type>typename iDynTree::Span&lt; T &gt;::size_type</type>
        <definition>using BipedalLocomotion::GenericContainer::Vector&lt; T &gt;::size_type =  typename iDynTree::Span&lt;T&gt;::size_type</definition>
        <argsstring></argsstring>
        <name>size_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/GenericContainer/Vector.h" line="69" column="5" bodyfile="BipedalLocomotion/GenericContainer/Vector.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a313b647e948370b83dc0c1740fd2c8f5" prot="public" static="no">
        <type>typename iDynTree::Span&lt; T &gt;::<ref refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a313b647e948370b83dc0c1740fd2c8f5" kindref="member">iterator</ref></type>
        <definition>using BipedalLocomotion::GenericContainer::Vector&lt; T &gt;::iterator =  typename iDynTree::Span&lt;T&gt;::iterator</definition>
        <argsstring></argsstring>
        <name>iterator</name>
        <briefdescription>
<para>Utility aliases to define iterators. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/GenericContainer/Vector.h" line="75" column="5" bodyfile="BipedalLocomotion/GenericContainer/Vector.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a27f04c6db02f3f9147ebbaf9e0d205f5" prot="public" static="no">
        <type>typename iDynTree::Span&lt; T &gt;::const_iterator</type>
        <definition>using BipedalLocomotion::GenericContainer::Vector&lt; T &gt;::const_iterator =  typename iDynTree::Span&lt;T&gt;::const_iterator</definition>
        <argsstring></argsstring>
        <name>const_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/GenericContainer/Vector.h" line="76" column="5" bodyfile="BipedalLocomotion/GenericContainer/Vector.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1adc6bc899e28272405795bfbf048d0df5" prot="public" static="no">
        <type>typename iDynTree::Span&lt; T &gt;::reverse_iterator</type>
        <definition>using BipedalLocomotion::GenericContainer::Vector&lt; T &gt;::reverse_iterator =  typename iDynTree::Span&lt;T&gt;::reverse_iterator</definition>
        <argsstring></argsstring>
        <name>reverse_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/GenericContainer/Vector.h" line="77" column="5" bodyfile="BipedalLocomotion/GenericContainer/Vector.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1ad3f6d6328f20524f45feba0fa59dc461" prot="public" static="no">
        <type>typename iDynTree::Span&lt; T &gt;::const_reverse_iterator</type>
        <definition>using BipedalLocomotion::GenericContainer::Vector&lt; T &gt;::const_reverse_iterator =  typename iDynTree::Span&lt;T&gt;::const_reverse_iterator</definition>
        <argsstring></argsstring>
        <name>const_reverse_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/GenericContainer/Vector.h" line="78" column="5" bodyfile="BipedalLocomotion/GenericContainer/Vector.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a179fb4125500117720e5b6d9c53d497d" prot="public" static="no">
        <type>std::function&lt; iDynTree::Span&lt; T &gt;(index_type)&gt;</type>
        <definition>using BipedalLocomotion::GenericContainer::Vector&lt; T &gt;::resize_function_type =  std::function&lt;iDynTree::Span&lt;T&gt;(index_type)&gt;</definition>
        <argsstring></argsstring>
        <name>resize_function_type</name>
        <briefdescription>
<para>Alias for the type of lambda used to resize the original vector. </para>
        </briefdescription>
        <detaileddescription>
<para>In particular, it takes as input the new size (of type index size) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/GenericContainer/Vector.h" line="84" column="5" bodyfile="BipedalLocomotion/GenericContainer/Vector.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1abbc623c0034000f1fec683d720d81f50" prot="public" static="no">
        <type>typename Eigen::Map&lt; Eigen::Matrix&lt; T, Eigen::Dynamic, 1 &gt; &gt;</type>
        <definition>using BipedalLocomotion::GenericContainer::Vector&lt; T &gt;::eigen_map_type =  typename Eigen::Map&lt;Eigen::Matrix&lt;T, Eigen::Dynamic, 1&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>eigen_map_type</name>
        <briefdescription>
<para>Alias to determine the output type of <ref refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1ae1488b2f061a0cab4b8f29d574a896ed" kindref="member">toEigen()</ref> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/GenericContainer/Vector.h" line="89" column="5" bodyfile="BipedalLocomotion/GenericContainer/Vector.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1aed95ae0a7c5d802ff5f996ba9b7a455d" prot="public" static="no">
        <type>typename Eigen::Map&lt; const Eigen::Matrix&lt; T, Eigen::Dynamic, 1 &gt; &gt;</type>
        <definition>using BipedalLocomotion::GenericContainer::Vector&lt; T &gt;::eigen_map_const_type =  typename Eigen::Map&lt;const Eigen::Matrix&lt;T, Eigen::Dynamic, 1&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>eigen_map_const_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/GenericContainer/Vector.h" line="90" column="5" bodyfile="BipedalLocomotion/GenericContainer/Vector.h" bodystart="90" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a85b321d378f02d91cde3dff28cd5eb66" prot="protected" static="no" mutable="no">
        <type>iDynTree::Span&lt; T &gt;</type>
        <definition>iDynTree::Span&lt;T&gt; BipedalLocomotion::GenericContainer::Vector&lt; T &gt;::m_span</definition>
        <argsstring></argsstring>
        <name>m_span</name>
        <briefdescription>
<para>Span of the pointed vector. </para>
        </briefdescription>
        <detaileddescription>
<para>This allows to point to an existing container without owning it. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/GenericContainer/Vector.h" line="97" column="20" bodyfile="BipedalLocomotion/GenericContainer/Vector.h" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1ac2417abc0abe3d0ceec513757d05e476" prot="protected" static="no" mutable="no">
        <type><ref refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a179fb4125500117720e5b6d9c53d497d" kindref="member">resize_function_type</ref></type>
        <definition>resize_function_type BipedalLocomotion::GenericContainer::Vector&lt; T &gt;::m_resizeLambda</definition>
        <argsstring></argsstring>
        <name>m_resizeLambda</name>
        <briefdescription>
<para>User specified lambda to resize the existing container. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/GenericContainer/Vector.h" line="101" column="26" bodyfile="BipedalLocomotion/GenericContainer/Vector.h" bodystart="101" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1aaaa9a73b59fc0db6aec86338f39e9ca9" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BipedalLocomotion::GenericContainer::Vector&lt; T &gt;::Vector</definition>
        <argsstring>()=default</argsstring>
        <name>Vector</name>
        <briefdescription>
<para>The default constructor is private. </para>
        </briefdescription>
        <detaileddescription>
<para>In fact, once the <ref refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector" kindref="compound">Vector</ref> is built, it is assumed to point to an existing container. To be used only if m_span and m_resizeLamba are set manually. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/GenericContainer/Vector.h" line="107" column="5"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1adecc18b1ac9f884a35a0d038226f77f0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>BipedalLocomotion::GenericContainer::Vector&lt; T &gt;::Vector</definition>
        <argsstring>(iDynTree::Span&lt; T &gt; span, resize_function_type resizeLambda)</argsstring>
        <name>Vector</name>
        <param>
          <type>iDynTree::Span&lt; T &gt;</type>
          <declname>span</declname>
        </param>
        <param>
          <type><ref refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a179fb4125500117720e5b6d9c53d497d" kindref="member">resize_function_type</ref></type>
          <declname>resizeLambda</declname>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>span</parametername>
</parameternamelist>
<parameterdescription>
<para>Span of the existing container </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>resizeLambda</parametername>
</parameternamelist>
<parameterdescription>
<para>User defined lambda to resize the original container </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/GenericContainer/Vector.h" line="116" column="5" bodyfile="BipedalLocomotion/GenericContainer/Vector.h" bodystart="116" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a4bd32da4a52c5286e5a51d571cb75c7e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>BipedalLocomotion::GenericContainer::Vector&lt; T &gt;::Vector</definition>
        <argsstring>(iDynTree::Span&lt; T &gt; span)</argsstring>
        <name>Vector</name>
        <param>
          <type>iDynTree::Span&lt; T &gt;</type>
          <declname>span</declname>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>span</parametername>
</parameternamelist>
<parameterdescription>
<para>Span of the existing container</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Since no resizeLambda is provided, it is assumed that the original container cannot be resized. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/GenericContainer/Vector.h" line="128" column="5" bodyfile="BipedalLocomotion/GenericContainer/Vector.h" bodystart="128" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1aa00909c13a587b8e433f31c1af2af8a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BipedalLocomotion::GenericContainer::Vector&lt; T &gt;::~Vector</definition>
        <argsstring>()=default</argsstring>
        <name>~Vector</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/GenericContainer/Vector.h" line="137" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a021e9da2bb8ad05425785f13d18052ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BipedalLocomotion::GenericContainer::Vector&lt; T &gt;::Vector</definition>
        <argsstring>(const Vector&lt; T &gt; &amp;other)=delete</argsstring>
        <name>Vector</name>
        <param>
          <type>const <ref refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Copy constructor. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>It has been deleted since it would not be clear if the pointer or the pointed data would be copied. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/GenericContainer/Vector.h" line="144" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a0b14bc1588d8a0fb19c08c7ef2c55631" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>BipedalLocomotion::GenericContainer::Vector&lt; T &gt;::Vector</definition>
        <argsstring>(Vector&lt; T &gt; &amp;&amp;other)</argsstring>
        <name>Vector</name>
        <param>
          <type><ref refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector" kindref="compound">Vector</ref>&lt; T &gt; &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Move constructor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Another <ref refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector" kindref="compound">Vector</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>Here the pointers are copied, the content is not duplicated. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/GenericContainer/Vector.h" line="152" column="5" bodyfile="BipedalLocomotion/GenericContainer/Vector.h" bodystart="152" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a765def1a501657c88c91497a25687b4f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::GenericContainer::Vector&lt; T &gt;::clone</definition>
        <argsstring>(const Vector&lt; T &gt; &amp;other)</argsstring>
        <name>clone</name>
        <param>
          <type>const <ref refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Copies the content of the vector. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector" kindref="compound">Vector</ref> from which to copy </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true in case of success. False if the two have different size and this is not resizable.</para>
</simplesect>
<simplesect kind="warning"><para>It performs memory allocation if this is resizable and the sizes are different. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/GenericContainer/Vector.h" line="165" column="10" bodyfile="BipedalLocomotion/GenericContainer/Vector.h" bodystart="165" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a9bc780199545553536488e69369c3f93" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::GenericContainer::Vector&lt; T &gt;::clone</definition>
        <argsstring>(iDynTree::Span&lt; T &gt; other)</argsstring>
        <name>clone</name>
        <param>
          <type>iDynTree::Span&lt; T &gt;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Copies the content of the vector. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Span from which to copy </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true in case of success. False if the two have different size and this is not resizable.</para>
</simplesect>
<simplesect kind="warning"><para>It performs memory allocation if this is resizable and the sizes are different. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/GenericContainer/Vector.h" line="191" column="10" bodyfile="BipedalLocomotion/GenericContainer/Vector.h" bodystart="191" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1aa73fd1269957b82b21d99f28f2639eaa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
        <definition>Vector&lt;T&gt;&amp; BipedalLocomotion::GenericContainer::Vector&lt; T &gt;::operator=</definition>
        <argsstring>(const Vector&lt; T &gt; &amp;other)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>operator = Copies the content </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector" kindref="compound">Vector</ref> from which to copy </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to the vector.</para>
</simplesect>
It calls <ref refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a765def1a501657c88c91497a25687b4f" kindref="member">clone()</ref>. There is an assert on its return value.</para>
<para><simplesect kind="warning"><para>It performs memory allocation if this is resizable and the sizes are different. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/GenericContainer/Vector.h" line="219" column="12" bodyfile="BipedalLocomotion/GenericContainer/Vector.h" bodystart="219" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1aa7418456c07db18ee41e7e0e539a913f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
        <definition>Vector&lt;T&gt;&amp; BipedalLocomotion::GenericContainer::Vector&lt; T &gt;::operator=</definition>
        <argsstring>(iDynTree::Span&lt; T &gt; other)</argsstring>
        <name>operator=</name>
        <param>
          <type>iDynTree::Span&lt; T &gt;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>operator = Copies the content </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector" kindref="compound">Vector</ref> from which to copy </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to the vector.</para>
</simplesect>
It calls <ref refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a765def1a501657c88c91497a25687b4f" kindref="member">clone()</ref>. There is an assert on its return value.</para>
<para><simplesect kind="warning"><para>It performs memory allocation if this is resizable and the sizes are different. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/GenericContainer/Vector.h" line="236" column="12" bodyfile="BipedalLocomotion/GenericContainer/Vector.h" bodystart="236" bodyend="242"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a2a89e82c87e4dfab48aafbb9024a4350" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector" kindref="compound">Vector</ref>&lt; T &gt; &amp;</type>
        <definition>Vector&lt;T&gt;&amp; BipedalLocomotion::GenericContainer::Vector&lt; T &gt;::operator=</definition>
        <argsstring>(Vector&lt; T &gt; &amp;&amp;other)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector" kindref="compound">Vector</ref>&lt; T &gt; &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Move operator = Copies the content. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector" kindref="compound">Vector</ref> from which to copy </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to the vector.</para>
</simplesect>
It calls <ref refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a765def1a501657c88c91497a25687b4f" kindref="member">clone()</ref>. There is an assert on its return value.</para>
<para><simplesect kind="warning"><para>It performs memory allocation if this is resizable and the sizes are different. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/GenericContainer/Vector.h" line="253" column="12" bodyfile="BipedalLocomotion/GenericContainer/Vector.h" bodystart="253" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1ac70d5617a50f5a8856a324f9580091b9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::GenericContainer::Vector&lt; T &gt;::resizeVector</definition>
        <argsstring>(index_type newSize)</argsstring>
        <name>resizeVector</name>
        <param>
          <type>index_type</type>
          <declname>newSize</declname>
        </param>
        <briefdescription>
<para>resizeVector It resize the original vector (if possible) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>newSize</parametername>
</parameternamelist>
<parameterdescription>
<para>New size of the vector </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the new size matches the desired. False otherwise.</para>
</simplesect>
<simplesect kind="warning"><para>It may perform memory allocation if the new size is different from the current and the resizeLambda has been specified. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/GenericContainer/Vector.h" line="268" column="10" bodyfile="BipedalLocomotion/GenericContainer/Vector.h" bodystart="268" bodyend="272"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a09f72ef6146dd541046a6a6fb9a5b623" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void BipedalLocomotion::GenericContainer::Vector&lt; T &gt;::resize</definition>
        <argsstring>(index_type newSize)</argsstring>
        <name>resize</name>
        <param>
          <type>index_type</type>
          <declname>newSize</declname>
        </param>
        <briefdescription>
<para>resize It resize the original vector (if possible) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>newSize</parametername>
</parameternamelist>
<parameterdescription>
<para>New size of the vector It calls <ref refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1ac70d5617a50f5a8856a324f9580091b9" kindref="member">resizeVector()</ref>. There is an assert on its return value.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>It may perform memory allocation if the new size is different from the current and the resizeLambda has been specified. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/GenericContainer/Vector.h" line="281" column="10" bodyfile="BipedalLocomotion/GenericContainer/Vector.h" bodystart="281" bodyend="286"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a4fdd476b7b135f9bbbc5bb2d16afc5b9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>index_type</type>
        <definition>index_type BipedalLocomotion::GenericContainer::Vector&lt; T &gt;::size</definition>
        <argsstring>() const</argsstring>
        <name>size</name>
        <briefdescription>
<para>size Get the size of the <ref refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector" kindref="compound">Vector</ref> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The size of the <ref refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector" kindref="compound">Vector</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/GenericContainer/Vector.h" line="292" column="16" bodyfile="BipedalLocomotion/GenericContainer/Vector.h" bodystart="292" bodyend="295"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a30f7c6df90375bffd1bc495f7979d3b1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::GenericContainer::Vector&lt; T &gt;::empty</definition>
        <argsstring>() const</argsstring>
        <name>empty</name>
        <briefdescription>
<para>empty Checks if the container is empty (zero size) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if empty. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/GenericContainer/Vector.h" line="301" column="10" bodyfile="BipedalLocomotion/GenericContainer/Vector.h" bodystart="301" bodyend="303"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1ac73657af135dd7b0144d8224c7f23d9f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const_reference</type>
        <definition>const_reference BipedalLocomotion::GenericContainer::Vector&lt; T &gt;::operator[]</definition>
        <argsstring>(index_type idx) const</argsstring>
        <name>operator[]</name>
        <param>
          <type>index_type</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>operator [] Accessor </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>The index to be accessed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A const reference to the requested element. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/GenericContainer/Vector.h" line="310" column="21" bodyfile="BipedalLocomotion/GenericContainer/Vector.h" bodystart="310" bodyend="313"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a91c360963bed203fac33d7e3aa72508f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>reference</type>
        <definition>reference BipedalLocomotion::GenericContainer::Vector&lt; T &gt;::operator[]</definition>
        <argsstring>(index_type idx)</argsstring>
        <name>operator[]</name>
        <param>
          <type>index_type</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>operator [] Accessor </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>The index to be accessed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to the requested element. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/GenericContainer/Vector.h" line="320" column="15" bodyfile="BipedalLocomotion/GenericContainer/Vector.h" bodystart="320" bodyend="323"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a61093f9033b034b273c9d3245127fb8a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a57641a052b3f164b8bfc24105f9d26f1" kindref="member">vector_element_type</ref></type>
        <definition>vector_element_type BipedalLocomotion::GenericContainer::Vector&lt; T &gt;::getVal</definition>
        <argsstring>(index_type idx) const</argsstring>
        <name>getVal</name>
        <param>
          <type>index_type</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>getVal Accessor </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>The index to be accessed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A const reference to the requested element. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/GenericContainer/Vector.h" line="330" column="25" bodyfile="BipedalLocomotion/GenericContainer/Vector.h" bodystart="330" bodyend="333"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a27d762527a91fc94749ba4aed34c7b27" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::GenericContainer::Vector&lt; T &gt;::setVal</definition>
        <argsstring>(index_type idx, vector_element_type val)</argsstring>
        <name>setVal</name>
        <param>
          <type>index_type</type>
          <declname>idx</declname>
        </param>
        <param>
          <type><ref refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a57641a052b3f164b8bfc24105f9d26f1" kindref="member">vector_element_type</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>setVal Setter </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the values to be set </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>The new value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>False if idx is not within [0, <ref refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a4fdd476b7b135f9bbbc5bb2d16afc5b9" kindref="member">size()</ref>). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/GenericContainer/Vector.h" line="341" column="10" bodyfile="BipedalLocomotion/GenericContainer/Vector.h" bodystart="341" bodyend="349"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a13a3f4f64613a567063fa5a3f1c68d2a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const_reference</type>
        <definition>const_reference BipedalLocomotion::GenericContainer::Vector&lt; T &gt;::at</definition>
        <argsstring>(index_type idx) const</argsstring>
        <name>at</name>
        <param>
          <type>index_type</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>at Accessor </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>The index to be accessed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A const reference to the requested element. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/GenericContainer/Vector.h" line="356" column="21" bodyfile="BipedalLocomotion/GenericContainer/Vector.h" bodystart="356" bodyend="359"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a8b84a57279bc47d198b458cce6774962" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>reference</type>
        <definition>reference BipedalLocomotion::GenericContainer::Vector&lt; T &gt;::at</definition>
        <argsstring>(index_type idx)</argsstring>
        <name>at</name>
        <param>
          <type>index_type</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>at Accessor </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>The index to be accessed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to the requested element. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/GenericContainer/Vector.h" line="366" column="15" bodyfile="BipedalLocomotion/GenericContainer/Vector.h" bodystart="366" bodyend="369"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a225e077992be801e86230e08b52af380" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const_reference</type>
        <definition>const_reference BipedalLocomotion::GenericContainer::Vector&lt; T &gt;::operator()</definition>
        <argsstring>(index_type idx) const</argsstring>
        <name>operator()</name>
        <param>
          <type>index_type</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>operator () Accessor </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>The index to be accessed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A const reference to the requested element. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/GenericContainer/Vector.h" line="376" column="21" bodyfile="BipedalLocomotion/GenericContainer/Vector.h" bodystart="376" bodyend="379"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a04f85a234bbb581b65ad899b4baab20a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>reference</type>
        <definition>reference BipedalLocomotion::GenericContainer::Vector&lt; T &gt;::operator()</definition>
        <argsstring>(index_type idx)</argsstring>
        <name>operator()</name>
        <param>
          <type>index_type</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>operator () Accessor </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>The index to be accessed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to the requested element. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/GenericContainer/Vector.h" line="386" column="15" bodyfile="BipedalLocomotion/GenericContainer/Vector.h" bodystart="386" bodyend="389"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1ab10fe69ae208bfa5a9ed922a8c196cf6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>pointer</type>
        <definition>pointer BipedalLocomotion::GenericContainer::Vector&lt; T &gt;::data</definition>
        <argsstring>() const</argsstring>
        <name>data</name>
        <briefdescription>
<para>data Raw pointer to the data </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>THe raw pointer to the data </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/GenericContainer/Vector.h" line="395" column="13" bodyfile="BipedalLocomotion/GenericContainer/Vector.h" bodystart="395" bodyend="398"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a4e418475a094d986bd5990a69ad7c6a6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a313b647e948370b83dc0c1740fd2c8f5" kindref="member">iterator</ref></type>
        <definition>iterator BipedalLocomotion::GenericContainer::Vector&lt; T &gt;::begin</definition>
        <argsstring>()</argsstring>
        <name>begin</name>
        <briefdescription>
<para>begin Iterator </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>An iterator to the end of the sequence </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/GenericContainer/Vector.h" line="404" column="14" bodyfile="BipedalLocomotion/GenericContainer/Vector.h" bodystart="404" bodyend="407"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a4d6baff8e550d857837f2b890e9a568b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a313b647e948370b83dc0c1740fd2c8f5" kindref="member">iterator</ref></type>
        <definition>iterator BipedalLocomotion::GenericContainer::Vector&lt; T &gt;::end</definition>
        <argsstring>()</argsstring>
        <name>end</name>
        <briefdescription>
<para>end Iterator </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>An iterator to the end of the sequence </para>
</simplesect>
<simplesect kind="warning"><para>This element acts as a placeholder; attempting to access it results in undefined behavior. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/GenericContainer/Vector.h" line="414" column="14" bodyfile="BipedalLocomotion/GenericContainer/Vector.h" bodystart="414" bodyend="417"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a97552d79f6011ead3f7fa64b40e8d392" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const_iterator</type>
        <definition>const_iterator BipedalLocomotion::GenericContainer::Vector&lt; T &gt;::begin</definition>
        <argsstring>() const</argsstring>
        <name>begin</name>
        <briefdescription>
<para>begin Iterator </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A const iterator to the end of the sequence </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/GenericContainer/Vector.h" line="423" column="20" bodyfile="BipedalLocomotion/GenericContainer/Vector.h" bodystart="423" bodyend="426"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a3d2cce7023422701c15efa9853a58272" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const_iterator</type>
        <definition>const_iterator BipedalLocomotion::GenericContainer::Vector&lt; T &gt;::end</definition>
        <argsstring>() const</argsstring>
        <name>end</name>
        <briefdescription>
<para>end Iterator </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A const iterator to the end of the sequence </para>
</simplesect>
<simplesect kind="warning"><para>This element acts as a placeholder; attempting to access it results in undefined behavior. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/GenericContainer/Vector.h" line="433" column="20" bodyfile="BipedalLocomotion/GenericContainer/Vector.h" bodystart="433" bodyend="436"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a2372ac8afed80040cf767124aebb68b5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const_iterator</type>
        <definition>const_iterator BipedalLocomotion::GenericContainer::Vector&lt; T &gt;::cbegin</definition>
        <argsstring>() const</argsstring>
        <name>cbegin</name>
        <briefdescription>
<para>cbegin Iterator </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A const iterator to the end of the sequence </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/GenericContainer/Vector.h" line="442" column="20" bodyfile="BipedalLocomotion/GenericContainer/Vector.h" bodystart="442" bodyend="445"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a5c1a1e786f5a5da2205568d9fbd5d434" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const_iterator</type>
        <definition>const_iterator BipedalLocomotion::GenericContainer::Vector&lt; T &gt;::cend</definition>
        <argsstring>() const</argsstring>
        <name>cend</name>
        <briefdescription>
<para>cend Iterator </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A const iterator to the end of the sequence </para>
</simplesect>
<simplesect kind="warning"><para>This element acts as a placeholder; attempting to access it results in undefined behavior. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/GenericContainer/Vector.h" line="452" column="20" bodyfile="BipedalLocomotion/GenericContainer/Vector.h" bodystart="452" bodyend="455"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a47df090ff342328a85eaead732eab8f2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>reverse_iterator</type>
        <definition>reverse_iterator BipedalLocomotion::GenericContainer::Vector&lt; T &gt;::rbegin</definition>
        <argsstring>()</argsstring>
        <name>rbegin</name>
        <briefdescription>
<para>rbegin Iterator to the first element of the reversed vector </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Returns a reverse iterator to the first element of the reversed vector. It corresponds to the last element of the non-reversed vector </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/GenericContainer/Vector.h" line="462" column="22" bodyfile="BipedalLocomotion/GenericContainer/Vector.h" bodystart="462" bodyend="465"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a833502c7670d8b5d56b8e2702e567c56" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>reverse_iterator</type>
        <definition>reverse_iterator BipedalLocomotion::GenericContainer::Vector&lt; T &gt;::rend</definition>
        <argsstring>()</argsstring>
        <name>rend</name>
        <briefdescription>
<para>rend Iterator to the element following the last element of the reversed vector. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Returns a reverse iterator to the element following the last element of the reversed vector. It corresponds to the element preceding the first element of the non-reversed vector. </para>
</simplesect>
<simplesect kind="warning"><para>This element acts as a placeholder; attempting to access it results in undefined behavior. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/GenericContainer/Vector.h" line="473" column="22" bodyfile="BipedalLocomotion/GenericContainer/Vector.h" bodystart="473" bodyend="476"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a8da9cd4ab5b707411b387d84faccc643" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const_reverse_iterator</type>
        <definition>const_reverse_iterator BipedalLocomotion::GenericContainer::Vector&lt; T &gt;::rbegin</definition>
        <argsstring>() const</argsstring>
        <name>rbegin</name>
        <briefdescription>
<para>rbegin Iterator to the first element of the reversed vector </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Returns a const reverse iterator to the first element of the reversed vector. It corresponds to the last element of the non-reversed vector </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/GenericContainer/Vector.h" line="483" column="28" bodyfile="BipedalLocomotion/GenericContainer/Vector.h" bodystart="483" bodyend="486"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1ac76fc757642e963273694237ef3b8ca5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const_reverse_iterator</type>
        <definition>const_reverse_iterator BipedalLocomotion::GenericContainer::Vector&lt; T &gt;::rend</definition>
        <argsstring>() const</argsstring>
        <name>rend</name>
        <briefdescription>
<para>rend Iterator to the element following the last element of the reversed vector. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Returns a reverse iterator to the element following the last element of the reversed vector. It corresponds to the element preceding the first element of the non-reversed vector. </para>
</simplesect>
<simplesect kind="warning"><para>This element acts as a placeholder; attempting to access it results in undefined behavior. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/GenericContainer/Vector.h" line="494" column="28" bodyfile="BipedalLocomotion/GenericContainer/Vector.h" bodystart="494" bodyend="497"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1ab4b546071654b7efc36c5d3a55a9395c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const_reverse_iterator</type>
        <definition>const_reverse_iterator BipedalLocomotion::GenericContainer::Vector&lt; T &gt;::crbegin</definition>
        <argsstring>() const</argsstring>
        <name>crbegin</name>
        <briefdescription>
<para>crbegin Iterator to the first element of the reversed vector </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Returns a const reverse iterator to the first element of the reversed vector. It corresponds to the last element of the non-reversed vector </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/GenericContainer/Vector.h" line="504" column="28" bodyfile="BipedalLocomotion/GenericContainer/Vector.h" bodystart="504" bodyend="507"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a74bf95f5058d0f2124f5a946b050dca0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const_reverse_iterator</type>
        <definition>const_reverse_iterator BipedalLocomotion::GenericContainer::Vector&lt; T &gt;::crend</definition>
        <argsstring>() const</argsstring>
        <name>crend</name>
        <briefdescription>
<para>crend Iterator to the element following the last element of the reversed vector. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Returns a reverse iterator to the element following the last element of the reversed vector. It corresponds to the element preceding the first element of the non-reversed vector. </para>
</simplesect>
<simplesect kind="warning"><para>This element acts as a placeholder; attempting to access it results in undefined behavior. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/GenericContainer/Vector.h" line="515" column="28" bodyfile="BipedalLocomotion/GenericContainer/Vector.h" bodystart="515" bodyend="518"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1ae1488b2f061a0cab4b8f29d574a896ed" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1abbc623c0034000f1fec683d720d81f50" kindref="member">eigen_map_type</ref></type>
        <definition>eigen_map_type BipedalLocomotion::GenericContainer::Vector&lt; T &gt;::toEigen</definition>
        <argsstring>()</argsstring>
        <name>toEigen</name>
        <briefdescription>
<para>Get an Eigen map corresponding to the current generic vector (see <ulink url="https://eigen.tuxfamily.org/dox/classEigen_1_1Map.html">https://eigen.tuxfamily.org/dox/classEigen_1_1Map.html</ulink>). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/GenericContainer/Vector.h" line="523" column="20" bodyfile="BipedalLocomotion/GenericContainer/Vector.h" bodystart="523" bodyend="526"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a7a2101a9a20acfdb75a2b01e2701fb6c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>eigen_map_const_type</type>
        <definition>eigen_map_const_type BipedalLocomotion::GenericContainer::Vector&lt; T &gt;::toEigen</definition>
        <argsstring>() const</argsstring>
        <name>toEigen</name>
        <briefdescription>
<para>Get an Eigen const map corresponding to the current generic vector (see <ulink url="https://eigen.tuxfamily.org/dox/classEigen_1_1Map.html">https://eigen.tuxfamily.org/dox/classEigen_1_1Map.html</ulink>). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/GenericContainer/Vector.h" line="531" column="26" bodyfile="BipedalLocomotion/GenericContainer/Vector.h" bodystart="531" bodyend="534"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Forward declaration of <ref refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector" kindref="compound">Vector</ref> class. </para>
    </briefdescription>
    <detaileddescription>
<para><ref refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector" kindref="compound">Vector</ref> is a utility class which maps another existing contiguous container.</para>
<para>T is the type of vector (double, float, int, string,...)</para>
<para>It does not contain any data, but only a pointer to an existing contiguous area of memory containing a sequence of objects. It also stores its size, i.e. the number of objects. It does not own this portion of memory, hence it needs to be properly initialized from an existing container, such as an iDynTree::Vector, std::vector, array, yarp::sig::Vector and similar. Even if it does not own the memory, it is possible to resize it. This is done through an user specified lambda, which calls the corresponding &quot;resize&quot; method on the original object from which <ref refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector" kindref="compound">Vector</ref> has been initialized.</para>
<para><simplesect kind="warning"><para>The original object from which <ref refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector" kindref="compound">Vector</ref> has been initialized should not be deallocated before <ref refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector" kindref="compound">Vector</ref>. This would invalidate the pointer inside it. </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>BipedalLocomotion::GenericContainer::Vector&lt; T &gt;</label>
        <link refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector"/>
      </node>
      <node id="2">
        <label>BipedalLocomotion::GenericContainer::Vector&lt; T &gt;::Ref</label>
        <link refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1_1Ref"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="BipedalLocomotion/GenericContainer/Vector.h" line="52" column="1" bodyfile="BipedalLocomotion/GenericContainer/Vector.h" bodystart="53" bodyend="541"/>
    <listofallmembers>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a13a3f4f64613a567063fa5a3f1c68d2a" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector</scope><name>at</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a8b84a57279bc47d198b458cce6774962" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector</scope><name>at</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a4e418475a094d986bd5990a69ad7c6a6" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector</scope><name>begin</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a97552d79f6011ead3f7fa64b40e8d392" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector</scope><name>begin</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a2372ac8afed80040cf767124aebb68b5" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector</scope><name>cbegin</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a5c1a1e786f5a5da2205568d9fbd5d434" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector</scope><name>cend</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a765def1a501657c88c91497a25687b4f" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector</scope><name>clone</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a9bc780199545553536488e69369c3f93" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector</scope><name>clone</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a27f04c6db02f3f9147ebbaf9e0d205f5" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector</scope><name>const_iterator</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1ad7a28eb6c208fae9527f728408513a43" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector</scope><name>const_reference</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1ad3f6d6328f20524f45feba0fa59dc461" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector</scope><name>const_reverse_iterator</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1ab4b546071654b7efc36c5d3a55a9395c" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector</scope><name>crbegin</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a74bf95f5058d0f2124f5a946b050dca0" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector</scope><name>crend</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1ab10fe69ae208bfa5a9ed922a8c196cf6" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector</scope><name>data</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1aed95ae0a7c5d802ff5f996ba9b7a455d" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector</scope><name>eigen_map_const_type</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1abbc623c0034000f1fec683d720d81f50" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector</scope><name>eigen_map_type</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a30f7c6df90375bffd1bc495f7979d3b1" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector</scope><name>empty</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a4d6baff8e550d857837f2b890e9a568b" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector</scope><name>end</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a3d2cce7023422701c15efa9853a58272" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector</scope><name>end</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a61093f9033b034b273c9d3245127fb8a" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector</scope><name>getVal</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a4f55fa3873e474a690ddd800afbb98e4" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector</scope><name>index_type</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a313b647e948370b83dc0c1740fd2c8f5" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector</scope><name>iterator</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1ac2417abc0abe3d0ceec513757d05e476" prot="protected" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector</scope><name>m_resizeLambda</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a85b321d378f02d91cde3dff28cd5eb66" prot="protected" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector</scope><name>m_span</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a225e077992be801e86230e08b52af380" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector</scope><name>operator()</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a04f85a234bbb581b65ad899b4baab20a" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector</scope><name>operator()</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1aa73fd1269957b82b21d99f28f2639eaa" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector</scope><name>operator=</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1aa7418456c07db18ee41e7e0e539a913f" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector</scope><name>operator=</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a2a89e82c87e4dfab48aafbb9024a4350" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector</scope><name>operator=</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1ac73657af135dd7b0144d8224c7f23d9f" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector</scope><name>operator[]</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a91c360963bed203fac33d7e3aa72508f" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector</scope><name>operator[]</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1adae1d70a1d3dca657930c035e635e851" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector</scope><name>pointer</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a47df090ff342328a85eaead732eab8f2" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector</scope><name>rbegin</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a8da9cd4ab5b707411b387d84faccc643" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector</scope><name>rbegin</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a873edd06479798e49e1bfddc84e076d0" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector</scope><name>reference</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a833502c7670d8b5d56b8e2702e567c56" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector</scope><name>rend</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1ac76fc757642e963273694237ef3b8ca5" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector</scope><name>rend</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a09f72ef6146dd541046a6a6fb9a5b623" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector</scope><name>resize</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a179fb4125500117720e5b6d9c53d497d" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector</scope><name>resize_function_type</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1ac70d5617a50f5a8856a324f9580091b9" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector</scope><name>resizeVector</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1adc6bc899e28272405795bfbf048d0df5" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector</scope><name>reverse_iterator</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a27d762527a91fc94749ba4aed34c7b27" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector</scope><name>setVal</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a4fdd476b7b135f9bbbc5bb2d16afc5b9" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector</scope><name>size</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a3474ae91039b79c5f0f97363e5119f9e" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector</scope><name>size_type</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1ae1488b2f061a0cab4b8f29d574a896ed" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector</scope><name>toEigen</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a7a2101a9a20acfdb75a2b01e2701fb6c" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector</scope><name>toEigen</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a57f6d86dc70039a4399369f060d508ae" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector</scope><name>value_type</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1aaaa9a73b59fc0db6aec86338f39e9ca9" prot="protected" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector</scope><name>Vector</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1adecc18b1ac9f884a35a0d038226f77f0" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector</scope><name>Vector</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a4bd32da4a52c5286e5a51d571cb75c7e" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector</scope><name>Vector</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a021e9da2bb8ad05425785f13d18052ad" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector</scope><name>Vector</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a0b14bc1588d8a0fb19c08c7ef2c55631" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector</scope><name>Vector</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a57641a052b3f164b8bfc24105f9d26f1" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector</scope><name>vector_element_type</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1aa00909c13a587b8e433f31c1af2af8a3" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector</scope><name>~Vector</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
