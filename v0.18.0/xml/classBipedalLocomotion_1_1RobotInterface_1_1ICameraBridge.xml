<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classBipedalLocomotion_1_1RobotInterface_1_1ICameraBridge" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>BipedalLocomotion::RobotInterface::ICameraBridge</compoundname>
    <derivedcompoundref refid="classBipedalLocomotion_1_1Perception_1_1Capture_1_1RealSense" prot="public" virt="non-virtual">BipedalLocomotion::Perception::Capture::RealSense</derivedcompoundref>
    <derivedcompoundref refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpCameraBridge" prot="public" virt="non-virtual">BipedalLocomotion::RobotInterface::YarpCameraBridge</derivedcompoundref>
    <includes local="no">BipedalLocomotion/RobotInterface/ICameraBridge.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classBipedalLocomotion_1_1RobotInterface_1_1ICameraBridge_1aa6d0959360199d4dca78f0e14d046793" prot="public" static="no">
        <type>std::unique_ptr&lt; <ref refid="classBipedalLocomotion_1_1RobotInterface_1_1ICameraBridge" kindref="compound">ICameraBridge</ref> &gt;</type>
        <definition>using BipedalLocomotion::RobotInterface::ICameraBridge::unique_ptr =  std::unique_ptr&lt;ICameraBridge&gt;</definition>
        <argsstring></argsstring>
        <name>unique_ptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/ICameraBridge.h" line="67" column="5" bodyfile="BipedalLocomotion/RobotInterface/ICameraBridge.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classBipedalLocomotion_1_1RobotInterface_1_1ICameraBridge_1aaa69e3706400eaaa4292e2b57e81baf7" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="classBipedalLocomotion_1_1RobotInterface_1_1ICameraBridge" kindref="compound">ICameraBridge</ref> &gt;</type>
        <definition>using BipedalLocomotion::RobotInterface::ICameraBridge::shared_ptr =  std::shared_ptr&lt;ICameraBridge&gt;</definition>
        <argsstring></argsstring>
        <name>shared_ptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/ICameraBridge.h" line="69" column="5" bodyfile="BipedalLocomotion/RobotInterface/ICameraBridge.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classBipedalLocomotion_1_1RobotInterface_1_1ICameraBridge_1ab535fbdd8130c0208c2f97e031f07f89" prot="public" static="no">
        <type>std::weak_ptr&lt; <ref refid="classBipedalLocomotion_1_1RobotInterface_1_1ICameraBridge" kindref="compound">ICameraBridge</ref> &gt;</type>
        <definition>using BipedalLocomotion::RobotInterface::ICameraBridge::weak_ptr =  std::weak_ptr&lt;ICameraBridge&gt;</definition>
        <argsstring></argsstring>
        <name>weak_ptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/ICameraBridge.h" line="71" column="5" bodyfile="BipedalLocomotion/RobotInterface/ICameraBridge.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1ICameraBridge_1abb42ab89afe8f0eb1f0cc3120f5bc4b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool BipedalLocomotion::RobotInterface::ICameraBridge::initialize</definition>
        <argsstring>(std::weak_ptr&lt; const ParametersHandler::IParametersHandler &gt; handler)=0</argsstring>
        <name>initialize</name>
        <reimplementedby refid="classBipedalLocomotion_1_1Perception_1_1Capture_1_1RealSense_1ab62c959a67d07050e32e4268de97855e">initialize</reimplementedby>
        <reimplementedby refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpCameraBridge_1ab940d3cdfaa1a4096142c762e1e74868">initialize</reimplementedby>
        <param>
          <type>std::weak_ptr&lt; const <ref refid="classBipedalLocomotion_1_1ParametersHandler_1_1IParametersHandler" kindref="compound">ParametersHandler::IParametersHandler</ref> &gt;</type>
          <declname>handler</declname>
        </param>
        <briefdescription>
<para>Initialize estimator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handler</parametername>
</parameternamelist>
<parameterdescription>
<para>Parameters handler </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/ICameraBridge.h" line="77" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1ICameraBridge_1a18d604a503f9ba409aa1351de5fc7f1f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool BipedalLocomotion::RobotInterface::ICameraBridge::getRGBCamerasList</definition>
        <argsstring>(std::vector&lt; std::string &gt; &amp;rgbCamerasList)</argsstring>
        <name>getRGBCamerasList</name>
        <reimplementedby refid="classBipedalLocomotion_1_1Perception_1_1Capture_1_1RealSense_1af1ca4cd8209134751b367bc50e8c0188">getRGBCamerasList</reimplementedby>
        <reimplementedby refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpCameraBridge_1a5bcc48a9687e55fff28e3eb3d530631c">getRGBCamerasList</reimplementedby>
        <param>
          <type>std::vector&lt; std::string &gt; &amp;</type>
          <declname>rgbCamerasList</declname>
        </param>
        <briefdescription>
<para>Get rgb cameras. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">rgbCamerasList</parametername>
</parameternamelist>
<parameterdescription>
<para>list of rgb cameras attached to the bridge </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true/false in case of success/failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/ICameraBridge.h" line="84" column="18" bodyfile="BipedalLocomotion/RobotInterface/ICameraBridge.h" bodystart="84" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1ICameraBridge_1a4157fc5df74981423dc29fe3afb27558" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool BipedalLocomotion::RobotInterface::ICameraBridge::getRGBDCamerasList</definition>
        <argsstring>(std::vector&lt; std::string &gt; &amp;rgbdCamerasList)</argsstring>
        <name>getRGBDCamerasList</name>
        <reimplementedby refid="classBipedalLocomotion_1_1Perception_1_1Capture_1_1RealSense_1aa74ffa2259745453e3967698ba57b1ad">getRGBDCamerasList</reimplementedby>
        <reimplementedby refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpCameraBridge_1a3608f3f85a736e7cfe24e7aa0fc8b9f6">getRGBDCamerasList</reimplementedby>
        <param>
          <type>std::vector&lt; std::string &gt; &amp;</type>
          <declname>rgbdCamerasList</declname>
        </param>
        <briefdescription>
<para>Get RGBD cameras. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">rgbdCamerasList</parametername>
</parameternamelist>
<parameterdescription>
<para>list of rgbd cameras attached to the bridge </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true/false in case of success/failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/ICameraBridge.h" line="94" column="18" bodyfile="BipedalLocomotion/RobotInterface/ICameraBridge.h" bodystart="94" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1ICameraBridge_1a06408daf35fede203127d24e05a219a9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool BipedalLocomotion::RobotInterface::ICameraBridge::getColorImage</definition>
        <argsstring>(const std::string &amp;camName, cv::Mat &amp;colorImg, std::optional&lt; std::reference_wrapper&lt; double &gt;&gt; receiveTimeInSeconds={})</argsstring>
        <name>getColorImage</name>
        <reimplementedby refid="classBipedalLocomotion_1_1Perception_1_1Capture_1_1RealSense_1a1a499f3c2393f12d95706544db1fe735">getColorImage</reimplementedby>
        <reimplementedby refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpCameraBridge_1a3a537945fb338732f19c3a5834238d43">getColorImage</reimplementedby>
        <param>
          <type>const std::string &amp;</type>
          <declname>camName</declname>
        </param>
        <param>
          <type>cv::Mat &amp;</type>
          <declname>colorImg</declname>
        </param>
        <param>
          <type>std::optional&lt; std::reference_wrapper&lt; double &gt;&gt;</type>
          <declname>receiveTimeInSeconds</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Get color image from the camera. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">camName</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the camera </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">colorImg</parametername>
</parameternamelist>
<parameterdescription>
<para>image as cv Mat object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">receiveTimeInSeconds</parametername>
</parameternamelist>
<parameterdescription>
<para>time at which the measurement was received</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>the size is decided at the configuration and remains fixed, and internal checks must be done at the implementation level by the Derived class. This means that the user must pass a resized argument &quot;colorImg&quot; to this method</para>
</simplesect>
<simplesect kind="return"><para>true/false in case of success/failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/ICameraBridge.h" line="112" column="5" bodyfile="BipedalLocomotion/RobotInterface/ICameraBridge.h" bodystart="112" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1ICameraBridge_1ad267af952a3bd668f0b2bf83e72b9396" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool BipedalLocomotion::RobotInterface::ICameraBridge::getDepthImage</definition>
        <argsstring>(const std::string &amp;camName, cv::Mat &amp;depthImg, std::optional&lt; std::reference_wrapper&lt; double &gt;&gt; receiveTimeInSeconds={})</argsstring>
        <name>getDepthImage</name>
        <reimplementedby refid="classBipedalLocomotion_1_1Perception_1_1Capture_1_1RealSense_1a5a0ac5b5c10b4960f63448b9c4d51e95">getDepthImage</reimplementedby>
        <reimplementedby refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpCameraBridge_1a880c0bee874ee8c73b9a82764dff1417">getDepthImage</reimplementedby>
        <param>
          <type>const std::string &amp;</type>
          <declname>camName</declname>
        </param>
        <param>
          <type>cv::Mat &amp;</type>
          <declname>depthImg</declname>
        </param>
        <param>
          <type>std::optional&lt; std::reference_wrapper&lt; double &gt;&gt;</type>
          <declname>receiveTimeInSeconds</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Get depth image. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">camName</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the camera </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">depthImg</parametername>
</parameternamelist>
<parameterdescription>
<para>depth image as a cv Mat object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">receiveTimeInSeconds</parametername>
</parameternamelist>
<parameterdescription>
<para>time at which the measurement was received</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>the size is decided at the configuration and remains fixed, and internal checks must be done at the implementation level by the Derived class. This means that the user must pass a resized argument &quot;depthImg&quot; to this method</para>
</simplesect>
<simplesect kind="return"><para>true/false in case of success/failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/ICameraBridge.h" line="132" column="5" bodyfile="BipedalLocomotion/RobotInterface/ICameraBridge.h" bodystart="132" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1ICameraBridge_1a9e9e6eb606d25b2fff1d5c77c348aafa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>const <ref refid="structBipedalLocomotion_1_1RobotInterface_1_1CameraBridgeMetaData" kindref="compound">CameraBridgeMetaData</ref> &amp;</type>
        <definition>virtual const CameraBridgeMetaData&amp; BipedalLocomotion::RobotInterface::ICameraBridge::getMetaData</definition>
        <argsstring>() const =0</argsstring>
        <name>getMetaData</name>
        <reimplementedby refid="classBipedalLocomotion_1_1Perception_1_1Capture_1_1RealSense_1a4f5b5a2361719920b803c936326a5092">getMetaData</reimplementedby>
        <reimplementedby refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpCameraBridge_1acf9b48bab358a0d307312a102bbb6f78">getMetaData</reimplementedby>
        <briefdescription>
<para>Get the stored metadata. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a const reference to the metadata </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/ICameraBridge.h" line="143" column="40"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1ICameraBridge_1ad029283df1539db6fae56c9b0ea50ad2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool BipedalLocomotion::RobotInterface::ICameraBridge::isValid</definition>
        <argsstring>() const =0</argsstring>
        <name>isValid</name>
        <reimplementedby refid="classBipedalLocomotion_1_1Perception_1_1Capture_1_1RealSense_1a799b8b65d9cd38bcdd02566b2ab4dc92">isValid</reimplementedby>
        <reimplementedby refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpCameraBridge_1a331bd024381ed5c2a879d03ac75614de">isValid</reimplementedby>
        <briefdescription>
<para>Determines the validity of the object retrieved with getMetadata() </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if the object is valid, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/ICameraBridge.h" line="149" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1ICameraBridge_1af72e9dd0ee0391e93ce4b56733c25757" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual BipedalLocomotion::RobotInterface::ICameraBridge::~ICameraBridge</definition>
        <argsstring>()=default</argsstring>
        <name>~ICameraBridge</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/ICameraBridge.h" line="154" column="13"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1ICameraBridge_1ab3512211fe40a0ef2bad6c8354dd581d" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool BipedalLocomotion::RobotInterface::ICameraBridge::populateCameraBridgeOptionsFromConfig</definition>
        <argsstring>(std::weak_ptr&lt; BipedalLocomotion::ParametersHandler::IParametersHandler &gt; handler, CameraBridgeOptions &amp;cameraBridgeOptions)</argsstring>
        <name>populateCameraBridgeOptionsFromConfig</name>
        <param>
          <type>std::weak_ptr&lt; <ref refid="classBipedalLocomotion_1_1ParametersHandler_1_1IParametersHandler" kindref="compound">BipedalLocomotion::ParametersHandler::IParametersHandler</ref> &gt;</type>
          <declname>handler</declname>
        </param>
        <param>
          <type><ref refid="structBipedalLocomotion_1_1RobotInterface_1_1CameraBridgeOptions" kindref="compound">CameraBridgeOptions</ref> &amp;</type>
          <declname>cameraBridgeOptions</declname>
        </param>
        <briefdescription>
<para>Helper method to maintain <ref refid="structBipedalLocomotion_1_1RobotInterface_1_1CameraBridgeOptions" kindref="compound">CameraBridgeOptions</ref> struct by populating it from the configuration parameters. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>the user may choose to use/not use this method depending on their requirements for the implementation if the user chooses to not use the method, the implementation must simply contain &quot;return true;&quot;</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handler</parametername>
</parameternamelist>
<parameterdescription>
<para>Parameters handler </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cameraBridgeOptions</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structBipedalLocomotion_1_1RobotInterface_1_1CameraBridgeOptions" kindref="compound">CameraBridgeOptions</ref> to hold the bridge options for streaming sensor measurements </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/ICameraBridge.h" line="168" column="18" bodyfile="BipedalLocomotion/RobotInterface/ICameraBridge.h" bodystart="168" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1ICameraBridge_1a558cc51658fe940823573793e0aea396" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool BipedalLocomotion::RobotInterface::ICameraBridge::populateCameraListsFromConfig</definition>
        <argsstring>(std::weak_ptr&lt; BipedalLocomotion::ParametersHandler::IParametersHandler &gt; handler, const CameraBridgeOptions &amp;cameraBridgeOptions, CameraLists &amp;cameraLists)</argsstring>
        <name>populateCameraListsFromConfig</name>
        <param>
          <type>std::weak_ptr&lt; <ref refid="classBipedalLocomotion_1_1ParametersHandler_1_1IParametersHandler" kindref="compound">BipedalLocomotion::ParametersHandler::IParametersHandler</ref> &gt;</type>
          <declname>handler</declname>
        </param>
        <param>
          <type>const <ref refid="structBipedalLocomotion_1_1RobotInterface_1_1CameraBridgeOptions" kindref="compound">CameraBridgeOptions</ref> &amp;</type>
          <declname>cameraBridgeOptions</declname>
        </param>
        <param>
          <type><ref refid="structBipedalLocomotion_1_1RobotInterface_1_1CameraLists" kindref="compound">CameraLists</ref> &amp;</type>
          <declname>cameraLists</declname>
        </param>
        <briefdescription>
<para>Helper method to maintain <ref refid="structBipedalLocomotion_1_1RobotInterface_1_1CameraLists" kindref="compound">CameraLists</ref> struct by populating it from the configuration parameters. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>the user may choose to use/not use this method depending on their requirements for the implementation if the user chooses to not use the method, the implementation must simply contain &quot;return true;&quot;</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handler</parametername>
</parameternamelist>
<parameterdescription>
<para>Parameters handler </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cameraBridgeOptions</parametername>
</parameternamelist>
<parameterdescription>
<para>configured object of <ref refid="structBipedalLocomotion_1_1RobotInterface_1_1CameraBridgeOptions" kindref="compound">CameraBridgeOptions</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cameraLists</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structBipedalLocomotion_1_1RobotInterface_1_1CameraLists" kindref="compound">CameraLists</ref> object holding list of connected sensor devices </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/ICameraBridge.h" line="186" column="18" bodyfile="BipedalLocomotion/RobotInterface/ICameraBridge.h" bodystart="186" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1ICameraBridge_1a79f70ac178d2c60151483e84c000c5cb" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool BipedalLocomotion::RobotInterface::ICameraBridge::populateCameraBridgeMetaDataFromConfig</definition>
        <argsstring>(std::weak_ptr&lt; BipedalLocomotion::ParametersHandler::IParametersHandler &gt; handler, CameraBridgeMetaData &amp;cameraBridgeMetaData)</argsstring>
        <name>populateCameraBridgeMetaDataFromConfig</name>
        <param>
          <type>std::weak_ptr&lt; <ref refid="classBipedalLocomotion_1_1ParametersHandler_1_1IParametersHandler" kindref="compound">BipedalLocomotion::ParametersHandler::IParametersHandler</ref> &gt;</type>
          <declname>handler</declname>
        </param>
        <param>
          <type><ref refid="structBipedalLocomotion_1_1RobotInterface_1_1CameraBridgeMetaData" kindref="compound">CameraBridgeMetaData</ref> &amp;</type>
          <declname>cameraBridgeMetaData</declname>
        </param>
        <briefdescription>
<para>Helper method to maintain <ref refid="structBipedalLocomotion_1_1RobotInterface_1_1CameraBridgeMetaData" kindref="compound">CameraBridgeMetaData</ref> struct by populating it from the configuration parameters. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>the user may choose to use/not use this method depending on their requirements for the implementation if the user chooses to not use the method, the implementation must simply contain &quot;return true;&quot;</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handler</parametername>
</parameternamelist>
<parameterdescription>
<para>Parameters handler </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in"><ref refid="structBipedalLocomotion_1_1RobotInterface_1_1CameraBridgeMetaData" kindref="compound">CameraBridgeMetaData</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>configured object of <ref refid="structBipedalLocomotion_1_1RobotInterface_1_1CameraBridgeMetaData" kindref="compound">CameraBridgeMetaData</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/ICameraBridge.h" line="204" column="18" bodyfile="BipedalLocomotion/RobotInterface/ICameraBridge.h" bodystart="204" bodyend="209"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Sensor bridge interface. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>BipedalLocomotion::Perception::Capture::RealSense</label>
        <link refid="classBipedalLocomotion_1_1Perception_1_1Capture_1_1RealSense"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>BipedalLocomotion::RobotInterface::YarpCameraBridge</label>
        <link refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpCameraBridge"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>BipedalLocomotion::RobotInterface::ICameraBridge</label>
        <link refid="classBipedalLocomotion_1_1RobotInterface_1_1ICameraBridge"/>
      </node>
    </inheritancegraph>
    <location file="BipedalLocomotion/RobotInterface/ICameraBridge.h" line="64" column="1" bodyfile="BipedalLocomotion/RobotInterface/ICameraBridge.h" bodystart="65" bodyend="210"/>
    <listofallmembers>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1ICameraBridge_1a06408daf35fede203127d24e05a219a9" prot="public" virt="virtual"><scope>BipedalLocomotion::RobotInterface::ICameraBridge</scope><name>getColorImage</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1ICameraBridge_1ad267af952a3bd668f0b2bf83e72b9396" prot="public" virt="virtual"><scope>BipedalLocomotion::RobotInterface::ICameraBridge</scope><name>getDepthImage</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1ICameraBridge_1a9e9e6eb606d25b2fff1d5c77c348aafa" prot="public" virt="pure-virtual"><scope>BipedalLocomotion::RobotInterface::ICameraBridge</scope><name>getMetaData</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1ICameraBridge_1a18d604a503f9ba409aa1351de5fc7f1f" prot="public" virt="virtual"><scope>BipedalLocomotion::RobotInterface::ICameraBridge</scope><name>getRGBCamerasList</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1ICameraBridge_1a4157fc5df74981423dc29fe3afb27558" prot="public" virt="virtual"><scope>BipedalLocomotion::RobotInterface::ICameraBridge</scope><name>getRGBDCamerasList</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1ICameraBridge_1abb42ab89afe8f0eb1f0cc3120f5bc4b3" prot="public" virt="pure-virtual"><scope>BipedalLocomotion::RobotInterface::ICameraBridge</scope><name>initialize</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1ICameraBridge_1ad029283df1539db6fae56c9b0ea50ad2" prot="public" virt="pure-virtual"><scope>BipedalLocomotion::RobotInterface::ICameraBridge</scope><name>isValid</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1ICameraBridge_1a79f70ac178d2c60151483e84c000c5cb" prot="protected" virt="virtual"><scope>BipedalLocomotion::RobotInterface::ICameraBridge</scope><name>populateCameraBridgeMetaDataFromConfig</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1ICameraBridge_1ab3512211fe40a0ef2bad6c8354dd581d" prot="protected" virt="virtual"><scope>BipedalLocomotion::RobotInterface::ICameraBridge</scope><name>populateCameraBridgeOptionsFromConfig</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1ICameraBridge_1a558cc51658fe940823573793e0aea396" prot="protected" virt="virtual"><scope>BipedalLocomotion::RobotInterface::ICameraBridge</scope><name>populateCameraListsFromConfig</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1ICameraBridge_1aaa69e3706400eaaa4292e2b57e81baf7" prot="public" virt="non-virtual"><scope>BipedalLocomotion::RobotInterface::ICameraBridge</scope><name>shared_ptr</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1ICameraBridge_1aa6d0959360199d4dca78f0e14d046793" prot="public" virt="non-virtual"><scope>BipedalLocomotion::RobotInterface::ICameraBridge</scope><name>unique_ptr</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1ICameraBridge_1ab535fbdd8130c0208c2f97e031f07f89" prot="public" virt="non-virtual"><scope>BipedalLocomotion::RobotInterface::ICameraBridge</scope><name>weak_ptr</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1ICameraBridge_1af72e9dd0ee0391e93ce4b56733c25757" prot="public" virt="virtual"><scope>BipedalLocomotion::RobotInterface::ICameraBridge</scope><name>~ICameraBridge</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
