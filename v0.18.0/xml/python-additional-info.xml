<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="python-additional-info" kind="page">
    <compoundname>python-additional-info</compoundname>
    <title>üêç Python bindings</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><anchor id="python-additional-info_1md__home_runner_work_bipedal_locomotion_framework_bipedal_locomotion_framework_docs_bipedal_locomotion_framework_docs_pages_python_additional_info"/> </para>
<sect1 id="python-additional-info_1autotoc_md0">
<title>Introduction</title>
<para><bold>bipedal-locomotion-framework</bold> provides also python bindings. You can easily use them by importing <computeroutput>bipedal-locomotion-framework</computeroutput> in a python interpreter as follows</para>
<para><programlisting filename=".py"><codeline><highlight class="keyword">import</highlight><highlight class="normal"><sp/>bipedal_locomotion_framework.bindings<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>blf</highlight></codeline>
</programlisting></para>
<para>Once you have import it you can check the content of the bindings using <computeroutput>help(blf)</computeroutput>. We tried to implement a 1-to-1 mapping between the c++ structure and the python one, this means that every python submodule is associated to the equivalent c++ submodule. For instance <computeroutput>blf.tsid</computeroutput> represents the python bindings of <computeroutput>BipedalLocomotion::TSID</computeroutput> component.</para>
<para>The python bindings has been designed to be compliant to the <ulink url="https://www.python.org/dev/peps/pep-0008/">PEP-8</ulink>. This means that:</para>
<para><orderedlist>
<listitem><para><bold>function</bold> and the <bold>variables</bold> are lowercase words separated by underscore (<computeroutput>snake_case</computeroutput>)</para>
</listitem><listitem><para>The <bold>class</bold> names starts with a capital letter (<computeroutput>CammelCase</computeroutput>)</para>
</listitem><listitem><para>The <bold>modules</bold> are lowercase words separated by underscore (<computeroutput>snake_case</computeroutput>)</para>
</listitem></orderedlist>
</para>
<para>To give an example, the following code shows how to retrieve a parameter from a <computeroutput>toml</computeroutput> configuration file in c++ and in python</para>
<para><programlisting filename=".cpp"><codeline><highlight class="preprocessor">#include<sp/>&lt;<ref refid="TomlImplementation_8h" kindref="compound">BipedalLocomotion/ParametersHandler/TomlImplementation.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">blf<sp/>=<sp/>::BipedalLocomotion;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>parameterFile<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;./config.toml&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>param;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>paramHandler<sp/>=<sp/>std::make_shared&lt;blf::ParametersHandler::TomlImplementation&gt;();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>paramHandler-&gt;setFromFile(parameterFile);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>paramHandler-&gt;getParameter(</highlight><highlight class="stringliteral">&quot;vector&quot;</highlight><highlight class="normal">,<sp/>param);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_SUCCESS;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><programlisting filename=".py"><codeline><highlight class="keyword">import</highlight><highlight class="normal"><sp/>bipedal_locomotion_framework.bindings<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>blf</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">parameter_file<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;./config.toml&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">param_handler<sp/>=<sp/>blf.parameters_handler.TomlParametersHandler()</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">assert</highlight><highlight class="normal"><sp/>param_handler.set_from_file(parameter_file)</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">vector<sp/>=<sp/>param_handler.get_vector_of_int(</highlight><highlight class="stringliteral">&apos;vector&apos;</highlight><highlight class="normal">)</highlight></codeline>
</programlisting></para>
<para><programlisting filename=".ini"><codeline><highlight class="normal">#<sp/>config.toml<sp/>file</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">vector<sp/>=<sp/>[1,<sp/>2,<sp/>3,<sp/>4,<sp/>5]</highlight></codeline>
</programlisting></para>
</sect1>
<sect1 id="python-additional-info_1autotoc_md1">
<title>Some utilities</title>
<sect2 id="python-additional-info_1autotoc_md2">
<title>Create a custom TSID or IK task directly in Python</title>
<para>If you are a <computeroutput>python</computeroutput> user and you want create a inverse kinematics (IK) or a task based inverse dynamics (TSID) tasks, you do not need to write a <computeroutput>C++</computeroutput> code. Indeed it is possible to write a class that inherits from <computeroutput>TSIDLinearTask</computeroutput> or <computeroutput>IKLinearTask</computeroutput> and pass it to <computeroutput>tsid</computeroutput> or <computeroutput>ik</computeroutput> solvers. The following snippet can be used as starting point to build a custom TSID task, a similar approach can be used to define a custom IK task</para>
<para><programlisting filename=".py"><codeline><highlight class="keyword">import</highlight><highlight class="normal"><sp/>bipedal_locomotion_framework.bindings<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>blf</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">CustomTSIDTask(blf.tsid.TSIDLinearTask):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;<sp/>CustomTSIDTask<sp/>represents<sp/>a<sp/>custom<sp/>task<sp/>for<sp/>the<sp/>tsid<sp/>solver.</highlight></codeline>
<codeline><highlight class="stringliteral"></highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/>The<sp/>class<sp/>must<sp/>define<sp/>the<sp/>following<sp/>functions:</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/>__init__(self):<sp/>the<sp/>constructor</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/>size(self)<sp/>-&gt;<sp/>Get<sp/>the<sp/>size<sp/>of<sp/>the<sp/>task.<sp/>(I.e<sp/>the<sp/>number<sp/>of<sp/>rows<sp/>of<sp/>the<sp/>vector<sp/>b)</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/>is_valid(self)<sp/>-&gt;<sp/>Determines<sp/>the<sp/>validity<sp/>of<sp/>the<sp/>objects<sp/>retrieved<sp/>with<sp/>getA()<sp/>and<sp/>getB()</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/>type(self)<sp/>-&gt;<sp/>Get<sp/>the<sp/>type<sp/>of<sp/>the<sp/>task.<sp/>Namely<sp/>equality<sp/>or<sp/>inequality</highlight></codeline>
<codeline><highlight class="stringliteral"></highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Furthemore<sp/>you<sp/>have<sp/>to<sp/>populate<sp/>the<sp/>following<sp/>attrubutes<sp/>defined<sp/>in<sp/>TSIDLinearTask:</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/>self._description:str<sp/>-&gt;<sp/>contains<sp/>the<sp/>description<sp/>of<sp/>the<sp/>task</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/>self._A:numpy.ndarray[float64[m,<sp/>n]])<sp/>-&gt;<sp/>matrix<sp/>that<sp/>describes<sp/>the<sp/>task<sp/>A<sp/>*<sp/>x<sp/>=<sp/>b</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/>self._b:<sp/>numpy.ndarray[float64[m,<sp/>1]])<sp/>-&gt;<sp/>vector<sp/>that<sp/>describes<sp/>the<sp/>task<sp/>A<sp/>*<sp/>x<sp/>=<sp/>b</highlight></codeline>
<codeline><highlight class="stringliteral"></highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Depending<sp/>on<sp/>the<sp/>content<sp/>of<sp/>the<sp/>task<sp/>you<sp/>may<sp/>need<sp/>to<sp/>reimplement<sp/>the<sp/>following<sp/>methods</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/>initialize(self,<sp/>param_handler:<sp/>blf.parameters_handler.IParameterHandler)<sp/>-&gt;<sp/>usefull<sp/>function<sp/>to<sp/>set<sp/>parameters<sp/>to<sp/>the<sp/>task</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/>set_variables_handler(self,<sp/>variables_handler:<sp/>blf.system.VariablesHandler)<sp/>-&gt;<sp/>usefull<sp/>function<sp/>to<sp/>set<sp/>the<sp/>variables</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/>update(self)<sp/>-&gt;<sp/>update<sp/>the<sp/>content<sp/>of<sp/>the<sp/>task</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">__init__(self):</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blf.tsid.TSIDLinearTask.__init__(self)<sp/><sp/></highlight><highlight class="comment">#<sp/>Without<sp/>this,<sp/>a<sp/>TypeError<sp/>is<sp/>raised.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>set<sp/>the<sp/>description<sp/>of<sp/>the<sp/>task</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self._description<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Custom<sp/>task&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">size(self):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>this<sp/>is<sp/>the<sp/>number<sp/>of<sp/>rows<sp/>of<sp/>the<sp/>vector<sp/>b<sp/>(in<sp/>this<sp/>example<sp/>is<sp/>equal<sp/>to<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">is_valid(self):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">type(self):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>the<sp/>types<sp/>are<sp/>defined<sp/>in<sp/>blf.tsid.TSIDLinearTask.Type</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>blf.tsid.TSIDLinearTask.Type.equality</highlight></codeline>
</programlisting></para>
<para>Then you can use your custom task as follows</para>
<para><programlisting filename=".py"><codeline><highlight class="keyword">import</highlight><highlight class="normal"><sp/>bipedal_locomotion_framework.bindings<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>blf</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">#<sp/>Instantiate<sp/>the<sp/>task</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">custom_task<sp/>=<sp/>CustomTSIDTask()</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">#<sp/>Initialize<sp/>your<sp/>task</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">custom_task.initialize(param_handler)</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">#<sp/>Create<sp/>the<sp/>solver</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">solver<sp/>=<sp/>blf.tsid.QPTSID()</highlight></codeline>
<codeline><highlight class="normal">priority<sp/>=<sp/>0</highlight></codeline>
<codeline><highlight class="normal">solver.add_task(custom_task,<sp/></highlight><highlight class="stringliteral">&apos;custom_task&apos;</highlight><highlight class="normal">,<sp/>priority)</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="python-additional-info_1autotoc_md3">
<title>Automatically build a TSID or IK from configuration file</title>
<para>If you are a <computeroutput>python</computeroutput> user you can easily create a inverse kinematics (IK) or a task based inverse dynamics (TSID) problem writing just a configuration file. The configuration file should contains the name of the tasks and the parameters of the associated tasks. This is possible thanks to two utilities function available only in python (<computeroutput>create_ik</computeroutput> and <computeroutput>create_tsid</computeroutput>)</para>
<para>For instance you can create a IK problem with <programlisting filename=".py"><codeline><highlight class="keyword">import</highlight><highlight class="normal"><sp/>bipedal_locomotion_framework.bindings<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>blf</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>bipedal_locomotion_framework.utils<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>utils</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">#<sp/>create<sp/>a<sp/>param<sp/>handler</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">kindyn_handler<sp/>=<sp/>blf.parameters_handler.TomlParametersHandler()</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">assert</highlight><highlight class="normal"><sp/>kindyn_handler.set_from_file(</highlight><highlight class="stringliteral">&quot;parameter_file.toml&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal">ik_handler<sp/>=<sp/>blf.parameters_handler.TomlParametersHandler()</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">assert</highlight><highlight class="normal"><sp/>ik_handler.set_from_file(</highlight><highlight class="stringliteral">&quot;parameter_file_ik.toml&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">kindyn_descriptor<sp/>=<sp/>blf.floating_base_estimators.construct_kindyncomputations_descriptor(kindyn_handler)</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">solver,<sp/>tasks,<sp/>variables_handler<sp/>=<sp/>utils.create_ik(kindyn=kindyn_descriptor,<sp/>param_handler=ik_handler)</highlight></codeline>
</programlisting></para>
<para>An example of the configuration file is <programlisting filename=".ini"><codeline><highlight class="normal">tasks<sp/>=<sp/>[&quot;COM_TASK&quot;,<sp/>&quot;LF_TASK&quot;]</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">[IK]</highlight></codeline>
<codeline><highlight class="normal">robot_velocity_variable_name<sp/>=<sp/>&quot;robot_velocity&quot;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">[VARIABLES]</highlight></codeline>
<codeline><highlight class="normal">variables_name<sp/>=<sp/>[&quot;robot_velocity&quot;]</highlight></codeline>
<codeline><highlight class="normal">variables_size<sp/>=<sp/>[29]</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">[COM_TASK]</highlight></codeline>
<codeline><highlight class="normal">name<sp/>=<sp/>&quot;com&quot;</highlight></codeline>
<codeline><highlight class="normal">type<sp/>=<sp/>&quot;CoMTask&quot;</highlight></codeline>
<codeline><highlight class="normal">priority<sp/>=<sp/>1</highlight></codeline>
<codeline><highlight class="normal">weight<sp/>=<sp/>[10.0,<sp/>10.0,<sp/>10.0]</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>The<sp/>following<sp/>parameters<sp/>are<sp/>required<sp/>by<sp/>the<sp/>specific<sp/>task</highlight></codeline>
<codeline><highlight class="normal">robot_velocity_variable_name<sp/>=<sp/>&quot;robot_velocity&quot;</highlight></codeline>
<codeline><highlight class="normal">kp_linear<sp/>=<sp/>10.0</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">[LF_TASK]</highlight></codeline>
<codeline><highlight class="normal">name<sp/>=<sp/>&quot;left_foot&quot;</highlight></codeline>
<codeline><highlight class="normal">type<sp/>=<sp/>&quot;SE3Task&quot;</highlight></codeline>
<codeline><highlight class="normal">priority<sp/>=<sp/>0</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>The<sp/>following<sp/>parameters<sp/>are<sp/>required<sp/>by<sp/>the<sp/>specific<sp/>task</highlight></codeline>
<codeline><highlight class="normal">robot_velocity_variable_name<sp/>=<sp/>&quot;robot_velocity&quot;</highlight></codeline>
<codeline><highlight class="normal">frame_name<sp/>=<sp/>&quot;left_sole_link&quot;</highlight></codeline>
<codeline><highlight class="normal">kp_linear<sp/>=<sp/>10.0</highlight></codeline>
<codeline><highlight class="normal">kp_angular<sp/>=<sp/>10.0</highlight></codeline>
</programlisting></para>
<para>You can find further details calling <programlisting filename=".py"><codeline><highlight class="keyword">import</highlight><highlight class="normal"><sp/>bipedal_locomotion_framework.utils<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>utils</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">help(utils.create_tsid)</highlight></codeline>
<codeline><highlight class="normal">help(utils.create_ik)</highlight></codeline>
</programlisting> </para>
</sect2>
</sect1>
    </detaileddescription>
    <location file="/home/runner/work/bipedal-locomotion-framework/bipedal-locomotion-framework/docs/bipedal-locomotion-framework/docs/pages/python-additional-info.md"/>
  </compounddef>
</doxygen>
