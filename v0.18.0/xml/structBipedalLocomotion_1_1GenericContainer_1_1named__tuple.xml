<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="structBipedalLocomotion_1_1GenericContainer_1_1named__tuple" kind="struct" language="C++" prot="public">
    <compoundname>BipedalLocomotion::GenericContainer::named_tuple</compoundname>
    <basecompoundref prot="public" virt="non-virtual">std::tuple&lt; Params... &gt;</basecompoundref>
    <includes local="no">BipedalLocomotion/GenericContainer/NamedTuple.h</includes>
    <templateparamlist>
      <param>
        <type>typename...</type>
        <declname>Params</declname>
        <defname>Params</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structBipedalLocomotion_1_1GenericContainer_1_1named__tuple_1ae0678a6ed65835895dc29fc28b5ff9d0" prot="public" static="no">
        <type>std::tuple&lt; typename Params::Type... &gt;</type>
        <definition>using BipedalLocomotion::GenericContainer::named_tuple&lt; Params &gt;::underlying_tuple =  std::tuple&lt;typename Params::Type...&gt;</definition>
        <argsstring></argsstring>
        <name>underlying_tuple</name>
        <briefdescription>
<para>Underlying tuple that can be generate from this <ref refid="structBipedalLocomotion_1_1GenericContainer_1_1named__tuple" kindref="compound">named_tuple</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/GenericContainer/NamedTuple.h" line="94" column="5" bodyfile="BipedalLocomotion/GenericContainer/NamedTuple.h" bodystart="94" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="structBipedalLocomotion_1_1GenericContainer_1_1named__tuple_1a695fe9ef7bf4ac9a9b3e80a822d2044a" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>constexpr std::size_t</type>
        <definition>constexpr std::size_t BipedalLocomotion::GenericContainer::named_tuple&lt; Params &gt;::error</definition>
        <argsstring></argsstring>
        <name>error</name>
        <initializer>= -1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/GenericContainer/NamedTuple.h" line="293" column="34" bodyfile="BipedalLocomotion/GenericContainer/NamedTuple.h" bodystart="293" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structBipedalLocomotion_1_1GenericContainer_1_1named__tuple_1ae0998b1c3455b0663ce8ba685a73fb8c" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr BipedalLocomotion::GenericContainer::named_tuple&lt; Params &gt;::named_tuple</definition>
        <argsstring>()</argsstring>
        <name>named_tuple</name>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/GenericContainer/NamedTuple.h" line="99" column="15" bodyfile="BipedalLocomotion/GenericContainer/NamedTuple.h" bodystart="99" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="structBipedalLocomotion_1_1GenericContainer_1_1named__tuple_1aab715eb5e81fbe7a8eb30b74767e2c3b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>BipedalLocomotion::GenericContainer::named_tuple&lt; Params &gt;::named_tuple</definition>
        <argsstring>(Params &amp;&amp;... args)</argsstring>
        <name>named_tuple</name>
        <param>
          <type>Params &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/GenericContainer/NamedTuple.h" line="107" column="5" bodyfile="BipedalLocomotion/GenericContainer/NamedTuple.h" bodystart="107" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="structBipedalLocomotion_1_1GenericContainer_1_1named__tuple_1a639718fa237c24ba9865876e449f7202" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type></type>
        <definition>BipedalLocomotion::GenericContainer::named_tuple&lt; Params &gt;::named_tuple</definition>
        <argsstring>(const std::tuple&lt; Args... &gt; &amp;t)</argsstring>
        <name>named_tuple</name>
        <param>
          <type>const std::tuple&lt; Args... &gt; &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Construct from a tuple. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>a tuple having the same number of elements of of <ref refid="structBipedalLocomotion_1_1GenericContainer_1_1named__tuple" kindref="compound">named_tuple</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>This constructor requires the type of the elements of the tuple to be convertible into Params. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/GenericContainer/NamedTuple.h" line="119" column="5" bodyfile="BipedalLocomotion/GenericContainer/NamedTuple.h" bodystart="119" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="structBipedalLocomotion_1_1GenericContainer_1_1named__tuple_1a64bba5aa718265896658eb2e0411c8b8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type></type>
        <definition>BipedalLocomotion::GenericContainer::named_tuple&lt; Params &gt;::named_tuple</definition>
        <argsstring>(std::tuple&lt; Args... &gt; &amp;&amp;t)</argsstring>
        <name>named_tuple</name>
        <param>
          <type>std::tuple&lt; Args... &gt; &amp;&amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Construct from a tuple. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>a tuple having the same number of elements of <ref refid="structBipedalLocomotion_1_1GenericContainer_1_1named__tuple" kindref="compound">named_tuple</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>This constructor requires the type of the elements of the tuple to be convertible into Params. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/GenericContainer/NamedTuple.h" line="133" column="5" bodyfile="BipedalLocomotion/GenericContainer/NamedTuple.h" bodystart="133" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="structBipedalLocomotion_1_1GenericContainer_1_1named__tuple_1a97abdf681a3aecdc7277984412910b21" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structBipedalLocomotion_1_1GenericContainer_1_1named__tuple" kindref="compound">named_tuple</ref> &amp;</type>
        <definition>named_tuple&amp; BipedalLocomotion::GenericContainer::named_tuple&lt; Params &gt;::operator=</definition>
        <argsstring>(const std::tuple&lt; Args... &gt; &amp;t)</argsstring>
        <name>operator=</name>
        <param>
          <type>const std::tuple&lt; Args... &gt; &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Copy from a tuple. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>tuple </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/GenericContainer/NamedTuple.h" line="144" column="29" bodyfile="BipedalLocomotion/GenericContainer/NamedTuple.h" bodystart="144" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="structBipedalLocomotion_1_1GenericContainer_1_1named__tuple_1a95a086685c1ad77b94464fb6d7f49ae5" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
        </templateparamlist>
        <type>const std::tuple_element&lt; I, <ref refid="structBipedalLocomotion_1_1GenericContainer_1_1named__tuple_1ae0678a6ed65835895dc29fc28b5ff9d0" kindref="member">underlying_tuple</ref> &gt;::type &amp;</type>
        <definition>const std::tuple_element&lt;I, underlying_tuple&gt;::type&amp; BipedalLocomotion::GenericContainer::named_tuple&lt; Params &gt;::get</definition>
        <argsstring>() const noexcept</argsstring>
        <name>get</name>
        <briefdescription>
<para>Extracts the Ith element from the <ref refid="structBipedalLocomotion_1_1GenericContainer_1_1named__tuple" kindref="compound">named_tuple</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>It must be an integer value in <computeroutput>[0, sizeof...(Types))</computeroutput>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="structBipedalLocomotion_1_1GenericContainer_1_1named__tuple" kindref="compound">named_tuple</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to the selected element of t. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/GenericContainer/NamedTuple.h" line="159" column="46" bodyfile="BipedalLocomotion/GenericContainer/NamedTuple.h" bodystart="159" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="structBipedalLocomotion_1_1GenericContainer_1_1named__tuple_1a0e6ab3315e814585124ff6bb1952ace5" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
        </templateparamlist>
        <type>std::tuple_element&lt; I, <ref refid="structBipedalLocomotion_1_1GenericContainer_1_1named__tuple_1ae0678a6ed65835895dc29fc28b5ff9d0" kindref="member">underlying_tuple</ref> &gt;::type &amp;</type>
        <definition>std::tuple_element&lt;I, underlying_tuple&gt;::type&amp; BipedalLocomotion::GenericContainer::named_tuple&lt; Params &gt;::get</definition>
        <argsstring>() noexcept</argsstring>
        <name>get</name>
        <briefdescription>
<para>Extracts the Ith element from the <ref refid="structBipedalLocomotion_1_1GenericContainer_1_1named__tuple" kindref="compound">named_tuple</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>I must be an integer value in <computeroutput>[0, sizeof...(Types))</computeroutput>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="structBipedalLocomotion_1_1GenericContainer_1_1named__tuple" kindref="compound">named_tuple</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to the selected element of t. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/GenericContainer/NamedTuple.h" line="171" column="52" bodyfile="BipedalLocomotion/GenericContainer/NamedTuple.h" bodystart="171" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="structBipedalLocomotion_1_1GenericContainer_1_1named__tuple_1a915b403920de6dc9408df99dd0aff863" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>hash_type</type>
            <declname>Hash</declname>
            <defname>Hash</defname>
          </param>
        </templateparamlist>
        <type>const auto &amp;</type>
        <definition>const auto&amp; BipedalLocomotion::GenericContainer::named_tuple&lt; Params &gt;::get_from_hash</definition>
        <argsstring>() const noexcept</argsstring>
        <name>get_from_hash</name>
        <briefdescription>
<para>Extracts the element from the <ref refid="structBipedalLocomotion_1_1GenericContainer_1_1named__tuple" kindref="compound">named_tuple</ref> associated to the hash <computeroutput>Hash</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><computeroutput>Hash</computeroutput> must be among one of the hash values associated to the tuple when created. @return A reference to the selected element of t. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/GenericContainer/NamedTuple.h" line="182" column="28" bodyfile="BipedalLocomotion/GenericContainer/NamedTuple.h" bodystart="182" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="structBipedalLocomotion_1_1GenericContainer_1_1named__tuple_1a5a4d6b22b3f493abfba148d977e04b25" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>hash_type</type>
            <declname>Hash</declname>
            <defname>Hash</defname>
          </param>
        </templateparamlist>
        <type>auto &amp;</type>
        <definition>auto&amp; BipedalLocomotion::GenericContainer::named_tuple&lt; Params &gt;::get_from_hash</definition>
        <argsstring>() noexcept</argsstring>
        <name>get_from_hash</name>
        <briefdescription>
<para>Extracts the element from the <ref refid="structBipedalLocomotion_1_1GenericContainer_1_1named__tuple" kindref="compound">named_tuple</ref> associated to the hash <computeroutput>Hash</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><computeroutput>Hash</computeroutput> must be among one of the hash values associated to the tuple when created. @return A reference to the selected element of t. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/GenericContainer/NamedTuple.h" line="194" column="22" bodyfile="BipedalLocomotion/GenericContainer/NamedTuple.h" bodystart="194" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="structBipedalLocomotion_1_1GenericContainer_1_1named__tuple_1ac18226129c902c1daeea6f5dd59b8be4" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="structBipedalLocomotion_1_1GenericContainer_1_1named__tuple_1ae0678a6ed65835895dc29fc28b5ff9d0" kindref="member">underlying_tuple</ref></type>
        <definition>underlying_tuple BipedalLocomotion::GenericContainer::named_tuple&lt; Params &gt;::to_tuple</definition>
        <argsstring>() const noexcept</argsstring>
        <name>to_tuple</name>
        <briefdescription>
<para>Return the associated std::tuple. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the tuple associated to the <ref refid="structBipedalLocomotion_1_1GenericContainer_1_1named__tuple" kindref="compound">named_tuple</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/GenericContainer/NamedTuple.h" line="205" column="22" bodyfile="BipedalLocomotion/GenericContainer/NamedTuple.h" bodystart="205" bodyend="210"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="structBipedalLocomotion_1_1GenericContainer_1_1named__tuple_1a0d096e7d209a199be7b4db9c1643545c" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>I</declname>
            <defname>I</defname>
            <defval>0</defval>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; I==sizeof...(Params), void &gt;::type</type>
        <definition>std::enable_if&lt;I == sizeof...(Params), void&gt;::type BipedalLocomotion::GenericContainer::named_tuple&lt; Params &gt;::copy_to_tuple</definition>
        <argsstring>(underlying_tuple &amp;t) const</argsstring>
        <name>copy_to_tuple</name>
        <param>
          <type><ref refid="structBipedalLocomotion_1_1GenericContainer_1_1named__tuple_1ae0678a6ed65835895dc29fc28b5ff9d0" kindref="member">underlying_tuple</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Copy an element of a <ref refid="structBipedalLocomotion_1_1GenericContainer_1_1named__tuple" kindref="compound">named_tuple</ref> in tuple. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>a tuple </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>This ends the compile time recursive function </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/GenericContainer/NamedTuple.h" line="220" column="5" bodyfile="BipedalLocomotion/GenericContainer/NamedTuple.h" bodystart="220" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="structBipedalLocomotion_1_1GenericContainer_1_1named__tuple_1ac06ffb307e2dd77980ff6589c78d8cbc" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>I</declname>
            <defname>I</defname>
            <defval>0</defval>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt;(I&lt; sizeof...(Params)), void &gt;::type</type>
        <definition>std::enable_if&lt;(I &lt; sizeof...(Params)), void&gt;::type BipedalLocomotion::GenericContainer::named_tuple&lt; Params &gt;::copy_to_tuple</definition>
        <argsstring>(underlying_tuple &amp;t) const</argsstring>
        <name>copy_to_tuple</name>
        <param>
          <type><ref refid="structBipedalLocomotion_1_1GenericContainer_1_1named__tuple_1ae0678a6ed65835895dc29fc28b5ff9d0" kindref="member">underlying_tuple</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Copy an element of a <ref refid="structBipedalLocomotion_1_1GenericContainer_1_1named__tuple" kindref="compound">named_tuple</ref> in tuple. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>a tuple </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>This is a compile time recursive function </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/GenericContainer/NamedTuple.h" line="231" column="5" bodyfile="BipedalLocomotion/GenericContainer/NamedTuple.h" bodystart="231" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="structBipedalLocomotion_1_1GenericContainer_1_1named__tuple_1a8c513521fb117d766b521c64c637fd93" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>I</declname>
            <defname>I</defname>
            <defval>0</defval>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; I==sizeof...(Params), void &gt;::type</type>
        <definition>std::enable_if&lt;I == sizeof...(Params), void&gt;::type BipedalLocomotion::GenericContainer::named_tuple&lt; Params &gt;::copy_from_tuple</definition>
        <argsstring>(const std::tuple&lt; Args... &gt; &amp;t)</argsstring>
        <name>copy_from_tuple</name>
        <param>
          <type>const std::tuple&lt; Args... &gt; &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Copy an element of a tuple in <ref refid="structBipedalLocomotion_1_1GenericContainer_1_1named__tuple" kindref="compound">named_tuple</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>a tuple </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>This ends the compile time recursive function </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/GenericContainer/NamedTuple.h" line="245" column="5" bodyfile="BipedalLocomotion/GenericContainer/NamedTuple.h" bodystart="245" bodyend="247"/>
      </memberdef>
      <memberdef kind="function" id="structBipedalLocomotion_1_1GenericContainer_1_1named__tuple_1ae801887c1b19e6dd87ae0b4a832acb09" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>I</declname>
            <defname>I</defname>
            <defval>0</defval>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt;(I&lt; sizeof...(Params)), void &gt;::type</type>
        <definition>std::enable_if&lt;(I &lt; sizeof...(Params)), void&gt;::type BipedalLocomotion::GenericContainer::named_tuple&lt; Params &gt;::copy_from_tuple</definition>
        <argsstring>(const std::tuple&lt; Args... &gt; &amp;t)</argsstring>
        <name>copy_from_tuple</name>
        <param>
          <type>const std::tuple&lt; Args... &gt; &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Copy an element of a tuple in <ref refid="structBipedalLocomotion_1_1GenericContainer_1_1named__tuple" kindref="compound">named_tuple</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>a tuple </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>This is a compile time recursive function </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/GenericContainer/NamedTuple.h" line="256" column="5" bodyfile="BipedalLocomotion/GenericContainer/NamedTuple.h" bodystart="256" bodyend="261"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="structBipedalLocomotion_1_1GenericContainer_1_1named__tuple_1a8bb79073debf1e24d032bb031e301651" prot="private" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>hash_type</type>
            <declname>Hash</declname>
            <defname>Hash</defname>
          </param>
          <param>
            <type>std::size_t</type>
            <declname>I</declname>
            <defname>I</defname>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>constexpr static std::enable_if&lt; I==sizeof...(Params), const std::size_t &gt;::type</type>
        <definition>constexpr static std::enable_if&lt;I == sizeof...(Params), const std::size_t&gt;::type BipedalLocomotion::GenericContainer::named_tuple&lt; Params &gt;::get_element_index</definition>
        <argsstring>() noexcept</argsstring>
        <name>get_element_index</name>
        <briefdescription>
<para>Get the index of the element given the hash. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>an error flag. </para>
</simplesect>
<simplesect kind="note"><para>In this function is returned means that the hash has not be found. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/GenericContainer/NamedTuple.h" line="270" column="16" bodyfile="BipedalLocomotion/GenericContainer/NamedTuple.h" bodystart="270" bodyend="273"/>
      </memberdef>
      <memberdef kind="function" id="structBipedalLocomotion_1_1GenericContainer_1_1named__tuple_1a4f9541d54e9f949a34e08ba7eb1ca77b" prot="private" static="yes" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>hash_type</type>
            <declname>Hash</declname>
            <defname>Hash</defname>
          </param>
          <param>
            <type>std::size_t</type>
            <declname>I</declname>
            <defname>I</defname>
            <defval>0</defval>
          </param>
        </templateparamlist>
        <type>constexpr static std::enable_if&lt;(I&lt; sizeof...(Params)), const std::size_t &gt;::type</type>
        <definition>constexpr static std::enable_if&lt;(I &lt; sizeof...(Params)), const std::size_t&gt;::type BipedalLocomotion::GenericContainer::named_tuple&lt; Params &gt;::get_element_index</definition>
        <argsstring>() noexcept</argsstring>
        <name>get_element_index</name>
        <briefdescription>
<para>Get the index of the element given the hash. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The index of the element associated to the given hash. </para>
</simplesect>
<simplesect kind="note"><para>This function is resolved at compile time. So if the hash is not found an error flag will be returned. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/GenericContainer/NamedTuple.h" line="283" column="16" bodyfile="BipedalLocomotion/GenericContainer/NamedTuple.h" bodystart="283" bodyend="291"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="structBipedalLocomotion_1_1GenericContainer_1_1named__tuple" kindref="compound">named_tuple</ref> is a class that inherits from tuple. </para>
    </briefdescription>
    <detaileddescription>
<para>Its main purpose is to make more readable and less error prone code that uses <computeroutput>std::tuple</computeroutput>. <programlisting filename=".cpp"><codeline><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">BipedalLocomotion::GenericContainer::literals;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>foo<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><ref refid="NamedTuple_8h_1ac322ee615f7d23018c47ef2b3290b2fa" kindref="member">BipedalLocomotion::GenericContainer::make_named_tuple</ref>(<ref refid="structBipedalLocomotion_1_1GenericContainer_1_1named__param" kindref="compound">BipedalLocomotion::GenericContainer::named_param&lt;&quot;name&quot;_h, std::string&gt;</ref>(),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structBipedalLocomotion_1_1GenericContainer_1_1named__param" kindref="compound">BipedalLocomotion::GenericContainer::named_param&lt;&quot;number&quot;_h, int&gt;</ref>());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>it<sp/>is<sp/>still<sp/>possible<sp/>to<sp/>access<sp/>the<sp/>elements<sp/>of<sp/>the<sp/>named_tuple<sp/>with<sp/>structured<sp/>binding</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>declaration</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>[a,<sp/>b]<sp/>=<sp/>foo;</highlight></codeline>
<codeline><highlight class="normal">b<sp/>=<sp/>150;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>moreover<sp/>you<sp/>can<sp/>call<sp/>std::get&lt;&gt;<sp/>as<sp/>usual</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>std::get&lt;1&gt;(foo);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Differently<sp/>from<sp/>a<sp/>normal<sp/>tuple<sp/>it<sp/>is<sp/>possible<sp/>to<sp/>access<sp/>to<sp/>the<sp/>element<sp/>via<sp/>the<sp/>hash<sp/>as</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>follows</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">foo.get_from_hash&lt;</highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">_h&gt;()<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Smith&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>temp_string<sp/>=<sp/>foo.get_from_hash&lt;</highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">_h&gt;();</highlight></codeline>
</programlisting> </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>BipedalLocomotion::GenericContainer::named_tuple&lt; Params &gt;</label>
        <link refid="structBipedalLocomotion_1_1GenericContainer_1_1named__tuple"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>std::tuple&lt; Params... &gt;</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>BipedalLocomotion::GenericContainer::named_tuple&lt; Params &gt;</label>
        <link refid="structBipedalLocomotion_1_1GenericContainer_1_1named__tuple"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>std::tuple&lt; Params... &gt;</label>
      </node>
    </collaborationgraph>
    <location file="BipedalLocomotion/GenericContainer/NamedTuple.h" line="90" column="12" bodyfile="BipedalLocomotion/GenericContainer/NamedTuple.h" bodystart="91" bodyend="294"/>
    <listofallmembers>
      <member refid="structBipedalLocomotion_1_1GenericContainer_1_1named__tuple_1a8c513521fb117d766b521c64c637fd93" prot="private" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::named_tuple</scope><name>copy_from_tuple</name></member>
      <member refid="structBipedalLocomotion_1_1GenericContainer_1_1named__tuple_1ae801887c1b19e6dd87ae0b4a832acb09" prot="private" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::named_tuple</scope><name>copy_from_tuple</name></member>
      <member refid="structBipedalLocomotion_1_1GenericContainer_1_1named__tuple_1a0d096e7d209a199be7b4db9c1643545c" prot="private" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::named_tuple</scope><name>copy_to_tuple</name></member>
      <member refid="structBipedalLocomotion_1_1GenericContainer_1_1named__tuple_1ac06ffb307e2dd77980ff6589c78d8cbc" prot="private" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::named_tuple</scope><name>copy_to_tuple</name></member>
      <member refid="structBipedalLocomotion_1_1GenericContainer_1_1named__tuple_1a695fe9ef7bf4ac9a9b3e80a822d2044a" prot="private" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::named_tuple</scope><name>error</name></member>
      <member refid="structBipedalLocomotion_1_1GenericContainer_1_1named__tuple_1a95a086685c1ad77b94464fb6d7f49ae5" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::named_tuple</scope><name>get</name></member>
      <member refid="structBipedalLocomotion_1_1GenericContainer_1_1named__tuple_1a0e6ab3315e814585124ff6bb1952ace5" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::named_tuple</scope><name>get</name></member>
      <member refid="structBipedalLocomotion_1_1GenericContainer_1_1named__tuple_1a8bb79073debf1e24d032bb031e301651" prot="private" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::named_tuple</scope><name>get_element_index</name></member>
      <member refid="structBipedalLocomotion_1_1GenericContainer_1_1named__tuple_1a4f9541d54e9f949a34e08ba7eb1ca77b" prot="private" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::named_tuple</scope><name>get_element_index</name></member>
      <member refid="structBipedalLocomotion_1_1GenericContainer_1_1named__tuple_1a915b403920de6dc9408df99dd0aff863" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::named_tuple</scope><name>get_from_hash</name></member>
      <member refid="structBipedalLocomotion_1_1GenericContainer_1_1named__tuple_1a5a4d6b22b3f493abfba148d977e04b25" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::named_tuple</scope><name>get_from_hash</name></member>
      <member refid="structBipedalLocomotion_1_1GenericContainer_1_1named__tuple_1ae0998b1c3455b0663ce8ba685a73fb8c" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::named_tuple</scope><name>named_tuple</name></member>
      <member refid="structBipedalLocomotion_1_1GenericContainer_1_1named__tuple_1aab715eb5e81fbe7a8eb30b74767e2c3b" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::named_tuple</scope><name>named_tuple</name></member>
      <member refid="structBipedalLocomotion_1_1GenericContainer_1_1named__tuple_1a639718fa237c24ba9865876e449f7202" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::named_tuple</scope><name>named_tuple</name></member>
      <member refid="structBipedalLocomotion_1_1GenericContainer_1_1named__tuple_1a64bba5aa718265896658eb2e0411c8b8" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::named_tuple</scope><name>named_tuple</name></member>
      <member refid="structBipedalLocomotion_1_1GenericContainer_1_1named__tuple_1a97abdf681a3aecdc7277984412910b21" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::named_tuple</scope><name>operator=</name></member>
      <member refid="structBipedalLocomotion_1_1GenericContainer_1_1named__tuple_1ac18226129c902c1daeea6f5dd59b8be4" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::named_tuple</scope><name>to_tuple</name></member>
      <member refid="structBipedalLocomotion_1_1GenericContainer_1_1named__tuple_1ae0678a6ed65835895dc29fc28b5ff9d0" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::named_tuple</scope><name>underlying_tuple</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
