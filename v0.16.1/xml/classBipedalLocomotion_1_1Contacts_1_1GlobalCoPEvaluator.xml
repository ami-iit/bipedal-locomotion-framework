<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classBipedalLocomotion_1_1Contacts_1_1GlobalCoPEvaluator" kind="class" language="C++" prot="public">
    <compoundname>BipedalLocomotion::Contacts::GlobalCoPEvaluator</compoundname>
    <basecompoundref refid="classBipedalLocomotion_1_1System_1_1Advanceable" prot="public" virt="non-virtual">BipedalLocomotion::System::Advanceable&lt; std::vector&lt; Contacts::ContactWrench &gt;, Eigen::Vector3d &gt;</basecompoundref>
    <includes local="no">BipedalLocomotion/Contacts/GlobalCoPEvaluator.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classBipedalLocomotion_1_1Contacts_1_1GlobalCoPEvaluator_1a94b564db201920799474c484fba5ff09" prot="private" static="no" mutable="no">
        <type>Eigen::Vector3d</type>
        <definition>Eigen::Vector3d BipedalLocomotion::Contacts::GlobalCoPEvaluator::m_cop</definition>
        <argsstring></argsstring>
        <name>m_cop</name>
        <initializer>{Eigen::Vector3d::Zero()}</initializer>
        <briefdescription>
<para>Global CoP position in the inertial frame. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Contacts/GlobalCoPEvaluator.h" line="117" column="21" bodyfile="BipedalLocomotion/Contacts/GlobalCoPEvaluator.h" bodystart="117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBipedalLocomotion_1_1Contacts_1_1GlobalCoPEvaluator_1af399b11c83124fc7faf6f12f11b7abea" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="structBipedalLocomotion_1_1Contacts_1_1ContactWrench" kindref="compound">Contacts::ContactWrench</ref> &gt;</type>
        <definition>std::vector&lt;Contacts::ContactWrench&gt; BipedalLocomotion::Contacts::GlobalCoPEvaluator::m_contacts</definition>
        <argsstring></argsstring>
        <name>m_contacts</name>
        <briefdescription>
<para>Vector containing the contacts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Contacts/GlobalCoPEvaluator.h" line="119" column="17" bodyfile="BipedalLocomotion/Contacts/GlobalCoPEvaluator.h" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBipedalLocomotion_1_1Contacts_1_1GlobalCoPEvaluator_1adbb9a9c97fa0d976b78e8435c2d48a22" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool BipedalLocomotion::Contacts::GlobalCoPEvaluator::m_isInitialized</definition>
        <argsstring></argsstring>
        <name>m_isInitialized</name>
        <initializer>{false}</initializer>
        <briefdescription>
<para>True if the object is initialized. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Contacts/GlobalCoPEvaluator.h" line="120" column="10" bodyfile="BipedalLocomotion/Contacts/GlobalCoPEvaluator.h" bodystart="120" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBipedalLocomotion_1_1Contacts_1_1GlobalCoPEvaluator_1ad73c2c214481ab9e3e0e26149f9b1464" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool BipedalLocomotion::Contacts::GlobalCoPEvaluator::m_isOutputValid</definition>
        <argsstring></argsstring>
        <name>m_isOutputValid</name>
        <initializer>{false}</initializer>
        <briefdescription>
<para>True if the output is valid. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Contacts/GlobalCoPEvaluator.h" line="121" column="10" bodyfile="BipedalLocomotion/Contacts/GlobalCoPEvaluator.h" bodystart="121" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBipedalLocomotion_1_1Contacts_1_1GlobalCoPEvaluator_1a3ce508a7abee40fff5e76f0159a0f611" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int BipedalLocomotion::Contacts::GlobalCoPEvaluator::m_constantCoPCounter</definition>
        <argsstring></argsstring>
        <name>m_constantCoPCounter</name>
        <initializer>{0}</initializer>
        <briefdescription>
<para>Counter used to store the number of constant CoP over time. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Contacts/GlobalCoPEvaluator.h" line="123" column="9" bodyfile="BipedalLocomotion/Contacts/GlobalCoPEvaluator.h" bodystart="123" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBipedalLocomotion_1_1Contacts_1_1GlobalCoPEvaluator_1a8c2b8c4c039b6c1374a35edbce2a1cb0" prot="private" static="no" mutable="no">
        <type>Eigen::Vector2d</type>
        <definition>Eigen::Vector2d BipedalLocomotion::Contacts::GlobalCoPEvaluator::m_CoPAdmissibleLimits</definition>
        <argsstring></argsstring>
        <name>m_CoPAdmissibleLimits</name>
        <briefdescription>
<para>Vector containing the local admissible limits for the CoP <linebreak/>
 </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Contacts/GlobalCoPEvaluator.h" line="125" column="21" bodyfile="BipedalLocomotion/Contacts/GlobalCoPEvaluator.h" bodystart="125" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBipedalLocomotion_1_1Contacts_1_1GlobalCoPEvaluator_1ab8274922d40000158c8d537aa656310e" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int BipedalLocomotion::Contacts::GlobalCoPEvaluator::m_constantCoPMaxCounter</definition>
        <argsstring></argsstring>
        <name>m_constantCoPMaxCounter</name>
        <initializer>{-1}</initializer>
        <briefdescription>
<para>Maximum number of samples after which a constant CoP generates an error <linebreak/>
 </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Contacts/GlobalCoPEvaluator.h" line="127" column="9" bodyfile="BipedalLocomotion/Contacts/GlobalCoPEvaluator.h" bodystart="127" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBipedalLocomotion_1_1Contacts_1_1GlobalCoPEvaluator_1ad07bff5693075a4c354c1f12e7184142" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double BipedalLocomotion::Contacts::GlobalCoPEvaluator::m_minimumNormalForce</definition>
        <argsstring></argsstring>
        <name>m_minimumNormalForce</name>
        <initializer>{0.0}</initializer>
        <briefdescription>
<para>Minimum required contact force. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Contacts/GlobalCoPEvaluator.h" line="129" column="12" bodyfile="BipedalLocomotion/Contacts/GlobalCoPEvaluator.h" bodystart="129" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBipedalLocomotion_1_1Contacts_1_1GlobalCoPEvaluator_1a4a78bf9ee8f30285b771451f4d979949" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double BipedalLocomotion::Contacts::GlobalCoPEvaluator::m_constantCoPTolerance</definition>
        <argsstring></argsstring>
        <name>m_constantCoPTolerance</name>
        <initializer>{0.0}</initializer>
        <briefdescription>
<para>Radius (in m) of a sphere used to considered if the global CoP is constant. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Contacts/GlobalCoPEvaluator.h" line="130" column="12" bodyfile="BipedalLocomotion/Contacts/GlobalCoPEvaluator.h" bodystart="130" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classBipedalLocomotion_1_1Contacts_1_1GlobalCoPEvaluator_1a32dc8780c5a1c961a592b539a677ff6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::Contacts::GlobalCoPEvaluator::initialize</definition>
        <argsstring>(std::weak_ptr&lt; const ParametersHandler::IParametersHandler &gt; handler) override</argsstring>
        <name>initialize</name>
        <reimplements refid="classBipedalLocomotion_1_1System_1_1Advanceable_1a6db247d3db83217a16e963d01f6bcb77">initialize</reimplements>
        <param>
          <type>std::weak_ptr&lt; const <ref refid="classBipedalLocomotion_1_1ParametersHandler_1_1IParametersHandler" kindref="compound">ParametersHandler::IParametersHandler</ref> &gt;</type>
          <declname>handler</declname>
        </param>
        <briefdescription>
<para>Initialize the class. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handler</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a parameter handler </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>the following parameters are required by the class <table rows="5" cols="4"><row>
<entry thead="yes" align='center'><para>Parameter Name   </para>
</entry><entry thead="yes" align='center'><para>Type   </para>
</entry><entry thead="yes" align='center'><para>Description   </para>
</entry><entry thead="yes" align='center'><para>Mandatory    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>minimum_normal_force</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>double</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>Minimum normal force required to consider a contact active (in N)   </para>
</entry><entry thead="no" align='center'><para>Yes    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>cop_admissible_limits</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>vector&lt;double&gt;</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>2D vector defining the admissible CoP region, comparing the local CoP x and y to the 1st and 2nd elements   </para>
</entry><entry thead="no" align='center'><para>Yes    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>constant_cop_tolerance</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>double</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>Radius (in m) of a sphere used to considered if the global CoP is constant   </para>
</entry><entry thead="no" align='center'><para>Yes    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>constant_cop_max_counter</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>int</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>Maximum number of samples after which a constant CoP generates an error. If negative the check is disabled.   </para>
</entry><entry thead="no" align='center'><para>Yes   </para>
</entry></row>
</table>
</para>
</simplesect>
<simplesect kind="return"><para>true in case of success, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Contacts/GlobalCoPEvaluator.h" line="76" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Contacts_1_1GlobalCoPEvaluator_1a346a6b5c8cb8599bf689dd9371806152" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::Contacts::GlobalCoPEvaluator::setInput</definition>
        <argsstring>(const std::initializer_list&lt; Contacts::ContactWrench &gt; &amp;input)</argsstring>
        <name>setInput</name>
        <param>
          <type>const std::initializer_list&lt; <ref refid="structBipedalLocomotion_1_1Contacts_1_1ContactWrench" kindref="compound">Contacts::ContactWrench</ref> &gt; &amp;</type>
          <declname>input</declname>
        </param>
        <briefdescription>
<para>Set the input to the class. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>list containing the contact wrench </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true in case of success and false otherwise </para>
</simplesect>
<simplesect kind="note"><para>This class assumes that the contact wrenches stored in <ref refid="structBipedalLocomotion_1_1Contacts_1_1ContactWrench" kindref="compound">Contacts::ContactWrench</ref> list are expressed in the body frame (left trivialized). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Contacts/GlobalCoPEvaluator.h" line="86" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Contacts_1_1GlobalCoPEvaluator_1a16e26308ee38e693dabdb6e82f92a86c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::Contacts::GlobalCoPEvaluator::setInput</definition>
        <argsstring>(const std::vector&lt; Contacts::ContactWrench &gt; &amp;input) override</argsstring>
        <name>setInput</name>
        <param>
          <type>const std::vector&lt; <ref refid="structBipedalLocomotion_1_1Contacts_1_1ContactWrench" kindref="compound">Contacts::ContactWrench</ref> &gt; &amp;</type>
          <declname>input</declname>
        </param>
        <briefdescription>
<para>Set the input to the class. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>list containing the contact wrench </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true in case of success and false otherwise </para>
</simplesect>
<simplesect kind="note"><para>This class assumes that the contact wrenches stored in <ref refid="structBipedalLocomotion_1_1Contacts_1_1ContactWrench" kindref="compound">Contacts::ContactWrench</ref> list are expressed in the body frame (left trivialized). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Contacts/GlobalCoPEvaluator.h" line="95" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Contacts_1_1GlobalCoPEvaluator_1adb8883c7fa5675374b0be90e43deabda" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::Contacts::GlobalCoPEvaluator::advance</definition>
        <argsstring>() override</argsstring>
        <name>advance</name>
        <reimplements refid="classBipedalLocomotion_1_1System_1_1Advanceable_1a67107e46e831d93f572558b541aab6d2">advance</reimplements>
        <briefdescription>
<para>Compute the global CoP. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true in case of success and false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Contacts/GlobalCoPEvaluator.h" line="101" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Contacts_1_1GlobalCoPEvaluator_1a9068c56c8edc37f99efc542e87be16cf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::Contacts::GlobalCoPEvaluator::isOutputValid</definition>
        <argsstring>() const override</argsstring>
        <name>isOutputValid</name>
        <reimplements refid="classBipedalLocomotion_1_1System_1_1OutputPort_1ac50de29a6160baa2bba195af9d69430a">isOutputValid</reimplements>
        <briefdescription>
<para>Check if the CoP evaluated by the class is valid. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if valid, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Contacts/GlobalCoPEvaluator.h" line="107" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Contacts_1_1GlobalCoPEvaluator_1ac15c3d40385d07b06f752b0e49c04ae5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>const Eigen::Vector3d &amp;</type>
        <definition>const Eigen::Vector3d&amp; BipedalLocomotion::Contacts::GlobalCoPEvaluator::getOutput</definition>
        <argsstring>() const override</argsstring>
        <name>getOutput</name>
        <reimplements refid="classBipedalLocomotion_1_1System_1_1OutputPort_1a8c089ecf2dd8ff0fb2732233994b6cac">getOutput</reimplements>
        <briefdescription>
<para>Get the global CoP. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a 3D vector containing the position of the global CoP expressed respect to the global (inertial) frame. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Contacts/GlobalCoPEvaluator.h" line="114" column="27"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="classBipedalLocomotion_1_1Contacts_1_1GlobalCoPEvaluator" kindref="compound">GlobalCoPEvaluator</ref> is a class that computes the global CoP given a set of contact wrenches. </para>
    </briefdescription>
    <detaileddescription>
<para>Following P. Sardain and G. Bessonnet, &quot;Forces acting on a biped robot. Center of
pressure-zero moment point,&quot; in IEEE Transactions on Systems, Man, and Cybernetics, we defined the global CoP as the weighted average of the CoP of each contact, with the weight determined by the normal force of the contact. In detail, given <formula id="32">$n$</formula> contacts, with <formula id="33">$n &gt; 0$</formula>, the global CoP is defined as <formula id="34">\[ {}^{I} x_{\text{CoP}}^{\text{global}} = \frac{1}{\sum_{i=1}^{n} f_{z,i}} \sum_{i=1}^{n} ({}^I f_{z,i} \; \; x_{\text{CoP},i}) \]</formula> where <formula id="35">${}^I x_{\text{CoP}}^{\text{global}}$</formula> is the global CoP expressed in the inertial frame <formula id="36">$I$</formula>, <formula id="37">${}^I f_{z,i}$</formula> is the z component of the contact force expressed in the inertial frame <formula id="36">$I$</formula>, <formula id="38">${}^I x_{\text{CoP},i}$</formula> is the CoP of the <formula id="39">$i$</formula>-th contact expressed in the inertial frame <formula id="36">$I$</formula>. The local CoP <formula id="38">${}^I x_{\text{CoP},i}$</formula> can be computed as follows <formula id="40">\[ {}^I x_{\text{CoP},i} = {}^I x_{\text{C},i} + {}^I R_{\text{C},i} \; {}^C x_{\text{CoP},i} \]</formula> where <formula id="41">${}^I x_{\text{C},i}$</formula> is the contact position in the inertial frame <formula id="36">$I$</formula>, <formula id="42">${}^I R_{\text{C},i}$</formula> is the rotation matrix from the inertial frame <formula id="36">$I$</formula> to the contact frame <formula id="43">$C$</formula>, and <formula id="44">${}^C x_{\text{CoP},i}$</formula> is the CoP of the <formula id="39">$i$</formula>-th contact expressed in the contact frame <formula id="43">$C$</formula> that can be computed as follows <formula id="45">\[ {}^C x_{\text{CoP},i} = \frac{1}{f_{z,i}} \begin{bmatrix} -\mu_{y,i} \\ \mu_{x,i} \\ 0 \end{bmatrix} \]</formula> with <formula id="46">$\mu_{x,i}$</formula> and <formula id="47">$\mu_{y,i}$</formula> being the x and y component of the moment of the contact wrench expressed in the contact frame <formula id="43">$C$</formula>. <simplesect kind="note"><para>This class assumes that the contact wrenches stored in <ref refid="structBipedalLocomotion_1_1Contacts_1_1ContactWrench" kindref="compound">Contacts::ContactWrench</ref> list are expressed in the body frame (left trivialized). </para>
</simplesect>
<simplesect kind="note"><para>This class assumes that all the contacts are coplanar, that the normal of the common plane is the z axis, and that the contact force on the z axis is positive. </para>
</simplesect>
<simplesect kind="note"><para>In addition to evaluating the CoP, this class checks that at least one contact is active and that the CoP is not constant for a given number of iterations. </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>BipedalLocomotion::System::InputPort&lt; _Input &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1InputPort"/>
      </node>
      <node id="2">
        <label>BipedalLocomotion::System::Advanceable&lt; std::vector&lt; Contacts::ContactWrench &gt;, Eigen::Vector3d &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Advanceable"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="template-instance">
          <edgelabel>&lt; std::vector&lt; Contacts::ContactWrench &gt;, Eigen::Vector3d &gt;</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>BipedalLocomotion::System::OutputPort&lt; _Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1OutputPort"/>
      </node>
      <node id="1">
        <label>BipedalLocomotion::Contacts::GlobalCoPEvaluator</label>
        <link refid="classBipedalLocomotion_1_1Contacts_1_1GlobalCoPEvaluator"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>BipedalLocomotion::System::Advanceable&lt; _Input, _Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Advanceable"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>BipedalLocomotion::System::InputPort&lt; _Input &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1InputPort"/>
      </node>
      <node id="2">
        <label>BipedalLocomotion::System::Advanceable&lt; std::vector&lt; Contacts::ContactWrench &gt;, Eigen::Vector3d &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Advanceable"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="template-instance">
          <edgelabel>&lt; std::vector&lt; Contacts::ContactWrench &gt;, Eigen::Vector3d &gt;</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>BipedalLocomotion::System::OutputPort&lt; _Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1OutputPort"/>
      </node>
      <node id="1">
        <label>BipedalLocomotion::Contacts::GlobalCoPEvaluator</label>
        <link refid="classBipedalLocomotion_1_1Contacts_1_1GlobalCoPEvaluator"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>BipedalLocomotion::System::Advanceable&lt; _Input, _Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Advanceable"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="BipedalLocomotion/Contacts/GlobalCoPEvaluator.h" line="58" column="1" bodyfile="BipedalLocomotion/Contacts/GlobalCoPEvaluator.h" bodystart="61" bodyend="132"/>
    <listofallmembers>
      <member refid="classBipedalLocomotion_1_1Contacts_1_1GlobalCoPEvaluator_1adb8883c7fa5675374b0be90e43deabda" prot="public" virt="virtual"><scope>BipedalLocomotion::Contacts::GlobalCoPEvaluator</scope><name>advance</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1a09ee5b41c77c6b626f4d5cb775065325" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Contacts::GlobalCoPEvaluator</scope><name>Advanceable</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1aaeb3eba3073fbc844dea1eba4c9b68f3" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Contacts::GlobalCoPEvaluator</scope><name>Advanceable</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1ac1549cb26bd896e27370e97b0795ba3f" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Contacts::GlobalCoPEvaluator</scope><name>Advanceable</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1a618ab786bb43814b3b3012b843fce93b" prot="public" virt="virtual"><scope>BipedalLocomotion::Contacts::GlobalCoPEvaluator</scope><name>close</name></member>
      <member refid="classBipedalLocomotion_1_1Contacts_1_1GlobalCoPEvaluator_1ac15c3d40385d07b06f752b0e49c04ae5" prot="public" virt="virtual"><scope>BipedalLocomotion::Contacts::GlobalCoPEvaluator</scope><name>getOutput</name></member>
      <member refid="classBipedalLocomotion_1_1Contacts_1_1GlobalCoPEvaluator_1a32dc8780c5a1c961a592b539a677ff6f" prot="public" virt="virtual"><scope>BipedalLocomotion::Contacts::GlobalCoPEvaluator</scope><name>initialize</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1a975a7ecbf38c917c7b72519581fc7dba" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Contacts::GlobalCoPEvaluator</scope><name>Input</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1InputPort_1a27c614cb30c1e4b78e64791f4919dfa7" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Contacts::GlobalCoPEvaluator</scope><name>InputPort</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1InputPort_1a74d1418613e89a7f2993ea936228a44a" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Contacts::GlobalCoPEvaluator</scope><name>InputPort</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1InputPort_1a02ec5c947f1d2d83d2952c3b899cc58f" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Contacts::GlobalCoPEvaluator</scope><name>InputPort</name></member>
      <member refid="classBipedalLocomotion_1_1Contacts_1_1GlobalCoPEvaluator_1a9068c56c8edc37f99efc542e87be16cf" prot="public" virt="virtual"><scope>BipedalLocomotion::Contacts::GlobalCoPEvaluator</scope><name>isOutputValid</name></member>
      <member refid="classBipedalLocomotion_1_1Contacts_1_1GlobalCoPEvaluator_1a3ce508a7abee40fff5e76f0159a0f611" prot="private" virt="non-virtual"><scope>BipedalLocomotion::Contacts::GlobalCoPEvaluator</scope><name>m_constantCoPCounter</name></member>
      <member refid="classBipedalLocomotion_1_1Contacts_1_1GlobalCoPEvaluator_1ab8274922d40000158c8d537aa656310e" prot="private" virt="non-virtual"><scope>BipedalLocomotion::Contacts::GlobalCoPEvaluator</scope><name>m_constantCoPMaxCounter</name></member>
      <member refid="classBipedalLocomotion_1_1Contacts_1_1GlobalCoPEvaluator_1a4a78bf9ee8f30285b771451f4d979949" prot="private" virt="non-virtual"><scope>BipedalLocomotion::Contacts::GlobalCoPEvaluator</scope><name>m_constantCoPTolerance</name></member>
      <member refid="classBipedalLocomotion_1_1Contacts_1_1GlobalCoPEvaluator_1af399b11c83124fc7faf6f12f11b7abea" prot="private" virt="non-virtual"><scope>BipedalLocomotion::Contacts::GlobalCoPEvaluator</scope><name>m_contacts</name></member>
      <member refid="classBipedalLocomotion_1_1Contacts_1_1GlobalCoPEvaluator_1a94b564db201920799474c484fba5ff09" prot="private" virt="non-virtual"><scope>BipedalLocomotion::Contacts::GlobalCoPEvaluator</scope><name>m_cop</name></member>
      <member refid="classBipedalLocomotion_1_1Contacts_1_1GlobalCoPEvaluator_1a8c2b8c4c039b6c1374a35edbce2a1cb0" prot="private" virt="non-virtual"><scope>BipedalLocomotion::Contacts::GlobalCoPEvaluator</scope><name>m_CoPAdmissibleLimits</name></member>
      <member refid="classBipedalLocomotion_1_1Contacts_1_1GlobalCoPEvaluator_1adbb9a9c97fa0d976b78e8435c2d48a22" prot="private" virt="non-virtual"><scope>BipedalLocomotion::Contacts::GlobalCoPEvaluator</scope><name>m_isInitialized</name></member>
      <member refid="classBipedalLocomotion_1_1Contacts_1_1GlobalCoPEvaluator_1ad73c2c214481ab9e3e0e26149f9b1464" prot="private" virt="non-virtual"><scope>BipedalLocomotion::Contacts::GlobalCoPEvaluator</scope><name>m_isOutputValid</name></member>
      <member refid="classBipedalLocomotion_1_1Contacts_1_1GlobalCoPEvaluator_1ad07bff5693075a4c354c1f12e7184142" prot="private" virt="non-virtual"><scope>BipedalLocomotion::Contacts::GlobalCoPEvaluator</scope><name>m_minimumNormalForce</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1ae147cdee9ff9160a9dfe0d3e349a9aad" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Contacts::GlobalCoPEvaluator</scope><name>operator=</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1adf0d9fc07bab0ec5d4db7f3a35816bf2" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Contacts::GlobalCoPEvaluator</scope><name>operator=</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1InputPort_1a54f476d3c8d6d003fb714309ea6272aa" prot="public" virt="non-virtual" ambiguityscope="BipedalLocomotion::System::InputPort::"><scope>BipedalLocomotion::Contacts::GlobalCoPEvaluator</scope><name>operator=</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1InputPort_1adb341b37472241b6da8b552166308d7b" prot="public" virt="non-virtual" ambiguityscope="BipedalLocomotion::System::InputPort::"><scope>BipedalLocomotion::Contacts::GlobalCoPEvaluator</scope><name>operator=</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1OutputPort_1af5e15f5e4962a5c8e0f0c0a49adb9ca1" prot="public" virt="non-virtual" ambiguityscope="BipedalLocomotion::System::OutputPort::"><scope>BipedalLocomotion::Contacts::GlobalCoPEvaluator</scope><name>operator=</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1OutputPort_1ad5c6ce3ad7d2a064d7bb512fe0bc489e" prot="public" virt="non-virtual" ambiguityscope="BipedalLocomotion::System::OutputPort::"><scope>BipedalLocomotion::Contacts::GlobalCoPEvaluator</scope><name>operator=</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1a69603f2c9c608815908425b5b8c2005c" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Contacts::GlobalCoPEvaluator</scope><name>Output</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1OutputPort_1a7c0d15e677a1935918fc747ba4c25ec1" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Contacts::GlobalCoPEvaluator</scope><name>OutputPort</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1OutputPort_1a0a39b891749961d34507b4b591886741" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Contacts::GlobalCoPEvaluator</scope><name>OutputPort</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1OutputPort_1a581340f280eca1890a8a7b2331761b57" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Contacts::GlobalCoPEvaluator</scope><name>OutputPort</name></member>
      <member refid="classBipedalLocomotion_1_1Contacts_1_1GlobalCoPEvaluator_1a346a6b5c8cb8599bf689dd9371806152" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Contacts::GlobalCoPEvaluator</scope><name>setInput</name></member>
      <member refid="classBipedalLocomotion_1_1Contacts_1_1GlobalCoPEvaluator_1a16e26308ee38e693dabdb6e82f92a86c" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Contacts::GlobalCoPEvaluator</scope><name>setInput</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1InputPort_1ad2637be5c9075a2d8f09fedc6a42d808" prot="public" virt="pure-virtual" ambiguityscope="Advanceable&lt; std::vector&lt; Contacts::ContactWrench &gt;, Eigen::Vector3d &gt;::"><scope>BipedalLocomotion::Contacts::GlobalCoPEvaluator</scope><name>setInput</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1afae1137cba829874bab4a1d25d559896" prot="public" virt="virtual"><scope>BipedalLocomotion::Contacts::GlobalCoPEvaluator</scope><name>~Advanceable</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1InputPort_1ac9b58b0d2f6ae8821b873ed6f9817ccb" prot="public" virt="virtual"><scope>BipedalLocomotion::Contacts::GlobalCoPEvaluator</scope><name>~InputPort</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1OutputPort_1adcc49c38152c9204dcab4f8e87f68977" prot="public" virt="virtual"><scope>BipedalLocomotion::Contacts::GlobalCoPEvaluator</scope><name>~OutputPort</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
