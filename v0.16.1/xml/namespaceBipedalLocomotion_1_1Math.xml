<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="namespaceBipedalLocomotion_1_1Math" kind="namespace" language="C++">
    <compoundname>BipedalLocomotion::Math</compoundname>
    <innerclass refid="classBipedalLocomotion_1_1Math_1_1CARE" prot="public">BipedalLocomotion::Math::CARE</innerclass>
    <innerclass refid="classBipedalLocomotion_1_1Math_1_1ContactWrenchCone" prot="public">BipedalLocomotion::Math::ContactWrenchCone</innerclass>
    <innerclass refid="classBipedalLocomotion_1_1Math_1_1LinearizedFrictionCone" prot="public">BipedalLocomotion::Math::LinearizedFrictionCone</innerclass>
    <innerclass refid="classBipedalLocomotion_1_1Math_1_1QuadraticBezierCurve" prot="public">BipedalLocomotion::Math::QuadraticBezierCurve</innerclass>
    <innerclass refid="structBipedalLocomotion_1_1Math_1_1SchmittTriggerOutput" prot="public">BipedalLocomotion::Math::SchmittTriggerOutput</innerclass>
    <innerclass refid="structBipedalLocomotion_1_1Math_1_1SchmittTriggerInput" prot="public">BipedalLocomotion::Math::SchmittTriggerInput</innerclass>
    <innerclass refid="structBipedalLocomotion_1_1Math_1_1SchmittTriggerState" prot="public">BipedalLocomotion::Math::SchmittTriggerState</innerclass>
    <innerclass refid="classBipedalLocomotion_1_1Math_1_1SchmittTrigger" prot="public">BipedalLocomotion::Math::SchmittTrigger</innerclass>
    <innerclass refid="classBipedalLocomotion_1_1Math_1_1Wrench" prot="public">BipedalLocomotion::Math::Wrench</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="Wrench_8h_1a45559f66740448bbc8253a9816dbef05" prot="public" static="no">
        <type><ref refid="classBipedalLocomotion_1_1Math_1_1Wrench" kindref="compound">Wrench</ref>&lt; double &gt;</type>
        <definition>using BipedalLocomotion::Math::Wrenchd = typedef Wrench&lt;double&gt;</definition>
        <argsstring></argsstring>
        <name>Wrenchd</name>
        <briefdescription>
<para>A wrench of double. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Math/Wrench.h" line="194" column="1" bodyfile="BipedalLocomotion/Math/Wrench.h" bodystart="194" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="Constants_8h_1a8dc72d6e2ec8af58271cf20db8ec00b3" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr double</type>
        <definition>constexpr double BipedalLocomotion::Math::StandardAccelerationOfGravitation</definition>
        <argsstring></argsstring>
        <name>StandardAccelerationOfGravitation</name>
        <initializer>= 9.80665</initializer>
        <briefdescription>
<para>The standard acceleration due to gravity (or standard acceleration of free fall), sometimes abbreviated as standard gravity, is the nominal gravitational acceleration of an object in a vacuum near the surface of the Earth. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Math/Constants.h" line="20" column="18" bodyfile="BipedalLocomotion/Math/Constants.h" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="Constants_8h_1ae61a7ae0cd848f41a7f2d9dfa1e84000" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr double</type>
        <definition>constexpr double BipedalLocomotion::Math::AbsoluteEqualityDoubleTolerance</definition>
        <argsstring></argsstring>
        <name>AbsoluteEqualityDoubleTolerance</name>
        <initializer>= 1e-8</initializer>
        <briefdescription>
<para>The Absolute tolerance used to consider two double equal. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Math/Constants.h" line="25" column="18" bodyfile="BipedalLocomotion/Math/Constants.h" bodystart="25" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="Wrench_8h_1ab4a25ba86637fb8d91b30827c776d934" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Scalar</type>
          </param>
        </templateparamlist>
        <type><ref refid="classBipedalLocomotion_1_1Math_1_1Wrench" kindref="compound">Wrench</ref>&lt; Scalar &gt;</type>
        <definition>Wrench&lt;Scalar&gt; BipedalLocomotion::Math::operator*</definition>
        <argsstring>(const manif::SE3&lt; Scalar &gt; &amp;transform, const Wrench&lt; Scalar &gt; &amp;wrench)</argsstring>
        <name>operator*</name>
        <param>
          <type>const manif::SE3&lt; Scalar &gt; &amp;</type>
          <declname>transform</declname>
        </param>
        <param>
          <type>const <ref refid="classBipedalLocomotion_1_1Math_1_1Wrench" kindref="compound">Wrench</ref>&lt; Scalar &gt; &amp;</type>
          <declname>wrench</declname>
        </param>
        <briefdescription>
<para>Change the frame in which the <ref refid="classBipedalLocomotion_1_1Math_1_1Wrench" kindref="compound">Wrench</ref> is expressed. </para>
        </briefdescription>
        <detaileddescription>
<para>If the tranform is <formula id="61">$H$</formula> is <formula id="62">\[ (p,R) = ( {}^{\texttt{refOrient}} p_{\texttt{refPoint},\texttt{point}} , {}^{\texttt{refOrient}} R_{\texttt{orient}} ) \]</formula></para>
<para>And the wrench is: <formula id="63">\[ {}_{\texttt{frame}} F = \begin{bmatrix} f \\ \tau \end{bmatrix} \]</formula></para>
<para>The result of this operation is : <formula id="64">\[ {}_{\texttt{refFrame}} F = {}_{\texttt{refFrame}}X^{\texttt{frame}} {}_{\texttt{frame}} F = \begin{bmatrix} R &amp; 0_{3\times3} \\ p \times R &amp; R \end{bmatrix} \begin{bmatrix} f \\ \tau \end{bmatrix} = \begin{bmatrix} Rf \\ p \times R f + R\tau \end{bmatrix} \]</formula> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>transform</parametername>
</parameternamelist>
<parameterdescription>
<para>a manif::SE3 object representing a homogeneous transformation that changes the coordinates of a vector expressed in the frame A into the coordinates in the frame B </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wrench</parametername>
</parameternamelist>
<parameterdescription>
<para>expressed in the frame A </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the vector expressed in the frame B </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Math/Wrench.h" line="135" column="8" bodyfile="BipedalLocomotion/Math/Wrench.h" bodystart="135" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="Wrench_8h_1ad07cd1eb9f2b00e87f9c8c5ddeaeecfe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Scalar</type>
          </param>
        </templateparamlist>
        <type><ref refid="classBipedalLocomotion_1_1Math_1_1Wrench" kindref="compound">Wrench</ref>&lt; Scalar &gt;</type>
        <definition>Wrench&lt;Scalar&gt; BipedalLocomotion::Math::operator*</definition>
        <argsstring>(const manif::SO3&lt; Scalar &gt; &amp;rotation, const Wrench&lt; Scalar &gt; &amp;wrench)</argsstring>
        <name>operator*</name>
        <param>
          <type>const manif::SO3&lt; Scalar &gt; &amp;</type>
          <declname>rotation</declname>
        </param>
        <param>
          <type>const <ref refid="classBipedalLocomotion_1_1Math_1_1Wrench" kindref="compound">Wrench</ref>&lt; Scalar &gt; &amp;</type>
          <declname>wrench</declname>
        </param>
        <briefdescription>
<para>Change the frame in which the <ref refid="classBipedalLocomotion_1_1Math_1_1Wrench" kindref="compound">Wrench</ref> is expressed. </para>
        </briefdescription>
        <detaileddescription>
<para>If the tranform is <formula id="61">$H$</formula> is <formula id="65">\[ (p,R) = ( O _ {3 \times 1} , {}^{\texttt{refOrient}} R_{\texttt{orient}} ) \]</formula></para>
<para>And the wrench is: <formula id="63">\[ {}_{\texttt{frame}} F = \begin{bmatrix} f \\ \tau \end{bmatrix} \]</formula></para>
<para>The result of this operation is : <formula id="66">\[ {}_{\texttt{refFrame}} F = {}_{\texttt{refFrame}}X^{\texttt{frame}} {}_{\texttt{frame}} F = \begin{bmatrix} R &amp; 0_{3\times3} \\ 0_{3\times3} &amp; R \end{bmatrix} \begin{bmatrix} f \\ \tau \end{bmatrix} = \begin{bmatrix} Rf \\ R\tau \end{bmatrix} \]</formula> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rotation</parametername>
</parameternamelist>
<parameterdescription>
<para>a manif::SO3 object representing a rotation that changes the coordinates of a vector expressed in the frame A into the coordinates in the frame B </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wrench</parametername>
</parameternamelist>
<parameterdescription>
<para>expressed in the frame A </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the vector expressed in the frame B </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Math/Wrench.h" line="183" column="8" bodyfile="BipedalLocomotion/Math/Wrench.h" bodystart="183" bodyend="189"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="BipedalLocomotion/Math/CARE.h" line="19" column="1"/>
  </compounddef>
</doxygen>
