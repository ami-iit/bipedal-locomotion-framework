<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classBipedalLocomotion_1_1Perception_1_1Capture_1_1RealSense" kind="class" language="C++" prot="public">
    <compoundname>BipedalLocomotion::Perception::Capture::RealSense</compoundname>
    <basecompoundref refid="classBipedalLocomotion_1_1RobotInterface_1_1ICameraBridge" prot="public" virt="non-virtual">BipedalLocomotion::RobotInterface::ICameraBridge</basecompoundref>
    <basecompoundref refid="classBipedalLocomotion_1_1RobotInterface_1_1IPointCloudBridge" prot="public" virt="non-virtual">BipedalLocomotion::RobotInterface::IPointCloudBridge</basecompoundref>
    <includes local="no">BipedalLocomotion/Perception/Capture/RealSense.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classBipedalLocomotion_1_1Perception_1_1Capture_1_1RealSense_1a3f194396f0831ef9592e5e511769187a" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; Impl &gt;</type>
        <definition>std::unique_ptr&lt;Impl&gt; BipedalLocomotion::Perception::Capture::RealSense::m_pimpl</definition>
        <argsstring></argsstring>
        <name>m_pimpl</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Perception/Capture/RealSense.h" line="92" column="21" bodyfile="BipedalLocomotion/Perception/Capture/RealSense.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classBipedalLocomotion_1_1Perception_1_1Capture_1_1RealSense_1a0b17adbe7b3840f0f30f8ebba491f961" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BipedalLocomotion::Perception::Capture::RealSense::RealSense</definition>
        <argsstring>()</argsstring>
        <name>RealSense</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Perception/Capture/RealSense.h" line="41" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Perception_1_1Capture_1_1RealSense_1a7bf48c316a6b1e29781b40f38c1930f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BipedalLocomotion::Perception::Capture::RealSense::~RealSense</definition>
        <argsstring>()</argsstring>
        <name>~RealSense</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Perception/Capture/RealSense.h" line="43" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Perception_1_1Capture_1_1RealSense_1ab62c959a67d07050e32e4268de97855e" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::Perception::Capture::RealSense::initialize</definition>
        <argsstring>(std::weak_ptr&lt; const BipedalLocomotion::ParametersHandler::IParametersHandler &gt; handler) final</argsstring>
        <name>initialize</name>
        <reimplements refid="classBipedalLocomotion_1_1RobotInterface_1_1ICameraBridge_1abb42ab89afe8f0eb1f0cc3120f5bc4b3">initialize</reimplements>
        <param>
          <type>std::weak_ptr&lt; const <ref refid="classBipedalLocomotion_1_1ParametersHandler_1_1IParametersHandler" kindref="compound">BipedalLocomotion::ParametersHandler::IParametersHandler</ref> &gt;</type>
          <declname>handler</declname>
        </param>
        <briefdescription>
<para>Initialize estimator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handler</parametername>
</parameternamelist>
<parameterdescription>
<para>Parameters handler </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Perception/Capture/RealSense.h" line="45" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Perception_1_1Capture_1_1RealSense_1a799b8b65d9cd38bcdd02566b2ab4dc92" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::Perception::Capture::RealSense::isValid</definition>
        <argsstring>() const final</argsstring>
        <name>isValid</name>
        <reimplements refid="classBipedalLocomotion_1_1RobotInterface_1_1ICameraBridge_1ad029283df1539db6fae56c9b0ea50ad2">isValid</reimplements>
        <briefdescription>
<para>Determines the validity of the object retrieved with getMetadata() </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if the object is valid, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Perception/Capture/RealSense.h" line="52" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Perception_1_1Capture_1_1RealSense_1af1ca4cd8209134751b367bc50e8c0188" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::Perception::Capture::RealSense::getRGBCamerasList</definition>
        <argsstring>(std::vector&lt; std::string &gt; &amp;rgbCamerasList) final</argsstring>
        <name>getRGBCamerasList</name>
        <reimplements refid="classBipedalLocomotion_1_1RobotInterface_1_1ICameraBridge_1a18d604a503f9ba409aa1351de5fc7f1f">getRGBCamerasList</reimplements>
        <param>
          <type>std::vector&lt; std::string &gt; &amp;</type>
          <declname>rgbCamerasList</declname>
        </param>
        <briefdescription>
<para>Get rgb cameras. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">rgbCamerasList</parametername>
</parameternamelist>
<parameterdescription>
<para>list of rgb cameras attached to the bridge </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true/false in case of success/failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Perception/Capture/RealSense.h" line="54" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Perception_1_1Capture_1_1RealSense_1aa74ffa2259745453e3967698ba57b1ad" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::Perception::Capture::RealSense::getRGBDCamerasList</definition>
        <argsstring>(std::vector&lt; std::string &gt; &amp;rgbdCamerasList) final</argsstring>
        <name>getRGBDCamerasList</name>
        <reimplements refid="classBipedalLocomotion_1_1RobotInterface_1_1ICameraBridge_1a4157fc5df74981423dc29fe3afb27558">getRGBDCamerasList</reimplements>
        <param>
          <type>std::vector&lt; std::string &gt; &amp;</type>
          <declname>rgbdCamerasList</declname>
        </param>
        <briefdescription>
<para>Get RGBD cameras. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">rgbdCamerasList</parametername>
</parameternamelist>
<parameterdescription>
<para>list of rgbd cameras attached to the bridge </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true/false in case of success/failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Perception/Capture/RealSense.h" line="56" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Perception_1_1Capture_1_1RealSense_1a1f97c5afeb17b3f7da3a99a85fc44baf" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::Perception::Capture::RealSense::getPCLDevicesList</definition>
        <argsstring>(std::vector&lt; std::string &gt; &amp;pclDevList) final</argsstring>
        <name>getPCLDevicesList</name>
        <reimplements refid="classBipedalLocomotion_1_1RobotInterface_1_1IPointCloudBridge_1a61669ce43eea213a43405678721baadf">getPCLDevicesList</reimplements>
        <param>
          <type>std::vector&lt; std::string &gt; &amp;</type>
          <declname>pclDevList</declname>
        </param>
        <briefdescription>
<para>Get RGBD cameras. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">rgbdCamerasList</parametername>
</parameternamelist>
<parameterdescription>
<para>list of rgbd cameras attached to the bridge </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true/false in case of success/failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Perception/Capture/RealSense.h" line="58" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Perception_1_1Capture_1_1RealSense_1a1a499f3c2393f12d95706544db1fe735" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::Perception::Capture::RealSense::getColorImage</definition>
        <argsstring>(const std::string &amp;camName, cv::Mat &amp;colorImg, std::optional&lt; std::reference_wrapper&lt; double &gt;&gt; receiveTimeInSeconds={}) final</argsstring>
        <name>getColorImage</name>
        <reimplements refid="classBipedalLocomotion_1_1RobotInterface_1_1ICameraBridge_1a06408daf35fede203127d24e05a219a9">getColorImage</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>camName</declname>
        </param>
        <param>
          <type>cv::Mat &amp;</type>
          <declname>colorImg</declname>
        </param>
        <param>
          <type>std::optional&lt; std::reference_wrapper&lt; double &gt;&gt;</type>
          <declname>receiveTimeInSeconds</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Get color image from the camera. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">camName</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the camera </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">colorImg</parametername>
</parameternamelist>
<parameterdescription>
<para>image as cv Mat object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">receiveTimeInSeconds</parametername>
</parameternamelist>
<parameterdescription>
<para>time at which the measurement was received</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>the size is decided at the configuration and remains fixed, and internal checks must be done at the implementation level by the Derived class. This means that the user must pass a resized argument &quot;colorImg&quot; to this method</para>
</simplesect>
<simplesect kind="return"><para>true/false in case of success/failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Perception/Capture/RealSense.h" line="61" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Perception_1_1Capture_1_1RealSense_1a5a0ac5b5c10b4960f63448b9c4d51e95" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::Perception::Capture::RealSense::getDepthImage</definition>
        <argsstring>(const std::string &amp;camName, cv::Mat &amp;depthImg, std::optional&lt; std::reference_wrapper&lt; double &gt;&gt; receiveTimeInSeconds={}) final</argsstring>
        <name>getDepthImage</name>
        <reimplements refid="classBipedalLocomotion_1_1RobotInterface_1_1ICameraBridge_1ad267af952a3bd668f0b2bf83e72b9396">getDepthImage</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>camName</declname>
        </param>
        <param>
          <type>cv::Mat &amp;</type>
          <declname>depthImg</declname>
        </param>
        <param>
          <type>std::optional&lt; std::reference_wrapper&lt; double &gt;&gt;</type>
          <declname>receiveTimeInSeconds</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Get depth image. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">camName</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the camera </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">depthImg</parametername>
</parameternamelist>
<parameterdescription>
<para>depth image as a cv Mat object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">receiveTimeInSeconds</parametername>
</parameternamelist>
<parameterdescription>
<para>time at which the measurement was received</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>the size is decided at the configuration and remains fixed, and internal checks must be done at the implementation level by the Derived class. This means that the user must pass a resized argument &quot;depthImg&quot; to this method</para>
</simplesect>
<simplesect kind="return"><para>true/false in case of success/failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Perception/Capture/RealSense.h" line="66" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Perception_1_1Capture_1_1RealSense_1ac71fa2e23352736c009de41d7c3ddf06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::Perception::Capture::RealSense::getColorizedDepthImage</definition>
        <argsstring>(const std::string &amp;camName, cv::Mat &amp;depthImg, std::optional&lt; std::reference_wrapper&lt; double &gt;&gt; receiveTimeInSeconds={})</argsstring>
        <name>getColorizedDepthImage</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>camName</declname>
        </param>
        <param>
          <type>cv::Mat &amp;</type>
          <declname>depthImg</declname>
        </param>
        <param>
          <type>std::optional&lt; std::reference_wrapper&lt; double &gt;&gt;</type>
          <declname>receiveTimeInSeconds</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Perception/Capture/RealSense.h" line="71" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Perception_1_1Capture_1_1RealSense_1a3ad2630b863bfe3b8e84051c624eb844" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::Perception::Capture::RealSense::getInfraredImage</definition>
        <argsstring>(const std::string &amp;camName, cv::Mat &amp;irImage, std::optional&lt; std::reference_wrapper&lt; double &gt;&gt; receiveTimeInSeconds={})</argsstring>
        <name>getInfraredImage</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>camName</declname>
        </param>
        <param>
          <type>cv::Mat &amp;</type>
          <declname>irImage</declname>
        </param>
        <param>
          <type>std::optional&lt; std::reference_wrapper&lt; double &gt;&gt;</type>
          <declname>receiveTimeInSeconds</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Perception/Capture/RealSense.h" line="75" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Perception_1_1Capture_1_1RealSense_1a8848e401a6d46ee456f6b55e9bc7740c" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::Perception::Capture::RealSense::getPointCloud</definition>
        <argsstring>(const std::string &amp;pclDevName, pcl::PointCloud&lt; pcl::PointXYZRGB &gt;::Ptr coloredPointCloud, std::optional&lt; std::reference_wrapper&lt; double &gt;&gt; receiveTimeInSeconds={}) final</argsstring>
        <name>getPointCloud</name>
        <reimplements refid="classBipedalLocomotion_1_1RobotInterface_1_1IPointCloudBridge_1a2ce35da8b3671cb9a6d1a51c8a9ce4f7">getPointCloud</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>pclDevName</declname>
        </param>
        <param>
          <type>pcl::PointCloud&lt; pcl::PointXYZRGB &gt;::Ptr</type>
          <declname>coloredPointCloud</declname>
        </param>
        <param>
          <type>std::optional&lt; std::reference_wrapper&lt; double &gt;&gt;</type>
          <declname>receiveTimeInSeconds</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Perception/Capture/RealSense.h" line="80" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Perception_1_1Capture_1_1RealSense_1a4f5b5a2361719920b803c936326a5092" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>const <ref refid="structBipedalLocomotion_1_1RobotInterface_1_1CameraBridgeMetaData" kindref="compound">BipedalLocomotion::RobotInterface::CameraBridgeMetaData</ref> &amp;</type>
        <definition>const BipedalLocomotion::RobotInterface::CameraBridgeMetaData&amp; BipedalLocomotion::Perception::Capture::RealSense::getMetaData</definition>
        <argsstring>() const final</argsstring>
        <name>getMetaData</name>
        <reimplements refid="classBipedalLocomotion_1_1RobotInterface_1_1ICameraBridge_1a9e9e6eb606d25b2fff1d5c77c348aafa">getMetaData</reimplements>
        <briefdescription>
<para>Get the stored metadata. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a const reference to the metadata </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Perception/Capture/RealSense.h" line="88" column="67"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Realsense driver class. </para>
    </briefdescription>
    <detaileddescription>
<para>The following parameters are required to initialize the class</para>
<para><table rows="10" cols="5"><row>
<entry thead="yes" align='center'><para>Parameter Name   </para>
</entry><entry thead="yes" align='center'><para>Type   </para>
</entry><entry thead="yes" align='center'><para>Description   </para>
</entry><entry thead="yes" align='center'><para>Mandatory   </para>
</entry><entry thead="yes" align='center'><para>Default Value    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>camera_name</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>string</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>name of the camera device   </para>
</entry><entry thead="no" align='center'><para>No   </para>
</entry><entry thead="no" align='center'><para><ref refid="classBipedalLocomotion_1_1Perception_1_1Capture_1_1RealSense" kindref="compound">RealSense</ref>    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>frame_width</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>size_t</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>image frame width   </para>
</entry><entry thead="no" align='center'><para>No   </para>
</entry><entry thead="no" align='center'><para>640    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>frame_height</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>size_t</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>image frame height   </para>
</entry><entry thead="no" align='center'><para>No   </para>
</entry><entry thead="no" align='center'><para>480    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>fps</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>boolean</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>frames per second   </para>
</entry><entry thead="no" align='center'><para>No   </para>
</entry><entry thead="no" align='center'><para>30    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>stream_color</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>boolean</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>flag to enable streaming BGR images   </para>
</entry><entry thead="no" align='center'><para>No   </para>
</entry><entry thead="no" align='center'><para>false    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>stream_depth</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>boolean</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>flag to enable streaming depth images   </para>
</entry><entry thead="no" align='center'><para>No   </para>
</entry><entry thead="no" align='center'><para>false    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>stream_ir</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>boolean</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>flag to enable streaming IR images   </para>
</entry><entry thead="no" align='center'><para>No   </para>
</entry><entry thead="no" align='center'><para>false    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>stream_pcl</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>boolean</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>flag to enable streaming pointcloud   </para>
</entry><entry thead="no" align='center'><para>No   </para>
</entry><entry thead="no" align='center'><para>false    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>align_frames_to_color</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>boolean</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>flag to align other images to BGR images   </para>
</entry><entry thead="no" align='center'><para>No   </para>
</entry><entry thead="no" align='center'><para>false   </para>
</entry></row>
</table>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>BipedalLocomotion::Perception::Capture::RealSense</label>
        <link refid="classBipedalLocomotion_1_1Perception_1_1Capture_1_1RealSense"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>BipedalLocomotion::RobotInterface::IPointCloudBridge</label>
        <link refid="classBipedalLocomotion_1_1RobotInterface_1_1IPointCloudBridge"/>
      </node>
      <node id="2">
        <label>BipedalLocomotion::RobotInterface::ICameraBridge</label>
        <link refid="classBipedalLocomotion_1_1RobotInterface_1_1ICameraBridge"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>BipedalLocomotion::Perception::Capture::RealSense</label>
        <link refid="classBipedalLocomotion_1_1Perception_1_1Capture_1_1RealSense"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>BipedalLocomotion::RobotInterface::IPointCloudBridge</label>
        <link refid="classBipedalLocomotion_1_1RobotInterface_1_1IPointCloudBridge"/>
      </node>
      <node id="2">
        <label>BipedalLocomotion::RobotInterface::ICameraBridge</label>
        <link refid="classBipedalLocomotion_1_1RobotInterface_1_1ICameraBridge"/>
      </node>
    </collaborationgraph>
    <location file="BipedalLocomotion/Perception/Capture/RealSense.h" line="37" column="1" bodyfile="BipedalLocomotion/Perception/Capture/RealSense.h" bodystart="39" bodyend="93"/>
    <listofallmembers>
      <member refid="classBipedalLocomotion_1_1Perception_1_1Capture_1_1RealSense_1a1a499f3c2393f12d95706544db1fe735" prot="public" virt="virtual"><scope>BipedalLocomotion::Perception::Capture::RealSense</scope><name>getColorImage</name></member>
      <member refid="classBipedalLocomotion_1_1Perception_1_1Capture_1_1RealSense_1ac71fa2e23352736c009de41d7c3ddf06" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Perception::Capture::RealSense</scope><name>getColorizedDepthImage</name></member>
      <member refid="classBipedalLocomotion_1_1Perception_1_1Capture_1_1RealSense_1a5a0ac5b5c10b4960f63448b9c4d51e95" prot="public" virt="virtual"><scope>BipedalLocomotion::Perception::Capture::RealSense</scope><name>getDepthImage</name></member>
      <member refid="classBipedalLocomotion_1_1Perception_1_1Capture_1_1RealSense_1a3ad2630b863bfe3b8e84051c624eb844" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Perception::Capture::RealSense</scope><name>getInfraredImage</name></member>
      <member refid="classBipedalLocomotion_1_1Perception_1_1Capture_1_1RealSense_1a4f5b5a2361719920b803c936326a5092" prot="public" virt="virtual"><scope>BipedalLocomotion::Perception::Capture::RealSense</scope><name>getMetaData</name></member>
      <member refid="classBipedalLocomotion_1_1Perception_1_1Capture_1_1RealSense_1a1f97c5afeb17b3f7da3a99a85fc44baf" prot="public" virt="virtual"><scope>BipedalLocomotion::Perception::Capture::RealSense</scope><name>getPCLDevicesList</name></member>
      <member refid="classBipedalLocomotion_1_1Perception_1_1Capture_1_1RealSense_1a8848e401a6d46ee456f6b55e9bc7740c" prot="public" virt="virtual"><scope>BipedalLocomotion::Perception::Capture::RealSense</scope><name>getPointCloud</name></member>
      <member refid="classBipedalLocomotion_1_1Perception_1_1Capture_1_1RealSense_1af1ca4cd8209134751b367bc50e8c0188" prot="public" virt="virtual"><scope>BipedalLocomotion::Perception::Capture::RealSense</scope><name>getRGBCamerasList</name></member>
      <member refid="classBipedalLocomotion_1_1Perception_1_1Capture_1_1RealSense_1aa74ffa2259745453e3967698ba57b1ad" prot="public" virt="virtual"><scope>BipedalLocomotion::Perception::Capture::RealSense</scope><name>getRGBDCamerasList</name></member>
      <member refid="classBipedalLocomotion_1_1Perception_1_1Capture_1_1RealSense_1ab62c959a67d07050e32e4268de97855e" prot="public" virt="virtual"><scope>BipedalLocomotion::Perception::Capture::RealSense</scope><name>initialize</name></member>
      <member refid="classBipedalLocomotion_1_1Perception_1_1Capture_1_1RealSense_1a799b8b65d9cd38bcdd02566b2ab4dc92" prot="public" virt="virtual"><scope>BipedalLocomotion::Perception::Capture::RealSense</scope><name>isValid</name></member>
      <member refid="classBipedalLocomotion_1_1Perception_1_1Capture_1_1RealSense_1a3f194396f0831ef9592e5e511769187a" prot="private" virt="non-virtual"><scope>BipedalLocomotion::Perception::Capture::RealSense</scope><name>m_pimpl</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1ICameraBridge_1a79f70ac178d2c60151483e84c000c5cb" prot="protected" virt="virtual"><scope>BipedalLocomotion::Perception::Capture::RealSense</scope><name>populateCameraBridgeMetaDataFromConfig</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1ICameraBridge_1ab3512211fe40a0ef2bad6c8354dd581d" prot="protected" virt="virtual"><scope>BipedalLocomotion::Perception::Capture::RealSense</scope><name>populateCameraBridgeOptionsFromConfig</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1ICameraBridge_1a558cc51658fe940823573793e0aea396" prot="protected" virt="virtual"><scope>BipedalLocomotion::Perception::Capture::RealSense</scope><name>populateCameraListsFromConfig</name></member>
      <member refid="classBipedalLocomotion_1_1Perception_1_1Capture_1_1RealSense_1a0b17adbe7b3840f0f30f8ebba491f961" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Perception::Capture::RealSense</scope><name>RealSense</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1ICameraBridge_1aaa69e3706400eaaa4292e2b57e81baf7" prot="public" virt="non-virtual" ambiguityscope="BipedalLocomotion::"><scope>BipedalLocomotion::Perception::Capture::RealSense</scope><name>shared_ptr</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1IPointCloudBridge_1a186c9991d90c1f6d20e10c8934767400" prot="public" virt="non-virtual" ambiguityscope="BipedalLocomotion::RobotInterface::IPointCloudBridge::"><scope>BipedalLocomotion::Perception::Capture::RealSense</scope><name>shared_ptr</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1ICameraBridge_1aa6d0959360199d4dca78f0e14d046793" prot="public" virt="non-virtual" ambiguityscope="BipedalLocomotion::"><scope>BipedalLocomotion::Perception::Capture::RealSense</scope><name>unique_ptr</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1IPointCloudBridge_1ad36eeaa28234f1a57783adc6c1638236" prot="public" virt="non-virtual" ambiguityscope="BipedalLocomotion::RobotInterface::IPointCloudBridge::"><scope>BipedalLocomotion::Perception::Capture::RealSense</scope><name>unique_ptr</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1ICameraBridge_1ab535fbdd8130c0208c2f97e031f07f89" prot="public" virt="non-virtual" ambiguityscope="BipedalLocomotion::"><scope>BipedalLocomotion::Perception::Capture::RealSense</scope><name>weak_ptr</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1IPointCloudBridge_1a1d2cdb0917dc1ef7b12f26178c6d942b" prot="public" virt="non-virtual" ambiguityscope="BipedalLocomotion::RobotInterface::IPointCloudBridge::"><scope>BipedalLocomotion::Perception::Capture::RealSense</scope><name>weak_ptr</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1ICameraBridge_1af72e9dd0ee0391e93ce4b56733c25757" prot="public" virt="virtual"><scope>BipedalLocomotion::Perception::Capture::RealSense</scope><name>~ICameraBridge</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1IPointCloudBridge_1aa007bed44d5547e1d4b0dd651f151875" prot="public" virt="virtual"><scope>BipedalLocomotion::Perception::Capture::RealSense</scope><name>~IPointCloudBridge</name></member>
      <member refid="classBipedalLocomotion_1_1Perception_1_1Capture_1_1RealSense_1a7bf48c316a6b1e29781b40f38c1930f0" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Perception::Capture::RealSense</scope><name>~RealSense</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
