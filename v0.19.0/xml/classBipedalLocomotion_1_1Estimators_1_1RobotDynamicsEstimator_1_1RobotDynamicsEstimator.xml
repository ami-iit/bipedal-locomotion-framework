<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1RobotDynamicsEstimator" kind="class" language="C++" prot="public">
    <compoundname>BipedalLocomotion::Estimators::RobotDynamicsEstimator::RobotDynamicsEstimator</compoundname>
    <basecompoundref refid="classBipedalLocomotion_1_1System_1_1Advanceable" prot="public" virt="non-virtual">BipedalLocomotion::System::Advanceable&lt; RobotDynamicsEstimatorInput, RobotDynamicsEstimatorOutput &gt;</basecompoundref>
    <includes local="no">BipedalLocomotion/RobotDynamicsEstimator/RobotDynamicsEstimator.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1RobotDynamicsEstimator_1a7fd74c4fe64a737e2ab1dc05b3c0b3e4" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; Impl &gt;</type>
        <definition>std::unique_ptr&lt;Impl&gt; BipedalLocomotion::Estimators::RobotDynamicsEstimator::RobotDynamicsEstimator::m_pimpl</definition>
        <argsstring></argsstring>
        <name>m_pimpl</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotDynamicsEstimator/RobotDynamicsEstimator.h" line="80" column="21" bodyfile="BipedalLocomotion/RobotDynamicsEstimator/RobotDynamicsEstimator.h" bodystart="79" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1RobotDynamicsEstimator_1a68b1dc98f34dd819ecf62e01bdd36e74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BipedalLocomotion::Estimators::RobotDynamicsEstimator::RobotDynamicsEstimator::RobotDynamicsEstimator</definition>
        <argsstring>()</argsstring>
        <name>RobotDynamicsEstimator</name>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotDynamicsEstimator/RobotDynamicsEstimator.h" line="86" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1RobotDynamicsEstimator_1a23ad03551c73888f1eeee1418497dde0" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual BipedalLocomotion::Estimators::RobotDynamicsEstimator::RobotDynamicsEstimator::~RobotDynamicsEstimator</definition>
        <argsstring>()</argsstring>
        <name>~RobotDynamicsEstimator</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotDynamicsEstimator/RobotDynamicsEstimator.h" line="91" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1RobotDynamicsEstimator_1a9526b22c3bddd8abaebfb91caf7e114c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::Estimators::RobotDynamicsEstimator::RobotDynamicsEstimator::initialize</definition>
        <argsstring>(std::weak_ptr&lt; const ParametersHandler::IParametersHandler &gt; handler) override</argsstring>
        <name>initialize</name>
        <reimplements refid="classBipedalLocomotion_1_1System_1_1Advanceable_1a6db247d3db83217a16e963d01f6bcb77">initialize</reimplements>
        <param>
          <type>std::weak_ptr&lt; const <ref refid="classBipedalLocomotion_1_1ParametersHandler_1_1IParametersHandler" kindref="compound">ParametersHandler::IParametersHandler</ref> &gt;</type>
          <declname>handler</declname>
        </param>
        <briefdescription>
<para>Initialize the <ref refid="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1RobotDynamicsEstimator" kindref="compound">RobotDynamicsEstimator</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handler</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the IParametersHandler </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para><table rows="5" cols="5"><row>
<entry thead="yes" align='center'><para>Group   </para>
</entry><entry thead="yes" align='center'><para>Parameter Name   </para>
</entry><entry thead="yes" align='center'><para>Type   </para>
</entry><entry thead="yes" align='center'><para>Description   </para>
</entry><entry thead="yes" align='center'><para>Mandatory    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>GENERAL</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>sampling_time</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>double</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>Sampling time   </para>
</entry><entry thead="no" align='center'><para>Yes    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>UKF</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>alpha</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>double</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>alpha</computeroutput> parameter of the unscented kalman filter   </para>
</entry><entry thead="no" align='center'><para>Yes    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>UKF</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>beta</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>double</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>beta</computeroutput> parameter of the unscented kalman filter   </para>
</entry><entry thead="no" align='center'><para>Yes    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>UKF</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>kappa</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>double</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>kappa</computeroutput> parameter of the unscented kalman filter   </para>
</entry><entry thead="no" align='center'><para>Yes   </para>
</entry></row>
</table>
</para>
</simplesect>
<simplesect kind="return"><para>True in case of success, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotDynamicsEstimator/RobotDynamicsEstimator.h" line="105" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1RobotDynamicsEstimator_1a40e92f52a7aca9219dfe42b6feb08069" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::Estimators::RobotDynamicsEstimator::RobotDynamicsEstimator::finalize</definition>
        <argsstring>(const System::VariablesHandler &amp;stateVariableHandler, const System::VariablesHandler &amp;measurementVariableHandler, std::shared_ptr&lt; iDynTree::KinDynComputations &gt; kinDynFullModel)</argsstring>
        <name>finalize</name>
        <param>
          <type>const <ref refid="classBipedalLocomotion_1_1System_1_1VariablesHandler" kindref="compound">System::VariablesHandler</ref> &amp;</type>
          <declname>stateVariableHandler</declname>
        </param>
        <param>
          <type>const <ref refid="classBipedalLocomotion_1_1System_1_1VariablesHandler" kindref="compound">System::VariablesHandler</ref> &amp;</type>
          <declname>measurementVariableHandler</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; iDynTree::KinDynComputations &gt;</type>
          <declname>kinDynFullModel</declname>
        </param>
        <briefdescription>
<para>Finalize the estimator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stateVariableHandler</parametername>
</parameternamelist>
<parameterdescription>
<para>reference to a <computeroutput><ref refid="classBipedalLocomotion_1_1System_1_1VariablesHandler" kindref="compound">System::VariablesHandler</ref></computeroutput> object describing the ukf state. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>measurementVariableHandler</parametername>
</parameternamelist>
<parameterdescription>
<para>reference to a <computeroutput><ref refid="classBipedalLocomotion_1_1System_1_1VariablesHandler" kindref="compound">System::VariablesHandler</ref></computeroutput> object describing the ukf measurement. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kinDynFullModel</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer to an iDynTree::KinDynComputations object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>You should call this method after initialized the estimator and created the <ref refid="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UkfState" kindref="compound">UkfState</ref> model which builds the handler needed in input to this method. </para>
</simplesect>
<simplesect kind="return"><para>true in case of success, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotDynamicsEstimator/RobotDynamicsEstimator.h" line="116" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1RobotDynamicsEstimator_1ace598f2b9e5049640eb1d351c9fb4a3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::Estimators::RobotDynamicsEstimator::RobotDynamicsEstimator::setInitialState</definition>
        <argsstring>(const RobotDynamicsEstimatorOutput &amp;initialState)</argsstring>
        <name>setInitialState</name>
        <param>
          <type>const <ref refid="structBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1RobotDynamicsEstimatorOutput" kindref="compound">RobotDynamicsEstimatorOutput</ref> &amp;</type>
          <declname>initialState</declname>
        </param>
        <briefdescription>
<para>set the initial state of the estimator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>initialState</parametername>
</parameternamelist>
<parameterdescription>
<para>a reference to an <computeroutput>Output</computeroutput> object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true in case of success, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotDynamicsEstimator/RobotDynamicsEstimator.h" line="142" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1RobotDynamicsEstimator_1a4d1e2572652db149aa01365834b08846" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::Estimators::RobotDynamicsEstimator::RobotDynamicsEstimator::isOutputValid</definition>
        <argsstring>() const override</argsstring>
        <name>isOutputValid</name>
        <reimplements refid="classBipedalLocomotion_1_1System_1_1OutputPort_1ac50de29a6160baa2bba195af9d69430a">isOutputValid</reimplements>
        <briefdescription>
<para>Determines the validity of the object retrieved with <ref refid="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1RobotDynamicsEstimator_1a4f61620a24fe2c3af5b385268a6ff4e7" kindref="member">getOutput()</ref> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if the object is valid, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotDynamicsEstimator/RobotDynamicsEstimator.h" line="148" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1RobotDynamicsEstimator_1a881306ae27aa7130022e04e13e45e8f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::Estimators::RobotDynamicsEstimator::RobotDynamicsEstimator::advance</definition>
        <argsstring>() override</argsstring>
        <name>advance</name>
        <reimplements refid="classBipedalLocomotion_1_1System_1_1Advanceable_1a67107e46e831d93f572558b541aab6d2">advance</reimplements>
        <briefdescription>
<para>Advance the internal state. </para>
        </briefdescription>
        <detaileddescription>
<para>This may change the value retrievable from <ref refid="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1RobotDynamicsEstimator_1a4f61620a24fe2c3af5b385268a6ff4e7" kindref="member">getOutput()</ref>. <simplesect kind="return"><para>True if the advance is successfull. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotDynamicsEstimator/RobotDynamicsEstimator.h" line="154" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1RobotDynamicsEstimator_1a7909bd6a5eeb0cd39446762db678ba5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::Estimators::RobotDynamicsEstimator::RobotDynamicsEstimator::setInput</definition>
        <argsstring>(const RobotDynamicsEstimatorInput &amp;input) override</argsstring>
        <name>setInput</name>
        <param>
          <type>const <ref refid="structBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1RobotDynamicsEstimatorInput" kindref="compound">RobotDynamicsEstimatorInput</ref> &amp;</type>
          <declname>input</declname>
        </param>
        <briefdescription>
<para>Set the input for the estimator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>is a struct containing the input of the estimator. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotDynamicsEstimator/RobotDynamicsEstimator.h" line="160" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1RobotDynamicsEstimator_1a4f61620a24fe2c3af5b385268a6ff4e7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>const <ref refid="structBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1RobotDynamicsEstimatorOutput" kindref="compound">RobotDynamicsEstimatorOutput</ref> &amp;</type>
        <definition>const RobotDynamicsEstimatorOutput&amp; BipedalLocomotion::Estimators::RobotDynamicsEstimator::RobotDynamicsEstimator::getOutput</definition>
        <argsstring>() const override</argsstring>
        <name>getOutput</name>
        <reimplements refid="classBipedalLocomotion_1_1System_1_1OutputPort_1a8c089ecf2dd8ff0fb2732233994b6cac">getOutput</reimplements>
        <briefdescription>
<para>Get the output of the ukf. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A struct containing the ukf estimation result. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotDynamicsEstimator/RobotDynamicsEstimator.h" line="166" column="40"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1RobotDynamicsEstimator_1a39c93dfce5cd469fee08c6c2aac173d2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1RobotDynamicsEstimator" kindref="compound">RobotDynamicsEstimator</ref> &gt;</type>
        <definition>static std::unique_ptr&lt;RobotDynamicsEstimator&gt; BipedalLocomotion::Estimators::RobotDynamicsEstimator::RobotDynamicsEstimator::build</definition>
        <argsstring>(std::weak_ptr&lt; const ParametersHandler::IParametersHandler &gt; handler, std::shared_ptr&lt; iDynTree::KinDynComputations &gt; kinDynFullModel, const std::vector&lt; SubModel &gt; &amp;subModelList, const std::vector&lt; std::shared_ptr&lt; KinDynWrapper &gt;&gt; &amp;kinDynWrapperList)</argsstring>
        <name>build</name>
        <param>
          <type>std::weak_ptr&lt; const <ref refid="classBipedalLocomotion_1_1ParametersHandler_1_1IParametersHandler" kindref="compound">ParametersHandler::IParametersHandler</ref> &gt;</type>
          <declname>handler</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; iDynTree::KinDynComputations &gt;</type>
          <declname>kinDynFullModel</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1SubModel" kindref="compound">SubModel</ref> &gt; &amp;</type>
          <declname>subModelList</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1KinDynWrapper" kindref="compound">KinDynWrapper</ref> &gt;&gt; &amp;</type>
          <declname>kinDynWrapperList</declname>
        </param>
        <briefdescription>
<para>build a robot dynamics estimator implementing an unscented kalman filter. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handler</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the IParametersHandler interface. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kinDynFullModel</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer to an iDynTree::KinDynComputations object that will be shared among all the dynamics. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>subModelList</parametername>
</parameternamelist>
<parameterdescription>
<para>a list of <ref refid="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1SubModel" kindref="compound">SubModel</ref> objects </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kinDynWrapperList</parametername>
</parameternamelist>
<parameterdescription>
<para>a list of pointers to a <computeroutput><ref refid="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1KinDynWrapper" kindref="compound">KinDynWrapper</ref></computeroutput> objects that will be shared among all the dynamics </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a <ref refid="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1RobotDynamicsEstimator" kindref="compound">RobotDynamicsEstimator</ref>. In case of issues an invalid <ref refid="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1RobotDynamicsEstimator" kindref="compound">RobotDynamicsEstimator</ref> will be returned. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotDynamicsEstimator/RobotDynamicsEstimator.h" line="132" column="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1RobotDynamicsEstimator" kindref="compound">RobotDynamicsEstimator</ref> is a concrete class and implements a robot dynamics estimator. </para>
    </briefdescription>
    <detaileddescription>
<para>The estimator is here implemented as an Unscented Kalman Filter. The user can build the estimator by using the build method or can initialize the <ref refid="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1RobotDynamicsEstimator" kindref="compound">RobotDynamicsEstimator</ref> object and then create the <ref refid="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UkfState" kindref="compound">UkfState</ref> model and <ref refid="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UkfMeasurement" kindref="compound">UkfMeasurement</ref> model which are then passed to the <computeroutput>bfl::UKFPrediction</computeroutput> and <computeroutput>bfl::UKFCorrection</computeroutput> objects respectively. To run an estimation step the user should set the input using <computeroutput>setInput</computeroutput>, call the <computeroutput>advance</computeroutput> method to perform an estimation step, use <computeroutput>getOutput</computeroutput> to get the estimation result. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>BipedalLocomotion::System::InputPort&lt; _Input &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1InputPort"/>
      </node>
      <node id="4">
        <label>BipedalLocomotion::System::OutputPort&lt; _Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1OutputPort"/>
      </node>
      <node id="2">
        <label>BipedalLocomotion::System::Advanceable&lt; RobotDynamicsEstimatorInput, RobotDynamicsEstimatorOutput &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Advanceable"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="template-instance">
          <edgelabel>&lt; RobotDynamicsEstimatorInput, RobotDynamicsEstimatorOutput &gt;</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>BipedalLocomotion::System::Advanceable&lt; _Input, _Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Advanceable"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>BipedalLocomotion::Estimators::RobotDynamicsEstimator::RobotDynamicsEstimator</label>
        <link refid="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1RobotDynamicsEstimator"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>BipedalLocomotion::System::InputPort&lt; _Input &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1InputPort"/>
      </node>
      <node id="4">
        <label>BipedalLocomotion::System::OutputPort&lt; _Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1OutputPort"/>
      </node>
      <node id="2">
        <label>BipedalLocomotion::System::Advanceable&lt; RobotDynamicsEstimatorInput, RobotDynamicsEstimatorOutput &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Advanceable"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="template-instance">
          <edgelabel>&lt; RobotDynamicsEstimatorInput, RobotDynamicsEstimatorOutput &gt;</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>BipedalLocomotion::System::Advanceable&lt; _Input, _Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Advanceable"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>BipedalLocomotion::Estimators::RobotDynamicsEstimator::RobotDynamicsEstimator</label>
        <link refid="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1RobotDynamicsEstimator"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="BipedalLocomotion/RobotDynamicsEstimator/RobotDynamicsEstimator.h" line="74" column="1" bodyfile="BipedalLocomotion/RobotDynamicsEstimator/RobotDynamicsEstimator.h" bodystart="75" bodyend="168"/>
    <listofallmembers>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1RobotDynamicsEstimator_1a881306ae27aa7130022e04e13e45e8f7" prot="public" virt="virtual"><scope>BipedalLocomotion::Estimators::RobotDynamicsEstimator::RobotDynamicsEstimator</scope><name>advance</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1a09ee5b41c77c6b626f4d5cb775065325" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Estimators::RobotDynamicsEstimator::RobotDynamicsEstimator</scope><name>Advanceable</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1aaeb3eba3073fbc844dea1eba4c9b68f3" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Estimators::RobotDynamicsEstimator::RobotDynamicsEstimator</scope><name>Advanceable</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1ac1549cb26bd896e27370e97b0795ba3f" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Estimators::RobotDynamicsEstimator::RobotDynamicsEstimator</scope><name>Advanceable</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1RobotDynamicsEstimator_1a39c93dfce5cd469fee08c6c2aac173d2" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Estimators::RobotDynamicsEstimator::RobotDynamicsEstimator</scope><name>build</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1a618ab786bb43814b3b3012b843fce93b" prot="public" virt="virtual"><scope>BipedalLocomotion::Estimators::RobotDynamicsEstimator::RobotDynamicsEstimator</scope><name>close</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1RobotDynamicsEstimator_1a40e92f52a7aca9219dfe42b6feb08069" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Estimators::RobotDynamicsEstimator::RobotDynamicsEstimator</scope><name>finalize</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1RobotDynamicsEstimator_1a4f61620a24fe2c3af5b385268a6ff4e7" prot="public" virt="virtual"><scope>BipedalLocomotion::Estimators::RobotDynamicsEstimator::RobotDynamicsEstimator</scope><name>getOutput</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1RobotDynamicsEstimator_1a9526b22c3bddd8abaebfb91caf7e114c" prot="public" virt="virtual"><scope>BipedalLocomotion::Estimators::RobotDynamicsEstimator::RobotDynamicsEstimator</scope><name>initialize</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1a975a7ecbf38c917c7b72519581fc7dba" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Estimators::RobotDynamicsEstimator::RobotDynamicsEstimator</scope><name>Input</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1InputPort_1a27c614cb30c1e4b78e64791f4919dfa7" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Estimators::RobotDynamicsEstimator::RobotDynamicsEstimator</scope><name>InputPort</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1InputPort_1a74d1418613e89a7f2993ea936228a44a" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Estimators::RobotDynamicsEstimator::RobotDynamicsEstimator</scope><name>InputPort</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1InputPort_1a02ec5c947f1d2d83d2952c3b899cc58f" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Estimators::RobotDynamicsEstimator::RobotDynamicsEstimator</scope><name>InputPort</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1RobotDynamicsEstimator_1a4d1e2572652db149aa01365834b08846" prot="public" virt="virtual"><scope>BipedalLocomotion::Estimators::RobotDynamicsEstimator::RobotDynamicsEstimator</scope><name>isOutputValid</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1RobotDynamicsEstimator_1a7fd74c4fe64a737e2ab1dc05b3c0b3e4" prot="private" virt="non-virtual"><scope>BipedalLocomotion::Estimators::RobotDynamicsEstimator::RobotDynamicsEstimator</scope><name>m_pimpl</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1ae147cdee9ff9160a9dfe0d3e349a9aad" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Estimators::RobotDynamicsEstimator::RobotDynamicsEstimator</scope><name>operator=</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1adf0d9fc07bab0ec5d4db7f3a35816bf2" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Estimators::RobotDynamicsEstimator::RobotDynamicsEstimator</scope><name>operator=</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1InputPort_1a54f476d3c8d6d003fb714309ea6272aa" prot="public" virt="non-virtual" ambiguityscope="BipedalLocomotion::System::InputPort::"><scope>BipedalLocomotion::Estimators::RobotDynamicsEstimator::RobotDynamicsEstimator</scope><name>operator=</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1InputPort_1adb341b37472241b6da8b552166308d7b" prot="public" virt="non-virtual" ambiguityscope="BipedalLocomotion::System::InputPort::"><scope>BipedalLocomotion::Estimators::RobotDynamicsEstimator::RobotDynamicsEstimator</scope><name>operator=</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1OutputPort_1af5e15f5e4962a5c8e0f0c0a49adb9ca1" prot="public" virt="non-virtual" ambiguityscope="BipedalLocomotion::System::OutputPort::"><scope>BipedalLocomotion::Estimators::RobotDynamicsEstimator::RobotDynamicsEstimator</scope><name>operator=</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1OutputPort_1ad5c6ce3ad7d2a064d7bb512fe0bc489e" prot="public" virt="non-virtual" ambiguityscope="BipedalLocomotion::System::OutputPort::"><scope>BipedalLocomotion::Estimators::RobotDynamicsEstimator::RobotDynamicsEstimator</scope><name>operator=</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1a69603f2c9c608815908425b5b8c2005c" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Estimators::RobotDynamicsEstimator::RobotDynamicsEstimator</scope><name>Output</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1OutputPort_1a7c0d15e677a1935918fc747ba4c25ec1" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Estimators::RobotDynamicsEstimator::RobotDynamicsEstimator</scope><name>OutputPort</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1OutputPort_1a0a39b891749961d34507b4b591886741" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Estimators::RobotDynamicsEstimator::RobotDynamicsEstimator</scope><name>OutputPort</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1OutputPort_1a581340f280eca1890a8a7b2331761b57" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Estimators::RobotDynamicsEstimator::RobotDynamicsEstimator</scope><name>OutputPort</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1RobotDynamicsEstimator_1a68b1dc98f34dd819ecf62e01bdd36e74" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Estimators::RobotDynamicsEstimator::RobotDynamicsEstimator</scope><name>RobotDynamicsEstimator</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1RobotDynamicsEstimator_1ace598f2b9e5049640eb1d351c9fb4a3a" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Estimators::RobotDynamicsEstimator::RobotDynamicsEstimator</scope><name>setInitialState</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1RobotDynamicsEstimator_1a7909bd6a5eeb0cd39446762db678ba5c" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Estimators::RobotDynamicsEstimator::RobotDynamicsEstimator</scope><name>setInput</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1InputPort_1ad2637be5c9075a2d8f09fedc6a42d808" prot="public" virt="pure-virtual" ambiguityscope="Advanceable&lt; RobotDynamicsEstimatorInput, RobotDynamicsEstimatorOutput &gt;::"><scope>BipedalLocomotion::Estimators::RobotDynamicsEstimator::RobotDynamicsEstimator</scope><name>setInput</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1afae1137cba829874bab4a1d25d559896" prot="public" virt="virtual"><scope>BipedalLocomotion::Estimators::RobotDynamicsEstimator::RobotDynamicsEstimator</scope><name>~Advanceable</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1InputPort_1ac9b58b0d2f6ae8821b873ed6f9817ccb" prot="public" virt="virtual"><scope>BipedalLocomotion::Estimators::RobotDynamicsEstimator::RobotDynamicsEstimator</scope><name>~InputPort</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1OutputPort_1adcc49c38152c9204dcab4f8e87f68977" prot="public" virt="virtual"><scope>BipedalLocomotion::Estimators::RobotDynamicsEstimator::RobotDynamicsEstimator</scope><name>~OutputPort</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1RobotDynamicsEstimator_1a23ad03551c73888f1eeee1418497dde0" prot="public" virt="virtual"><scope>BipedalLocomotion::Estimators::RobotDynamicsEstimator::RobotDynamicsEstimator</scope><name>~RobotDynamicsEstimator</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
