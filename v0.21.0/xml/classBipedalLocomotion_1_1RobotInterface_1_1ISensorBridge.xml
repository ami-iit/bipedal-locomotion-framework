<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge" kind="class" language="C++" prot="public">
    <compoundname>BipedalLocomotion::RobotInterface::ISensorBridge</compoundname>
    <derivedcompoundref refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge" prot="public" virt="non-virtual">BipedalLocomotion::RobotInterface::YarpSensorBridge</derivedcompoundref>
    <includes local="no">BipedalLocomotion/RobotInterface/ISensorBridge.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1a3b4b4107634a981037efa760f91937aa" prot="public" static="no">
        <type>std::unique_ptr&lt; <ref refid="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge" kindref="compound">ISensorBridge</ref> &gt;</type>
        <definition>using BipedalLocomotion::RobotInterface::ISensorBridge::unique_ptr =  std::unique_ptr&lt;ISensorBridge&gt;</definition>
        <argsstring></argsstring>
        <name>unique_ptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/ISensorBridge.h" line="96" column="5" bodyfile="BipedalLocomotion/RobotInterface/ISensorBridge.h" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1a07594468078e3f666d7a44a6fb33e1c4" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge" kindref="compound">ISensorBridge</ref> &gt;</type>
        <definition>using BipedalLocomotion::RobotInterface::ISensorBridge::shared_ptr =  std::shared_ptr&lt;ISensorBridge&gt;</definition>
        <argsstring></argsstring>
        <name>shared_ptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/ISensorBridge.h" line="98" column="5" bodyfile="BipedalLocomotion/RobotInterface/ISensorBridge.h" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1a57a14eeec8ad23a41886c52b11de434b" prot="public" static="no">
        <type>std::weak_ptr&lt; <ref refid="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge" kindref="compound">ISensorBridge</ref> &gt;</type>
        <definition>using BipedalLocomotion::RobotInterface::ISensorBridge::weak_ptr =  std::weak_ptr&lt;ISensorBridge&gt;</definition>
        <argsstring></argsstring>
        <name>weak_ptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/ISensorBridge.h" line="100" column="5" bodyfile="BipedalLocomotion/RobotInterface/ISensorBridge.h" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1ac399abaa3e071481a313cac6df96efd9" prot="public" static="no">
        <type>std::optional&lt; std::reference_wrapper&lt; double &gt; &gt;</type>
        <definition>using BipedalLocomotion::RobotInterface::ISensorBridge::OptionalDoubleRef =  std::optional&lt;std::reference_wrapper&lt;double&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>OptionalDoubleRef</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/ISensorBridge.h" line="102" column="5" bodyfile="BipedalLocomotion/RobotInterface/ISensorBridge.h" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1a7435078b3d7458dfff6c9e4eb43a98b3" prot="public" static="no">
        <type>Eigen::Matrix&lt; double, 12, 1 &gt;</type>
        <definition>using BipedalLocomotion::RobotInterface::ISensorBridge::Vector12d =  Eigen::Matrix&lt;double, 12, 1&gt;</definition>
        <argsstring></argsstring>
        <name>Vector12d</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/ISensorBridge.h" line="104" column="5" bodyfile="BipedalLocomotion/RobotInterface/ISensorBridge.h" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1a1e8c492c2741354f96f509e9e22de032" prot="public" static="no">
        <type>Eigen::Matrix&lt; double, 6, 1 &gt;</type>
        <definition>using BipedalLocomotion::RobotInterface::ISensorBridge::Vector6d =  Eigen::Matrix&lt;double, 6, 1&gt;</definition>
        <argsstring></argsstring>
        <name>Vector6d</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/ISensorBridge.h" line="105" column="5" bodyfile="BipedalLocomotion/RobotInterface/ISensorBridge.h" bodystart="105" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1ac702a40c1c06091450376ac6e45a7206" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool BipedalLocomotion::RobotInterface::ISensorBridge::getJointsList</definition>
        <argsstring>(std::vector&lt; std::string &gt; &amp;jointsList)</argsstring>
        <name>getJointsList</name>
        <reimplementedby refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1a5ed3adf70e3be0f4020e7c2ecdaf8b9b">getJointsList</reimplementedby>
        <param>
          <type>std::vector&lt; std::string &gt; &amp;</type>
          <declname>jointsList</declname>
        </param>
        <briefdescription>
<para>Get joints list. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">jointsList</parametername>
</parameternamelist>
<parameterdescription>
<para>list of joints attached to the bridge </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true/false in case of success/failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/ISensorBridge.h" line="112" column="18" bodyfile="BipedalLocomotion/RobotInterface/ISensorBridge.h" bodystart="112" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1ab1338623e0712857aff3d21c4506a638" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool BipedalLocomotion::RobotInterface::ISensorBridge::getIMUsList</definition>
        <argsstring>(std::vector&lt; std::string &gt; &amp;IMUsList)</argsstring>
        <name>getIMUsList</name>
        <reimplementedby refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1a1562faa1a69c475f95b88ad943966a90">getIMUsList</reimplementedby>
        <param>
          <type>std::vector&lt; std::string &gt; &amp;</type>
          <declname>IMUsList</declname>
        </param>
        <briefdescription>
<para>Get imu sensors. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">IMUsList</parametername>
</parameternamelist>
<parameterdescription>
<para>list of IMUs attached to the bridge </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true/false in case of success/failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/ISensorBridge.h" line="122" column="18" bodyfile="BipedalLocomotion/RobotInterface/ISensorBridge.h" bodystart="122" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1acb729f74e9e13d5f1528442e9e9a212d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool BipedalLocomotion::RobotInterface::ISensorBridge::getLinearAccelerometersList</definition>
        <argsstring>(std::vector&lt; std::string &gt; &amp;linearAccelerometersList)</argsstring>
        <name>getLinearAccelerometersList</name>
        <reimplementedby refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1a06b6b193c3407b0d489a5bba5c1b4f1d">getLinearAccelerometersList</reimplementedby>
        <param>
          <type>std::vector&lt; std::string &gt; &amp;</type>
          <declname>linearAccelerometersList</declname>
        </param>
        <briefdescription>
<para>Get linear accelerometers. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">linearAccelerometersList</parametername>
</parameternamelist>
<parameterdescription>
<para>list of linear accelerometers attached to the bridge </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true/false in case of success/failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/ISensorBridge.h" line="132" column="18" bodyfile="BipedalLocomotion/RobotInterface/ISensorBridge.h" bodystart="132" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1a5bc92c7da3b7100b3c0ae1ef94e9197f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool BipedalLocomotion::RobotInterface::ISensorBridge::getGyroscopesList</definition>
        <argsstring>(std::vector&lt; std::string &gt; &amp;gyroscopesList)</argsstring>
        <name>getGyroscopesList</name>
        <reimplementedby refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1a1e476a8729c50254046bb6b9f34130a3">getGyroscopesList</reimplementedby>
        <param>
          <type>std::vector&lt; std::string &gt; &amp;</type>
          <declname>gyroscopesList</declname>
        </param>
        <briefdescription>
<para>Get gyroscopes. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">gyroscopesList</parametername>
</parameternamelist>
<parameterdescription>
<para>list of gyroscopes attached to the bridge </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true/false in case of success/failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/ISensorBridge.h" line="142" column="18" bodyfile="BipedalLocomotion/RobotInterface/ISensorBridge.h" bodystart="142" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1a7918e657f4caec38785a1ce614529a6c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool BipedalLocomotion::RobotInterface::ISensorBridge::getOrientationSensorsList</definition>
        <argsstring>(std::vector&lt; std::string &gt; &amp;orientationSensorsList)</argsstring>
        <name>getOrientationSensorsList</name>
        <reimplementedby refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1a0306dedea0c8239fb132df564f350e25">getOrientationSensorsList</reimplementedby>
        <param>
          <type>std::vector&lt; std::string &gt; &amp;</type>
          <declname>orientationSensorsList</declname>
        </param>
        <briefdescription>
<para>Get orientation sensors. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">orientationSensorsList</parametername>
</parameternamelist>
<parameterdescription>
<para>list of orientation sensors attached to the bridge </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true/false in case of success/failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/ISensorBridge.h" line="152" column="18" bodyfile="BipedalLocomotion/RobotInterface/ISensorBridge.h" bodystart="152" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1abd12ba8d7810a7a50f7d79b00a3d83d3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool BipedalLocomotion::RobotInterface::ISensorBridge::getMagnetometersList</definition>
        <argsstring>(std::vector&lt; std::string &gt; &amp;magnetometersList)</argsstring>
        <name>getMagnetometersList</name>
        <reimplementedby refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1ae1d4e48477fbf613d261ad3d473b6e71">getMagnetometersList</reimplementedby>
        <param>
          <type>std::vector&lt; std::string &gt; &amp;</type>
          <declname>magnetometersList</declname>
        </param>
        <briefdescription>
<para>Get magnetometers sensors. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">magnetometersList</parametername>
</parameternamelist>
<parameterdescription>
<para>list of magnetometers attached to the bridge </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true/false in case of success/failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/ISensorBridge.h" line="162" column="18" bodyfile="BipedalLocomotion/RobotInterface/ISensorBridge.h" bodystart="162" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1a4d95d80173b7dce89c6bf2ff7904e2ce" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool BipedalLocomotion::RobotInterface::ISensorBridge::getSixAxisForceTorqueSensorsList</definition>
        <argsstring>(std::vector&lt; std::string &gt; &amp;sixAxisForceTorqueSensorsList)</argsstring>
        <name>getSixAxisForceTorqueSensorsList</name>
        <reimplementedby refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1a942974549cb60ba7deea1242073c33bd">getSixAxisForceTorqueSensorsList</reimplementedby>
        <param>
          <type>std::vector&lt; std::string &gt; &amp;</type>
          <declname>sixAxisForceTorqueSensorsList</declname>
        </param>
        <briefdescription>
<para>Get 6 axis FT sensors. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">sixAxisForceTorqueSensorsList</parametername>
</parameternamelist>
<parameterdescription>
<para>list of 6 axis force torque sensors attached to the bridge </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true/false in case of success/failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/ISensorBridge.h" line="174" column="5" bodyfile="BipedalLocomotion/RobotInterface/ISensorBridge.h" bodystart="174" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1a48dd5094ae2efd7c119e59f2649ed972" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool BipedalLocomotion::RobotInterface::ISensorBridge::getThreeAxisForceTorqueSensorsList</definition>
        <argsstring>(std::vector&lt; std::string &gt; &amp;threeAxisForceTorqueSensorsList)</argsstring>
        <name>getThreeAxisForceTorqueSensorsList</name>
        <reimplementedby refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1ab9502b971b0c4e73ccee06b037f80fb2">getThreeAxisForceTorqueSensorsList</reimplementedby>
        <param>
          <type>std::vector&lt; std::string &gt; &amp;</type>
          <declname>threeAxisForceTorqueSensorsList</declname>
        </param>
        <briefdescription>
<para>Get 6 axis FT sensors. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">threeAxisForceTorqueSensorsList</parametername>
</parameternamelist>
<parameterdescription>
<para>list of 3 axis force torque sensors attached to the bridge </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true/false in case of success/failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/ISensorBridge.h" line="186" column="5" bodyfile="BipedalLocomotion/RobotInterface/ISensorBridge.h" bodystart="186" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1a404aab5ea59c6395cfa00c7be3deef5a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool BipedalLocomotion::RobotInterface::ISensorBridge::getCartesianWrenchesList</definition>
        <argsstring>(std::vector&lt; std::string &gt; &amp;cartesianWrenchesList)</argsstring>
        <name>getCartesianWrenchesList</name>
        <reimplementedby refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1ab2b8a502338624b417a7efcd5aa2e477">getCartesianWrenchesList</reimplementedby>
        <param>
          <type>std::vector&lt; std::string &gt; &amp;</type>
          <declname>cartesianWrenchesList</declname>
        </param>
        <briefdescription>
<para>Get cartesian wrenches. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">cartesianWrenchesList</parametername>
</parameternamelist>
<parameterdescription>
<para>list of cartesian wrenches attached to the bridge </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true/false in case of success/failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/ISensorBridge.h" line="196" column="18" bodyfile="BipedalLocomotion/RobotInterface/ISensorBridge.h" bodystart="196" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1adbde89a822c2f343838b2b919987ca1f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool BipedalLocomotion::RobotInterface::ISensorBridge::getTemperatureSensorsList</definition>
        <argsstring>(std::vector&lt; std::string &gt; &amp;temperatureSensorsList)</argsstring>
        <name>getTemperatureSensorsList</name>
        <reimplementedby refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1a5eab67d4c64208bb97ec8c476de1409a">getTemperatureSensorsList</reimplementedby>
        <param>
          <type>std::vector&lt; std::string &gt; &amp;</type>
          <declname>temperatureSensorsList</declname>
        </param>
        <briefdescription>
<para>Get temperature sensors. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">cartesianWrenchesList</parametername>
</parameternamelist>
<parameterdescription>
<para>list of cartesian wrenches attached to the bridge </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true/false in case of success/failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/ISensorBridge.h" line="206" column="18" bodyfile="BipedalLocomotion/RobotInterface/ISensorBridge.h" bodystart="206" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1aebb94b2e2b4cc3045c04f69f62b2c1d1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool BipedalLocomotion::RobotInterface::ISensorBridge::getJointPosition</definition>
        <argsstring>(const std::string &amp;jointName, double &amp;jointPosition, OptionalDoubleRef receiveTimeInSeconds={})</argsstring>
        <name>getJointPosition</name>
        <reimplementedby refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1a499e07ea5081b2fa8f72e1af488ed8f0">getJointPosition</reimplementedby>
        <param>
          <type>const std::string &amp;</type>
          <declname>jointName</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>jointPosition</declname>
        </param>
        <param>
          <type>OptionalDoubleRef</type>
          <declname>receiveTimeInSeconds</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Get joint position in radians. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">jointName</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the joint </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">jointPosition</parametername>
</parameternamelist>
<parameterdescription>
<para>joint position in radians </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">receiveTimeInSeconds</parametername>
</parameternamelist>
<parameterdescription>
<para>time at which the measurement was received </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true/false in case of success/failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/ISensorBridge.h" line="218" column="18" bodyfile="BipedalLocomotion/RobotInterface/ISensorBridge.h" bodystart="218" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1a736887f71519e65809df5963dabf0e41" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool BipedalLocomotion::RobotInterface::ISensorBridge::getJointPositions</definition>
        <argsstring>(Eigen::Ref&lt; Eigen::VectorXd &gt; jointPositions, OptionalDoubleRef receiveTimeInSeconds={})</argsstring>
        <name>getJointPositions</name>
        <reimplementedby refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1acfb5db4bb7dc7193e3d8ba91f866310e">getJointPositions</reimplementedby>
        <param>
          <type>Eigen::Ref&lt; Eigen::VectorXd &gt;</type>
          <declname>jointPositions</declname>
        </param>
        <param>
          <type>OptionalDoubleRef</type>
          <declname>receiveTimeInSeconds</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Get all joints&apos; positions in radians. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">jointPositions</parametername>
</parameternamelist>
<parameterdescription>
<para>all joints&apos; position in radians </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">receiveTimeInSeconds</parametername>
</parameternamelist>
<parameterdescription>
<para>time at which the measurement was received </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>the size is decided at the configuration and remains fixed, and internal checks must be done at the implementation level by the Derived class. This means that the user must pass a resized argument &quot;jointPositions&quot; to this method </para>
</simplesect>
<simplesect kind="return"><para>true/false in case of success/failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/ISensorBridge.h" line="234" column="18" bodyfile="BipedalLocomotion/RobotInterface/ISensorBridge.h" bodystart="234" bodyend="238"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1a038b99ea62dbe5cd5ebfe347d4c0e0de" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool BipedalLocomotion::RobotInterface::ISensorBridge::getJointVelocity</definition>
        <argsstring>(const std::string &amp;jointName, double &amp;jointVelocity, OptionalDoubleRef receiveTimeInSeconds={})</argsstring>
        <name>getJointVelocity</name>
        <reimplementedby refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1a56f4f7f4171c04a641d678c936984647">getJointVelocity</reimplementedby>
        <param>
          <type>const std::string &amp;</type>
          <declname>jointName</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>jointVelocity</declname>
        </param>
        <param>
          <type>OptionalDoubleRef</type>
          <declname>receiveTimeInSeconds</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Get joint velocity in rad/s. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">jointName</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the joint </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">jointVelocity</parametername>
</parameternamelist>
<parameterdescription>
<para>joint velocity in radians per second </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">receiveTimeInSeconds</parametername>
</parameternamelist>
<parameterdescription>
<para>time at which the measurement was received </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true/false in case of success/failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/ISensorBridge.h" line="247" column="18" bodyfile="BipedalLocomotion/RobotInterface/ISensorBridge.h" bodystart="247" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1ab9b237bf8588f2463336a32ee01018ee" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool BipedalLocomotion::RobotInterface::ISensorBridge::getJointVelocities</definition>
        <argsstring>(Eigen::Ref&lt; Eigen::VectorXd &gt; jointVelocties, OptionalDoubleRef receiveTimeInSeconds={})</argsstring>
        <name>getJointVelocities</name>
        <reimplementedby refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1a0418048570f711df729598ba129712f4">getJointVelocities</reimplementedby>
        <param>
          <type>Eigen::Ref&lt; Eigen::VectorXd &gt;</type>
          <declname>jointVelocties</declname>
        </param>
        <param>
          <type>OptionalDoubleRef</type>
          <declname>receiveTimeInSeconds</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Get all joints&apos; velocities in rad/s. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">jointVelocties</parametername>
</parameternamelist>
<parameterdescription>
<para>all joints&apos; velocities in radians per second </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">receiveTimeInSeconds</parametername>
</parameternamelist>
<parameterdescription>
<para>time at which the measurement was received </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>the size is decided at the configuration and remains fixed, and internal checks must be done at the implementation level by the Derived class. This means that the user must pass a resized argument &quot;jointVelocties&quot; to this method </para>
</simplesect>
<simplesect kind="return"><para>true/false in case of success/failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/ISensorBridge.h" line="263" column="18" bodyfile="BipedalLocomotion/RobotInterface/ISensorBridge.h" bodystart="263" bodyend="267"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1ae17823e4da98b73bf44b06f3d0f35f31" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool BipedalLocomotion::RobotInterface::ISensorBridge::getJointAcceleration</definition>
        <argsstring>(const std::string &amp;jointName, double &amp;jointAcceleration, OptionalDoubleRef receiveTimeInSeconds={})</argsstring>
        <name>getJointAcceleration</name>
        <reimplementedby refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1a291dadb7f52ef4239cd916e45bc6a1d0">getJointAcceleration</reimplementedby>
        <param>
          <type>const std::string &amp;</type>
          <declname>jointName</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>jointAcceleration</declname>
        </param>
        <param>
          <type>OptionalDoubleRef</type>
          <declname>receiveTimeInSeconds</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Get joint acceleration in rad/s^2. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">jointName</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the joint </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">jointAcceleration</parametername>
</parameternamelist>
<parameterdescription>
<para>joint acceleration in radians per second squared </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">receiveTimeInSeconds</parametername>
</parameternamelist>
<parameterdescription>
<para>time at which the measurement was received </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true/false in case of success/failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/ISensorBridge.h" line="276" column="18" bodyfile="BipedalLocomotion/RobotInterface/ISensorBridge.h" bodystart="276" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1a8b64f44c996ec1012d8d22106d7ac375" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool BipedalLocomotion::RobotInterface::ISensorBridge::getJointAccelerations</definition>
        <argsstring>(Eigen::Ref&lt; Eigen::VectorXd &gt; jointAccelerations, OptionalDoubleRef receiveTimeInSeconds={})</argsstring>
        <name>getJointAccelerations</name>
        <reimplementedby refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1a4961849d5a46ef6101db533b97f34688">getJointAccelerations</reimplementedby>
        <param>
          <type>Eigen::Ref&lt; Eigen::VectorXd &gt;</type>
          <declname>jointAccelerations</declname>
        </param>
        <param>
          <type>OptionalDoubleRef</type>
          <declname>receiveTimeInSeconds</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Get all joints&apos; accelerations in rad/s^2. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">jointAccelerations</parametername>
</parameternamelist>
<parameterdescription>
<para>all joints&apos; accelerations in radians per second squared </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">receiveTimeInSeconds</parametername>
</parameternamelist>
<parameterdescription>
<para>time at which the measurement was received </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>the size is decided at the configuration and remains fixed, and internal checks must be done at the implementation level by the Derived class. This means that the user must pass a resized argument &quot;jointAccelerations&quot; to this method </para>
</simplesect>
<simplesect kind="return"><para>true/false in case of success/failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/ISensorBridge.h" line="292" column="18" bodyfile="BipedalLocomotion/RobotInterface/ISensorBridge.h" bodystart="292" bodyend="296"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1ab61b60f1c9ad604667f848d8a7e56c6a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool BipedalLocomotion::RobotInterface::ISensorBridge::getIMUMeasurement</definition>
        <argsstring>(const std::string &amp;imuName, Eigen::Ref&lt; Vector12d &gt; imuMeasurement, OptionalDoubleRef receiveTimeInSeconds={})</argsstring>
        <name>getIMUMeasurement</name>
        <reimplementedby refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1ad93d84935e2a8b8de199f1af6f37ea94">getIMUMeasurement</reimplementedby>
        <param>
          <type>const std::string &amp;</type>
          <declname>imuName</declname>
        </param>
        <param>
          <type>Eigen::Ref&lt; Vector12d &gt;</type>
          <declname>imuMeasurement</declname>
        </param>
        <param>
          <type>OptionalDoubleRef</type>
          <declname>receiveTimeInSeconds</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Get IMU measurement The serialization of measurments is as follows, (rpy acc omega mag) </para>
        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>rpy in radians Roll-Pitch-Yaw Euler angles</para>
</listitem><listitem><para>acc in m/s^2 linear accelerometer measurements</para>
</listitem><listitem><para>omega in rad/s gyroscope measurements</para>
</listitem><listitem><para>mag in tesla magnetometer measurements <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">imuName</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the IMU </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">imuMeasurement</parametername>
</parameternamelist>
<parameterdescription>
<para>imu measurement of size 12 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">receiveTimeInSeconds</parametername>
</parameternamelist>
<parameterdescription>
<para>time at which the measurement was received </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true/false in case of success/failure </para>
</simplesect>
</para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/ISensorBridge.h" line="311" column="18" bodyfile="BipedalLocomotion/RobotInterface/ISensorBridge.h" bodystart="311" bodyend="316"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1a0949583d77937eec7992e3e219870e84" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool BipedalLocomotion::RobotInterface::ISensorBridge::getLinearAccelerometerMeasurement</definition>
        <argsstring>(const std::string &amp;accName, Eigen::Ref&lt; Eigen::Vector3d &gt; accMeasurement, OptionalDoubleRef receiveTimeInSeconds={})</argsstring>
        <name>getLinearAccelerometerMeasurement</name>
        <reimplementedby refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1a84b7ab5b488bbc0845784d62231f301e">getLinearAccelerometerMeasurement</reimplementedby>
        <param>
          <type>const std::string &amp;</type>
          <declname>accName</declname>
        </param>
        <param>
          <type>Eigen::Ref&lt; Eigen::Vector3d &gt;</type>
          <declname>accMeasurement</declname>
        </param>
        <param>
          <type>OptionalDoubleRef</type>
          <declname>receiveTimeInSeconds</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Get linear accelerometer measurement in m/s^2. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">accName</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the linear accelerometer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">accMeasurement</parametername>
</parameternamelist>
<parameterdescription>
<para>linear accelerometer measurements of size 3 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">receiveTimeInSeconds</parametername>
</parameternamelist>
<parameterdescription>
<para>time at which the measurement was received </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true/false in case of success/failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/ISensorBridge.h" line="325" column="18" bodyfile="BipedalLocomotion/RobotInterface/ISensorBridge.h" bodystart="325" bodyend="330"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1a26cbfe0877a9f218f76d300f08f2fb24" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool BipedalLocomotion::RobotInterface::ISensorBridge::getGyroscopeMeasure</definition>
        <argsstring>(const std::string &amp;gyroName, Eigen::Ref&lt; Eigen::Vector3d &gt; gyroMeasurement, OptionalDoubleRef receiveTimeInSeconds={})</argsstring>
        <name>getGyroscopeMeasure</name>
        <reimplementedby refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1a7491b08358c13cbfe0e7db5d6cc1c5b3">getGyroscopeMeasure</reimplementedby>
        <param>
          <type>const std::string &amp;</type>
          <declname>gyroName</declname>
        </param>
        <param>
          <type>Eigen::Ref&lt; Eigen::Vector3d &gt;</type>
          <declname>gyroMeasurement</declname>
        </param>
        <param>
          <type>OptionalDoubleRef</type>
          <declname>receiveTimeInSeconds</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Get gyroscope measurement in rad/s. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">gyroName</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the gyroscope </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">gyroMeasurement</parametername>
</parameternamelist>
<parameterdescription>
<para>gyroscope measurements of size 3 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">receiveTimeInSeconds</parametername>
</parameternamelist>
<parameterdescription>
<para>time at which the measurement was received </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true/false in case of success/failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/ISensorBridge.h" line="339" column="18" bodyfile="BipedalLocomotion/RobotInterface/ISensorBridge.h" bodystart="339" bodyend="344"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1add94673affb8521510ac266ebf0c5185" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool BipedalLocomotion::RobotInterface::ISensorBridge::getOrientationSensorMeasurement</definition>
        <argsstring>(const std::string &amp;rpyName, Eigen::Ref&lt; Eigen::Vector3d &gt; rpyMeasurement, OptionalDoubleRef receiveTimeInSeconds={})</argsstring>
        <name>getOrientationSensorMeasurement</name>
        <reimplementedby refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1ac0a30d06912f7ddcd013f08788293d94">getOrientationSensorMeasurement</reimplementedby>
        <param>
          <type>const std::string &amp;</type>
          <declname>rpyName</declname>
        </param>
        <param>
          <type>Eigen::Ref&lt; Eigen::Vector3d &gt;</type>
          <declname>rpyMeasurement</declname>
        </param>
        <param>
          <type>OptionalDoubleRef</type>
          <declname>receiveTimeInSeconds</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Get orientation sensor measurement in radians as roll pitch yaw Euler angles. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">rpyName</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the orientation sensor </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">rpyMeasurement</parametername>
</parameternamelist>
<parameterdescription>
<para>rpy measurements of size 3 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">receiveTimeInSeconds</parametername>
</parameternamelist>
<parameterdescription>
<para>time at which the measurement was received </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true/false in case of success/failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/ISensorBridge.h" line="353" column="18" bodyfile="BipedalLocomotion/RobotInterface/ISensorBridge.h" bodystart="353" bodyend="358"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1a617ef927276eea5244014372eb883f2c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool BipedalLocomotion::RobotInterface::ISensorBridge::getMagnetometerMeasurement</definition>
        <argsstring>(const std::string &amp;magName, Eigen::Ref&lt; Eigen::Vector3d &gt; magMeasurement, OptionalDoubleRef receiveTimeInSeconds={})</argsstring>
        <name>getMagnetometerMeasurement</name>
        <reimplementedby refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1a20fe4d0e6d278b88a31fa3085cb63e8b">getMagnetometerMeasurement</reimplementedby>
        <param>
          <type>const std::string &amp;</type>
          <declname>magName</declname>
        </param>
        <param>
          <type>Eigen::Ref&lt; Eigen::Vector3d &gt;</type>
          <declname>magMeasurement</declname>
        </param>
        <param>
          <type>OptionalDoubleRef</type>
          <declname>receiveTimeInSeconds</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Get magentometer measurement in tesla. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">magName</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the magnetometer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">magMeasurement</parametername>
</parameternamelist>
<parameterdescription>
<para>magnetometer measurements of size 3 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">receiveTimeInSeconds</parametername>
</parameternamelist>
<parameterdescription>
<para>time at which the measurement was received </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true/false in case of success/failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/ISensorBridge.h" line="367" column="18" bodyfile="BipedalLocomotion/RobotInterface/ISensorBridge.h" bodystart="367" bodyend="372"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1a6a068e43f6eb1f149b7ef7bcac774a72" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool BipedalLocomotion::RobotInterface::ISensorBridge::getSixAxisForceTorqueMeasurement</definition>
        <argsstring>(const std::string &amp;ftName, Eigen::Ref&lt; Vector6d &gt; ftMeasurement, OptionalDoubleRef receiveTimeInSeconds={})</argsstring>
        <name>getSixAxisForceTorqueMeasurement</name>
        <reimplementedby refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1a66749025c13868754865046ac3da07cb">getSixAxisForceTorqueMeasurement</reimplementedby>
        <param>
          <type>const std::string &amp;</type>
          <declname>ftName</declname>
        </param>
        <param>
          <type>Eigen::Ref&lt; Vector6d &gt;</type>
          <declname>ftMeasurement</declname>
        </param>
        <param>
          <type>OptionalDoubleRef</type>
          <declname>receiveTimeInSeconds</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Get six axis force torque measurement. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ftName</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the FT sensor </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">ftMeasurement</parametername>
</parameternamelist>
<parameterdescription>
<para>FT measurements of size 6 containing 3d forces and 3d torques </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">receiveTimeInSeconds</parametername>
</parameternamelist>
<parameterdescription>
<para>time at which the measurement was received </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true/false in case of success/failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/ISensorBridge.h" line="381" column="18" bodyfile="BipedalLocomotion/RobotInterface/ISensorBridge.h" bodystart="381" bodyend="386"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1afb90f14995a7b0c8c102f8b43985d6b4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool BipedalLocomotion::RobotInterface::ISensorBridge::getThreeAxisForceTorqueMeasurement</definition>
        <argsstring>(const std::string &amp;ftName, Eigen::Ref&lt; Eigen::Vector3d &gt; ftMeasurement, OptionalDoubleRef receiveTimeInSeconds={})</argsstring>
        <name>getThreeAxisForceTorqueMeasurement</name>
        <reimplementedby refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1a06e36c7b2258609c441afaf786a8992c">getThreeAxisForceTorqueMeasurement</reimplementedby>
        <param>
          <type>const std::string &amp;</type>
          <declname>ftName</declname>
        </param>
        <param>
          <type>Eigen::Ref&lt; Eigen::Vector3d &gt;</type>
          <declname>ftMeasurement</declname>
        </param>
        <param>
          <type>OptionalDoubleRef</type>
          <declname>receiveTimeInSeconds</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Get three axis force-torque measurement containing normal force (N) and tangential moments (Nm) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ftName</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the FT sensor </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">ftMeasurement</parametername>
</parameternamelist>
<parameterdescription>
<para>FT measurements of size 3 containing tau_x tau_y and fz </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">receiveTimeInSeconds</parametername>
</parameternamelist>
<parameterdescription>
<para>time at which the measurement was received </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true/false in case of success/failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/ISensorBridge.h" line="396" column="18" bodyfile="BipedalLocomotion/RobotInterface/ISensorBridge.h" bodystart="396" bodyend="401"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1ae541773a584a70f1ad586a22da91703c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool BipedalLocomotion::RobotInterface::ISensorBridge::getCartesianWrench</definition>
        <argsstring>(const std::string &amp;cartesianWrenchName, Eigen::Ref&lt; Vector6d &gt; cartesianWrenchMeasurement, OptionalDoubleRef receiveTimeInSeconds={})</argsstring>
        <name>getCartesianWrench</name>
        <reimplementedby refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1a5142cbe32cde1a63595df4da1cb147e1">getCartesianWrench</reimplementedby>
        <param>
          <type>const std::string &amp;</type>
          <declname>cartesianWrenchName</declname>
        </param>
        <param>
          <type>Eigen::Ref&lt; Vector6d &gt;</type>
          <declname>cartesianWrenchMeasurement</declname>
        </param>
        <param>
          <type>OptionalDoubleRef</type>
          <declname>receiveTimeInSeconds</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Get 6D end effector wrenches in N and Nm for forces and torques respectively. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">cartesianWrenchName</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the end effector wrench </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">cartesianWrenchMeasurement</parametername>
</parameternamelist>
<parameterdescription>
<para>end effector wrench measurement of size 6 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">rreceiveTimeInSeconds</parametername>
</parameternamelist>
<parameterdescription>
<para>time at which the measurement was received </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true/false in case of success/failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/ISensorBridge.h" line="410" column="18" bodyfile="BipedalLocomotion/RobotInterface/ISensorBridge.h" bodystart="410" bodyend="415"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1a9844da390618ef67e8dde314c4fee4a5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool BipedalLocomotion::RobotInterface::ISensorBridge::getTemperature</definition>
        <argsstring>(const std::string &amp;temperatureSensorName, double &amp;temperature, OptionalDoubleRef receiveTimeInSeconds={})</argsstring>
        <name>getTemperature</name>
        <reimplementedby refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1a2d34946341578f1f3bcad7c2bcd69586">getTemperature</reimplementedby>
        <param>
          <type>const std::string &amp;</type>
          <declname>temperatureSensorName</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>temperature</declname>
        </param>
        <param>
          <type>OptionalDoubleRef</type>
          <declname>receiveTimeInSeconds</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Get temperature measurement. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">temperatureSensorName</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the temperature sensor </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">temperature</parametername>
</parameternamelist>
<parameterdescription>
<para>temperature measurement </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">receiveTimeInSeconds</parametername>
</parameternamelist>
<parameterdescription>
<para>time at which the measurement was received </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true/false in case of success/failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/ISensorBridge.h" line="424" column="18" bodyfile="BipedalLocomotion/RobotInterface/ISensorBridge.h" bodystart="424" bodyend="429"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1aecfb22aae3634befc8dc3b3592325484" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual BipedalLocomotion::RobotInterface::ISensorBridge::~ISensorBridge</definition>
        <argsstring>()=default</argsstring>
        <name>~ISensorBridge</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/ISensorBridge.h" line="434" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1a41fab351db0d88b6a40c08294ab83f50" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool BipedalLocomotion::RobotInterface::ISensorBridge::getMotorCurrent</definition>
        <argsstring>(const std::string &amp;jointName, double &amp;motorCurrent, OptionalDoubleRef receiveTimeInSeconds={})</argsstring>
        <name>getMotorCurrent</name>
        <reimplementedby refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1ac346d428d98a915c180eefa88e77c4f5">getMotorCurrent</reimplementedby>
        <param>
          <type>const std::string &amp;</type>
          <declname>jointName</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>motorCurrent</declname>
        </param>
        <param>
          <type>OptionalDoubleRef</type>
          <declname>receiveTimeInSeconds</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Get motor currents in ampere. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">jointName</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the joint </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">motorCurrent</parametername>
</parameternamelist>
<parameterdescription>
<para>motor current in ampere </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">receiveTimeInSeconds</parametername>
</parameternamelist>
<parameterdescription>
<para>time at which the measurement was received </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true/false in case of success/failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/ISensorBridge.h" line="497" column="18" bodyfile="BipedalLocomotion/RobotInterface/ISensorBridge.h" bodystart="497" bodyend="502"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1ac7ccad5b61eb4d5d04dbe4ff1392937b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool BipedalLocomotion::RobotInterface::ISensorBridge::getMotorCurrents</definition>
        <argsstring>(Eigen::Ref&lt; Eigen::VectorXd &gt; motorCurrents, OptionalDoubleRef receiveTimeInSeconds={})</argsstring>
        <name>getMotorCurrents</name>
        <reimplementedby refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1a06dde4e83342d5339914e775da676c73">getMotorCurrents</reimplementedby>
        <param>
          <type>Eigen::Ref&lt; Eigen::VectorXd &gt;</type>
          <declname>motorCurrents</declname>
        </param>
        <param>
          <type>OptionalDoubleRef</type>
          <declname>receiveTimeInSeconds</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Get all motors&apos; current in ampere. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">motorCurrents</parametername>
</parameternamelist>
<parameterdescription>
<para>all motors&apos; current in ampere </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">receiveTimeInSeconds</parametername>
</parameternamelist>
<parameterdescription>
<para>time at which the measurement was received </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>the size is decided at the configuration and remains fixed, and internal checks must be done at the implementation level by the Derived class. This means that the user must pass a resized argument &quot;motorCurrents&quot; to this method </para>
</simplesect>
<simplesect kind="return"><para>true/false in case of success/failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/ISensorBridge.h" line="513" column="18" bodyfile="BipedalLocomotion/RobotInterface/ISensorBridge.h" bodystart="513" bodyend="517"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1a4a44c7b9132b0020e36460ad4d1d1280" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool BipedalLocomotion::RobotInterface::ISensorBridge::getMotorPWM</definition>
        <argsstring>(const std::string &amp;jointName, double &amp;motorPWM, OptionalDoubleRef receiveTimeInSeconds={})</argsstring>
        <name>getMotorPWM</name>
        <reimplementedby refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1ab68925085e877f4bfd364633fffa2078">getMotorPWM</reimplementedby>
        <param>
          <type>const std::string &amp;</type>
          <declname>jointName</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>motorPWM</declname>
        </param>
        <param>
          <type>OptionalDoubleRef</type>
          <declname>receiveTimeInSeconds</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Get motor PWM. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">jointName</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the joint </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">motorPWM</parametername>
</parameternamelist>
<parameterdescription>
<para>motor PWM </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">receiveTimeInSeconds</parametername>
</parameternamelist>
<parameterdescription>
<para>time at which the measurement was received </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true/false in case of success/failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/ISensorBridge.h" line="526" column="18" bodyfile="BipedalLocomotion/RobotInterface/ISensorBridge.h" bodystart="526" bodyend="531"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1a7d4e7c18cb7dbae59a6091a69b1af111" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool BipedalLocomotion::RobotInterface::ISensorBridge::getMotorPWMs</definition>
        <argsstring>(Eigen::Ref&lt; Eigen::VectorXd &gt; motorPWMs, OptionalDoubleRef receiveTimeInSeconds={})</argsstring>
        <name>getMotorPWMs</name>
        <reimplementedby refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1a2e0b70850a3a51799b09d65fc3e94642">getMotorPWMs</reimplementedby>
        <param>
          <type>Eigen::Ref&lt; Eigen::VectorXd &gt;</type>
          <declname>motorPWMs</declname>
        </param>
        <param>
          <type>OptionalDoubleRef</type>
          <declname>receiveTimeInSeconds</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Get all motors&apos; PWM. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">motorPWMs</parametername>
</parameternamelist>
<parameterdescription>
<para>all motors&apos; PWM </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">receiveTimeInSeconds</parametername>
</parameternamelist>
<parameterdescription>
<para>time at which the measurement was received </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>the size is decided at the configuration and remains fixed, and internal checks must be done at the implementation level by the Derived class. This means that the user must pass a resized argument &quot;motorPWMs&quot; to this method </para>
</simplesect>
<simplesect kind="return"><para>true/false in case of success/failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/ISensorBridge.h" line="543" column="5" bodyfile="BipedalLocomotion/RobotInterface/ISensorBridge.h" bodystart="543" bodyend="546"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1a91fce22c7a03936c2615fadbf1adea3b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool BipedalLocomotion::RobotInterface::ISensorBridge::getJointTorque</definition>
        <argsstring>(const std::string &amp;jointName, double &amp;jointTorque, OptionalDoubleRef receiveTimeInSeconds={})</argsstring>
        <name>getJointTorque</name>
        <reimplementedby refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1ab06d8ce409985c47e2bcf59b6267c1ae">getJointTorque</reimplementedby>
        <param>
          <type>const std::string &amp;</type>
          <declname>jointName</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>jointTorque</declname>
        </param>
        <param>
          <type>OptionalDoubleRef</type>
          <declname>receiveTimeInSeconds</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Get joint torques in Nm. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">jointName</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the joint </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">jointTorque</parametername>
</parameternamelist>
<parameterdescription>
<para>motor torque in Nm </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">receiveTimeInSeconds</parametername>
</parameternamelist>
<parameterdescription>
<para>time at which the measurement was received </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true/false in case of success/failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/ISensorBridge.h" line="555" column="18" bodyfile="BipedalLocomotion/RobotInterface/ISensorBridge.h" bodystart="555" bodyend="560"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1a2d0d9691f82815c720357ba1159bd472" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool BipedalLocomotion::RobotInterface::ISensorBridge::getJointTorques</definition>
        <argsstring>(Eigen::Ref&lt; Eigen::VectorXd &gt; jointTorques, OptionalDoubleRef receiveTimeInSeconds={})</argsstring>
        <name>getJointTorques</name>
        <reimplementedby refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1aae0867c8a5de903041906c4ad7bedccc">getJointTorques</reimplementedby>
        <param>
          <type>Eigen::Ref&lt; Eigen::VectorXd &gt;</type>
          <declname>jointTorques</declname>
        </param>
        <param>
          <type>OptionalDoubleRef</type>
          <declname>receiveTimeInSeconds</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Get all joints&apos; torque in Nm. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">jointTorques</parametername>
</parameternamelist>
<parameterdescription>
<para>all motors&apos; torque in Nm </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">receiveTimeInSeconds</parametername>
</parameternamelist>
<parameterdescription>
<para>time at which the measurement was received </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>the size is decided at the configuration and remains fixed, and internal checks must be done at the implementation level by the Derived class. This means that the user must pass a resized argument &quot;jointTorques&quot; to this method </para>
</simplesect>
<simplesect kind="return"><para>true/false in case of success/failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/ISensorBridge.h" line="571" column="18" bodyfile="BipedalLocomotion/RobotInterface/ISensorBridge.h" bodystart="571" bodyend="575"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1acd6cec3e242e3588315c730d6b26cf71" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool BipedalLocomotion::RobotInterface::ISensorBridge::getPidPosition</definition>
        <argsstring>(const std::string &amp;jointName, double &amp;pidPosition, OptionalDoubleRef receiveTimeInSeconds={})</argsstring>
        <name>getPidPosition</name>
        <reimplementedby refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1aa1c6c07e3a5385b0b192f0f02f77bebc">getPidPosition</reimplementedby>
        <param>
          <type>const std::string &amp;</type>
          <declname>jointName</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>pidPosition</declname>
        </param>
        <param>
          <type>OptionalDoubleRef</type>
          <declname>receiveTimeInSeconds</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Get pid position in rad. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">jointName</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the joint </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pidPosition</parametername>
</parameternamelist>
<parameterdescription>
<para>pid position in radians </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">receiveTimeInSeconds</parametername>
</parameternamelist>
<parameterdescription>
<para>time at which the measurement was received </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true/false in case of success/failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/ISensorBridge.h" line="584" column="18" bodyfile="BipedalLocomotion/RobotInterface/ISensorBridge.h" bodystart="584" bodyend="589"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1ad377ee3aebf6cfc33d01dc03bf0cc952" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool BipedalLocomotion::RobotInterface::ISensorBridge::getPidPositions</definition>
        <argsstring>(Eigen::Ref&lt; Eigen::VectorXd &gt; pidPositions, OptionalDoubleRef receiveTimeInSeconds={})</argsstring>
        <name>getPidPositions</name>
        <reimplementedby refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1a386d1d0391c48bb6bb74ce778086a214">getPidPositions</reimplementedby>
        <param>
          <type>Eigen::Ref&lt; Eigen::VectorXd &gt;</type>
          <declname>pidPositions</declname>
        </param>
        <param>
          <type>OptionalDoubleRef</type>
          <declname>receiveTimeInSeconds</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Get all pid positions in rad. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">pidPositions</parametername>
</parameternamelist>
<parameterdescription>
<para>all pid positions in radians </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">receiveTimeInSeconds</parametername>
</parameternamelist>
<parameterdescription>
<para>time at which the measurement was received </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>the size is decided at the configuration and remains fixed, and internal checks must be done at the implementation level by the Derived class. This means that the user must pass a resized argument &quot;pidPositions&quot; to this method </para>
</simplesect>
<simplesect kind="return"><para>true/false in case of success/failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/ISensorBridge.h" line="600" column="18" bodyfile="BipedalLocomotion/RobotInterface/ISensorBridge.h" bodystart="600" bodyend="604"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1ab9840bc0f3578565fe397c5aeb41585c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool BipedalLocomotion::RobotInterface::ISensorBridge::getPidPositionError</definition>
        <argsstring>(const std::string &amp;jointName, double &amp;pidPositionError, OptionalDoubleRef receiveTimeInSeconds={})</argsstring>
        <name>getPidPositionError</name>
        <reimplementedby refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1ad883780f4592b71f4b44230d3d204976">getPidPositionError</reimplementedby>
        <param>
          <type>const std::string &amp;</type>
          <declname>jointName</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>pidPositionError</declname>
        </param>
        <param>
          <type>OptionalDoubleRef</type>
          <declname>receiveTimeInSeconds</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Get pid position error in rad. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">jointName</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the joint </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pidPositionError</parametername>
</parameternamelist>
<parameterdescription>
<para>pid position error in radians </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">receiveTimeInSeconds</parametername>
</parameternamelist>
<parameterdescription>
<para>time at which the measurement was received </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true/false in case of success/failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/ISensorBridge.h" line="613" column="18" bodyfile="BipedalLocomotion/RobotInterface/ISensorBridge.h" bodystart="613" bodyend="618"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1aa3b70d52b6fee2af14a77ca85ae0133b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool BipedalLocomotion::RobotInterface::ISensorBridge::getPidPositionErrors</definition>
        <argsstring>(Eigen::Ref&lt; Eigen::VectorXd &gt; pidPositionErrors, OptionalDoubleRef receiveTimeInSeconds={})</argsstring>
        <name>getPidPositionErrors</name>
        <reimplementedby refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1aaa6b1a101bc1bfb4e8d50045e90f6454">getPidPositionErrors</reimplementedby>
        <param>
          <type>Eigen::Ref&lt; Eigen::VectorXd &gt;</type>
          <declname>pidPositionErrors</declname>
        </param>
        <param>
          <type>OptionalDoubleRef</type>
          <declname>receiveTimeInSeconds</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Get all pid position errors in rad. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">pidPositionErrors</parametername>
</parameternamelist>
<parameterdescription>
<para>all pid position errors in radians </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">receiveTimeInSeconds</parametername>
</parameternamelist>
<parameterdescription>
<para>time at which the measurement was received </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>the size is decided at the configuration and remains fixed, and internal checks must be done at the implementation level by the Derived class. This means that the user must pass a resized argument &quot;pidPositionErrors&quot; to this method </para>
</simplesect>
<simplesect kind="return"><para>true/false in case of success/failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/ISensorBridge.h" line="629" column="18" bodyfile="BipedalLocomotion/RobotInterface/ISensorBridge.h" bodystart="629" bodyend="633"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1a72e11e97a72a5a48decedfbd192cfea1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool BipedalLocomotion::RobotInterface::ISensorBridge::getMotorPosition</definition>
        <argsstring>(const std::string &amp;jointName, double &amp;motorPosition, OptionalDoubleRef receiveTimeInSeconds={})</argsstring>
        <name>getMotorPosition</name>
        <reimplementedby refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1a54de0c229c806a3d9f0cb49823dc20fc">getMotorPosition</reimplementedby>
        <param>
          <type>const std::string &amp;</type>
          <declname>jointName</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>motorPosition</declname>
        </param>
        <param>
          <type>OptionalDoubleRef</type>
          <declname>receiveTimeInSeconds</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Get motor position in rad. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">jointName</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the joint </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">motorPosition</parametername>
</parameternamelist>
<parameterdescription>
<para>motor position in radians </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">receiveTimeInSeconds</parametername>
</parameternamelist>
<parameterdescription>
<para>time at which the measurement was received </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true/false in case of success/failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/ISensorBridge.h" line="642" column="18" bodyfile="BipedalLocomotion/RobotInterface/ISensorBridge.h" bodystart="642" bodyend="647"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1abb0cdee4a82755d9e1d577ffeb7c452d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool BipedalLocomotion::RobotInterface::ISensorBridge::getMotorPositions</definition>
        <argsstring>(Eigen::Ref&lt; Eigen::VectorXd &gt; motorPositions, OptionalDoubleRef receiveTimeInSeconds={})</argsstring>
        <name>getMotorPositions</name>
        <reimplementedby refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1acb689c00f3f5b1ca3f6ae2c72ebcd755">getMotorPositions</reimplementedby>
        <param>
          <type>Eigen::Ref&lt; Eigen::VectorXd &gt;</type>
          <declname>motorPositions</declname>
        </param>
        <param>
          <type>OptionalDoubleRef</type>
          <declname>receiveTimeInSeconds</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Get all motors&apos; positions in rad. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">motorPositions</parametername>
</parameternamelist>
<parameterdescription>
<para>all motors&apos; position in radians </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">receiveTimeInSeconds</parametername>
</parameternamelist>
<parameterdescription>
<para>time at which the measurement was received </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>the size is decided at the configuration and remains fixed, and internal checks must be done at the implementation level by the Derived class. This means that the user must pass a resized argument &quot;motorPositions&quot; to this method </para>
</simplesect>
<simplesect kind="return"><para>true/false in case of success/failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/ISensorBridge.h" line="658" column="18" bodyfile="BipedalLocomotion/RobotInterface/ISensorBridge.h" bodystart="658" bodyend="662"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1a0f50a232e96cc6c59a6f948594ed7160" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool BipedalLocomotion::RobotInterface::ISensorBridge::getMotorVelocity</definition>
        <argsstring>(const std::string &amp;jointName, double &amp;motorVelocity, OptionalDoubleRef receiveTimeInSeconds={})</argsstring>
        <name>getMotorVelocity</name>
        <reimplementedby refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1a42cc2c5ba8fe820225f06583598d64ae">getMotorVelocity</reimplementedby>
        <param>
          <type>const std::string &amp;</type>
          <declname>jointName</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>motorVelocity</declname>
        </param>
        <param>
          <type>OptionalDoubleRef</type>
          <declname>receiveTimeInSeconds</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Get motor velocity in rad/s. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">jointName</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the joint </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">motorVelocity</parametername>
</parameternamelist>
<parameterdescription>
<para>motor velocity in radians per second </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">receiveTimeInSeconds</parametername>
</parameternamelist>
<parameterdescription>
<para>time at which the measurement was received </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true/false in case of success/failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/ISensorBridge.h" line="671" column="18" bodyfile="BipedalLocomotion/RobotInterface/ISensorBridge.h" bodystart="671" bodyend="676"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1a20a3b9a547662ead8aa64438648fe170" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool BipedalLocomotion::RobotInterface::ISensorBridge::getMotorVelocities</definition>
        <argsstring>(Eigen::Ref&lt; Eigen::VectorXd &gt; motorVelocties, OptionalDoubleRef receiveTimeInSeconds={})</argsstring>
        <name>getMotorVelocities</name>
        <reimplementedby refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1a7b6c8db15e5b7eaadf1ed3a9d296765b">getMotorVelocities</reimplementedby>
        <param>
          <type>Eigen::Ref&lt; Eigen::VectorXd &gt;</type>
          <declname>motorVelocties</declname>
        </param>
        <param>
          <type>OptionalDoubleRef</type>
          <declname>receiveTimeInSeconds</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Get all motors&apos; velocities in rad/s. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">motorVelocties</parametername>
</parameternamelist>
<parameterdescription>
<para>all motors&apos; velocities in radians per second </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">receiveTimeInSeconds</parametername>
</parameternamelist>
<parameterdescription>
<para>time at which the measurement was received </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>the size is decided at the configuration and remains fixed, and internal checks must be done at the implementation level by the Derived class. This means that the user must pass a resized argument &quot;motorVelocties&quot; to this method </para>
</simplesect>
<simplesect kind="return"><para>true/false in case of success/failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/ISensorBridge.h" line="687" column="18" bodyfile="BipedalLocomotion/RobotInterface/ISensorBridge.h" bodystart="687" bodyend="691"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1aeef893871d9e1f2e7fb87215acf804c6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool BipedalLocomotion::RobotInterface::ISensorBridge::getMotorAcceleration</definition>
        <argsstring>(const std::string &amp;jointName, double &amp;motorAcceleration, OptionalDoubleRef receiveTimeInSeconds={})</argsstring>
        <name>getMotorAcceleration</name>
        <reimplementedby refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1a29270304583bef0106120b72d903a3cd">getMotorAcceleration</reimplementedby>
        <param>
          <type>const std::string &amp;</type>
          <declname>jointName</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>motorAcceleration</declname>
        </param>
        <param>
          <type>OptionalDoubleRef</type>
          <declname>receiveTimeInSeconds</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Get motor acceleration in rad/s^2. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">jointName</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the joint </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">motorAcceleration</parametername>
</parameternamelist>
<parameterdescription>
<para>motor acceleration in radians per second squared </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">receiveTimeInSeconds</parametername>
</parameternamelist>
<parameterdescription>
<para>time at which the measurement was received </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true/false in case of success/failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/ISensorBridge.h" line="700" column="18" bodyfile="BipedalLocomotion/RobotInterface/ISensorBridge.h" bodystart="700" bodyend="705"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1a371ce08830f823788cf4d9ca96c15dbe" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool BipedalLocomotion::RobotInterface::ISensorBridge::getMotorAccelerations</definition>
        <argsstring>(Eigen::Ref&lt; Eigen::VectorXd &gt; motorAccelerations, OptionalDoubleRef receiveTimeInSeconds={})</argsstring>
        <name>getMotorAccelerations</name>
        <reimplementedby refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1a92ebdab8ae337b9658d413856da3a36b">getMotorAccelerations</reimplementedby>
        <param>
          <type>Eigen::Ref&lt; Eigen::VectorXd &gt;</type>
          <declname>motorAccelerations</declname>
        </param>
        <param>
          <type>OptionalDoubleRef</type>
          <declname>receiveTimeInSeconds</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Get all motors&apos; accelerations in rad/s^2. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">motorAccelerations</parametername>
</parameternamelist>
<parameterdescription>
<para>all motors&apos; accelerations in radians per second squared </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">receiveTimeInSeconds</parametername>
</parameternamelist>
<parameterdescription>
<para>time at which the measurement was received </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>the size is decided at the configuration and remains fixed, and internal checks must be done at the implementation level by the Derived class. This means that the user must pass a resized argument &quot;motorAccelerations&quot; to this method </para>
</simplesect>
<simplesect kind="return"><para>true/false in case of success/failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/ISensorBridge.h" line="716" column="18" bodyfile="BipedalLocomotion/RobotInterface/ISensorBridge.h" bodystart="716" bodyend="720"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1a27442cebc43a2d0e81e75103f82990b0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool BipedalLocomotion::RobotInterface::ISensorBridge::getMotorTemperatures</definition>
        <argsstring>(Eigen::Ref&lt; Eigen::VectorXd &gt; motorTemperatures, OptionalDoubleRef receiveTimeInSeconds={})</argsstring>
        <name>getMotorTemperatures</name>
        <reimplementedby refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1aa55286d675b00d207558190b5ce411dc">getMotorTemperatures</reimplementedby>
        <param>
          <type>Eigen::Ref&lt; Eigen::VectorXd &gt;</type>
          <declname>motorTemperatures</declname>
        </param>
        <param>
          <type>OptionalDoubleRef</type>
          <declname>receiveTimeInSeconds</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Get motor temperature in degrees celsius. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">motorTemperature</parametername>
</parameternamelist>
<parameterdescription>
<para>motor temperature in degrees celsius </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">receiveTimeInSeconds</parametername>
</parameternamelist>
<parameterdescription>
<para>time at which the measurement was received </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>the size is decided at the configuration and remains fixed, and internal checks must be done at the implementation level by the Derived class. This means that the user must pass a resized argument &quot;motorTemperatures&quot; to this method </para>
</simplesect>
<simplesect kind="return"><para>true/false in case of success/failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/ISensorBridge.h" line="731" column="18" bodyfile="BipedalLocomotion/RobotInterface/ISensorBridge.h" bodystart="731" bodyend="735"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1a975c3d127759bf2a5a6a86eb17b54907" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool BipedalLocomotion::RobotInterface::ISensorBridge::getMotorTemperature</definition>
        <argsstring>(const std::string &amp;jointName, double &amp;motorTemperature, OptionalDoubleRef receiveTimeInSeconds={})</argsstring>
        <name>getMotorTemperature</name>
        <reimplementedby refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge_1a7794a3d6340378516d342d6c911f49b6">getMotorTemperature</reimplementedby>
        <param>
          <type>const std::string &amp;</type>
          <declname>jointName</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>motorTemperature</declname>
        </param>
        <param>
          <type>OptionalDoubleRef</type>
          <declname>receiveTimeInSeconds</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Get motor temperature in degrees celsius. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">jointName</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the joint </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">motorTemperature</parametername>
</parameternamelist>
<parameterdescription>
<para>motor temperature in degrees celsius </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">receiveTimeInSeconds</parametername>
</parameternamelist>
<parameterdescription>
<para>time at which the measurement was received </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true/false in case of success/failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/ISensorBridge.h" line="744" column="18" bodyfile="BipedalLocomotion/RobotInterface/ISensorBridge.h" bodystart="744" bodyend="749"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1a75a4cacac8252789fa054a20a548ba75" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool BipedalLocomotion::RobotInterface::ISensorBridge::populateSensorBridgeOptionsFromConfig</definition>
        <argsstring>(std::weak_ptr&lt; const ParametersHandler::IParametersHandler &gt; handler, SensorBridgeOptions &amp;sensorBridgeOptions)</argsstring>
        <name>populateSensorBridgeOptionsFromConfig</name>
        <param>
          <type>std::weak_ptr&lt; const <ref refid="classBipedalLocomotion_1_1ParametersHandler_1_1IParametersHandler" kindref="compound">ParametersHandler::IParametersHandler</ref> &gt;</type>
          <declname>handler</declname>
        </param>
        <param>
          <type><ref refid="structBipedalLocomotion_1_1RobotInterface_1_1SensorBridgeOptions" kindref="compound">SensorBridgeOptions</ref> &amp;</type>
          <declname>sensorBridgeOptions</declname>
        </param>
        <briefdescription>
<para>Helper method to maintain <ref refid="structBipedalLocomotion_1_1RobotInterface_1_1SensorBridgeOptions" kindref="compound">SensorBridgeOptions</ref> struct by populating it from the configuration parameters. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>the user may choose to use/not use this method depending on their requirements for the implementation if the user chooses to not use the method, the implementation must simply contain &quot;return true;&quot; </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handler</parametername>
</parameternamelist>
<parameterdescription>
<para>Parameters handler </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sensorBridgeOptions</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structBipedalLocomotion_1_1RobotInterface_1_1SensorBridgeOptions" kindref="compound">SensorBridgeOptions</ref> to hold the bridge options for streaming sensor measurements </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/ISensorBridge.h" line="447" column="18" bodyfile="BipedalLocomotion/RobotInterface/ISensorBridge.h" bodystart="447" bodyend="452"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1ad81d1c091fa178daf1489060c3b4756c" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool BipedalLocomotion::RobotInterface::ISensorBridge::populateSensorListsFromConfig</definition>
        <argsstring>(std::weak_ptr&lt; const ParametersHandler::IParametersHandler &gt; handler, const SensorBridgeOptions &amp;sensorBridgeOptions, SensorLists &amp;sensorLists)</argsstring>
        <name>populateSensorListsFromConfig</name>
        <param>
          <type>std::weak_ptr&lt; const <ref refid="classBipedalLocomotion_1_1ParametersHandler_1_1IParametersHandler" kindref="compound">ParametersHandler::IParametersHandler</ref> &gt;</type>
          <declname>handler</declname>
        </param>
        <param>
          <type>const <ref refid="structBipedalLocomotion_1_1RobotInterface_1_1SensorBridgeOptions" kindref="compound">SensorBridgeOptions</ref> &amp;</type>
          <declname>sensorBridgeOptions</declname>
        </param>
        <param>
          <type><ref refid="structBipedalLocomotion_1_1RobotInterface_1_1SensorLists" kindref="compound">SensorLists</ref> &amp;</type>
          <declname>sensorLists</declname>
        </param>
        <briefdescription>
<para>Helper method to maintain <ref refid="structBipedalLocomotion_1_1RobotInterface_1_1SensorLists" kindref="compound">SensorLists</ref> struct by populating it from the configuration parameters. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>the user may choose to use/not use this method depending on their requirements for the implementation if the user chooses to not use the method, the implementation must simply contain &quot;return true;&quot; </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handler</parametername>
</parameternamelist>
<parameterdescription>
<para>Parameters handler </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sensorBridgeOptions</parametername>
</parameternamelist>
<parameterdescription>
<para>configured object of <ref refid="structBipedalLocomotion_1_1RobotInterface_1_1SensorBridgeOptions" kindref="compound">SensorBridgeOptions</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sensorLists</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structBipedalLocomotion_1_1RobotInterface_1_1SensorLists" kindref="compound">SensorLists</ref> object holding list of connected sensor devices </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/ISensorBridge.h" line="465" column="5" bodyfile="BipedalLocomotion/RobotInterface/ISensorBridge.h" bodystart="465" bodyend="470"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1af951b34d0b4ff5dd51a23bf40dad488d" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool BipedalLocomotion::RobotInterface::ISensorBridge::populateSensorBridgeMetaDataFromConfig</definition>
        <argsstring>(std::weak_ptr&lt; const ParametersHandler::IParametersHandler &gt; handler, SensorBridgeMetaData &amp;sensorBridgeMetaData)</argsstring>
        <name>populateSensorBridgeMetaDataFromConfig</name>
        <param>
          <type>std::weak_ptr&lt; const <ref refid="classBipedalLocomotion_1_1ParametersHandler_1_1IParametersHandler" kindref="compound">ParametersHandler::IParametersHandler</ref> &gt;</type>
          <declname>handler</declname>
        </param>
        <param>
          <type><ref refid="structBipedalLocomotion_1_1RobotInterface_1_1SensorBridgeMetaData" kindref="compound">SensorBridgeMetaData</ref> &amp;</type>
          <declname>sensorBridgeMetaData</declname>
        </param>
        <briefdescription>
<para>Helper method to maintain <ref refid="structBipedalLocomotion_1_1RobotInterface_1_1SensorBridgeMetaData" kindref="compound">SensorBridgeMetaData</ref> struct by populating it from the configuration parameters. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>the user may choose to use/not use this method depending on their requirements for the implementation if the user chooses to not use the method, the implementation must simply contain &quot;return true;&quot; </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handler</parametername>
</parameternamelist>
<parameterdescription>
<para>Parameters handler </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sensorBridgeMetaData</parametername>
</parameternamelist>
<parameterdescription>
<para>configured object of SensorBridgeMetadata </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sensorLists</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structBipedalLocomotion_1_1RobotInterface_1_1SensorLists" kindref="compound">SensorLists</ref> object holding list of connected sensor devices </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/ISensorBridge.h" line="482" column="18" bodyfile="BipedalLocomotion/RobotInterface/ISensorBridge.h" bodystart="482" bodyend="487"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Sensor bridge interface. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>BipedalLocomotion::RobotInterface::YarpSensorBridge</label>
        <link refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpSensorBridge"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>BipedalLocomotion::RobotInterface::ISensorBridge</label>
        <link refid="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge"/>
      </node>
    </inheritancegraph>
    <location file="BipedalLocomotion/RobotInterface/ISensorBridge.h" line="93" column="1" bodyfile="BipedalLocomotion/RobotInterface/ISensorBridge.h" bodystart="94" bodyend="750"/>
    <listofallmembers>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1ae541773a584a70f1ad586a22da91703c" prot="public" virt="virtual"><scope>BipedalLocomotion::RobotInterface::ISensorBridge</scope><name>getCartesianWrench</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1a404aab5ea59c6395cfa00c7be3deef5a" prot="public" virt="virtual"><scope>BipedalLocomotion::RobotInterface::ISensorBridge</scope><name>getCartesianWrenchesList</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1a26cbfe0877a9f218f76d300f08f2fb24" prot="public" virt="virtual"><scope>BipedalLocomotion::RobotInterface::ISensorBridge</scope><name>getGyroscopeMeasure</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1a5bc92c7da3b7100b3c0ae1ef94e9197f" prot="public" virt="virtual"><scope>BipedalLocomotion::RobotInterface::ISensorBridge</scope><name>getGyroscopesList</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1ab61b60f1c9ad604667f848d8a7e56c6a" prot="public" virt="virtual"><scope>BipedalLocomotion::RobotInterface::ISensorBridge</scope><name>getIMUMeasurement</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1ab1338623e0712857aff3d21c4506a638" prot="public" virt="virtual"><scope>BipedalLocomotion::RobotInterface::ISensorBridge</scope><name>getIMUsList</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1ae17823e4da98b73bf44b06f3d0f35f31" prot="public" virt="virtual"><scope>BipedalLocomotion::RobotInterface::ISensorBridge</scope><name>getJointAcceleration</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1a8b64f44c996ec1012d8d22106d7ac375" prot="public" virt="virtual"><scope>BipedalLocomotion::RobotInterface::ISensorBridge</scope><name>getJointAccelerations</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1aebb94b2e2b4cc3045c04f69f62b2c1d1" prot="public" virt="virtual"><scope>BipedalLocomotion::RobotInterface::ISensorBridge</scope><name>getJointPosition</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1a736887f71519e65809df5963dabf0e41" prot="public" virt="virtual"><scope>BipedalLocomotion::RobotInterface::ISensorBridge</scope><name>getJointPositions</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1ac702a40c1c06091450376ac6e45a7206" prot="public" virt="virtual"><scope>BipedalLocomotion::RobotInterface::ISensorBridge</scope><name>getJointsList</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1a91fce22c7a03936c2615fadbf1adea3b" prot="public" virt="virtual"><scope>BipedalLocomotion::RobotInterface::ISensorBridge</scope><name>getJointTorque</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1a2d0d9691f82815c720357ba1159bd472" prot="public" virt="virtual"><scope>BipedalLocomotion::RobotInterface::ISensorBridge</scope><name>getJointTorques</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1ab9b237bf8588f2463336a32ee01018ee" prot="public" virt="virtual"><scope>BipedalLocomotion::RobotInterface::ISensorBridge</scope><name>getJointVelocities</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1a038b99ea62dbe5cd5ebfe347d4c0e0de" prot="public" virt="virtual"><scope>BipedalLocomotion::RobotInterface::ISensorBridge</scope><name>getJointVelocity</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1a0949583d77937eec7992e3e219870e84" prot="public" virt="virtual"><scope>BipedalLocomotion::RobotInterface::ISensorBridge</scope><name>getLinearAccelerometerMeasurement</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1acb729f74e9e13d5f1528442e9e9a212d" prot="public" virt="virtual"><scope>BipedalLocomotion::RobotInterface::ISensorBridge</scope><name>getLinearAccelerometersList</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1a617ef927276eea5244014372eb883f2c" prot="public" virt="virtual"><scope>BipedalLocomotion::RobotInterface::ISensorBridge</scope><name>getMagnetometerMeasurement</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1abd12ba8d7810a7a50f7d79b00a3d83d3" prot="public" virt="virtual"><scope>BipedalLocomotion::RobotInterface::ISensorBridge</scope><name>getMagnetometersList</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1aeef893871d9e1f2e7fb87215acf804c6" prot="public" virt="virtual"><scope>BipedalLocomotion::RobotInterface::ISensorBridge</scope><name>getMotorAcceleration</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1a371ce08830f823788cf4d9ca96c15dbe" prot="public" virt="virtual"><scope>BipedalLocomotion::RobotInterface::ISensorBridge</scope><name>getMotorAccelerations</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1a41fab351db0d88b6a40c08294ab83f50" prot="public" virt="virtual"><scope>BipedalLocomotion::RobotInterface::ISensorBridge</scope><name>getMotorCurrent</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1ac7ccad5b61eb4d5d04dbe4ff1392937b" prot="public" virt="virtual"><scope>BipedalLocomotion::RobotInterface::ISensorBridge</scope><name>getMotorCurrents</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1a72e11e97a72a5a48decedfbd192cfea1" prot="public" virt="virtual"><scope>BipedalLocomotion::RobotInterface::ISensorBridge</scope><name>getMotorPosition</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1abb0cdee4a82755d9e1d577ffeb7c452d" prot="public" virt="virtual"><scope>BipedalLocomotion::RobotInterface::ISensorBridge</scope><name>getMotorPositions</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1a4a44c7b9132b0020e36460ad4d1d1280" prot="public" virt="virtual"><scope>BipedalLocomotion::RobotInterface::ISensorBridge</scope><name>getMotorPWM</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1a7d4e7c18cb7dbae59a6091a69b1af111" prot="public" virt="virtual"><scope>BipedalLocomotion::RobotInterface::ISensorBridge</scope><name>getMotorPWMs</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1a975c3d127759bf2a5a6a86eb17b54907" prot="public" virt="virtual"><scope>BipedalLocomotion::RobotInterface::ISensorBridge</scope><name>getMotorTemperature</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1a27442cebc43a2d0e81e75103f82990b0" prot="public" virt="virtual"><scope>BipedalLocomotion::RobotInterface::ISensorBridge</scope><name>getMotorTemperatures</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1a20a3b9a547662ead8aa64438648fe170" prot="public" virt="virtual"><scope>BipedalLocomotion::RobotInterface::ISensorBridge</scope><name>getMotorVelocities</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1a0f50a232e96cc6c59a6f948594ed7160" prot="public" virt="virtual"><scope>BipedalLocomotion::RobotInterface::ISensorBridge</scope><name>getMotorVelocity</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1add94673affb8521510ac266ebf0c5185" prot="public" virt="virtual"><scope>BipedalLocomotion::RobotInterface::ISensorBridge</scope><name>getOrientationSensorMeasurement</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1a7918e657f4caec38785a1ce614529a6c" prot="public" virt="virtual"><scope>BipedalLocomotion::RobotInterface::ISensorBridge</scope><name>getOrientationSensorsList</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1acd6cec3e242e3588315c730d6b26cf71" prot="public" virt="virtual"><scope>BipedalLocomotion::RobotInterface::ISensorBridge</scope><name>getPidPosition</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1ab9840bc0f3578565fe397c5aeb41585c" prot="public" virt="virtual"><scope>BipedalLocomotion::RobotInterface::ISensorBridge</scope><name>getPidPositionError</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1aa3b70d52b6fee2af14a77ca85ae0133b" prot="public" virt="virtual"><scope>BipedalLocomotion::RobotInterface::ISensorBridge</scope><name>getPidPositionErrors</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1ad377ee3aebf6cfc33d01dc03bf0cc952" prot="public" virt="virtual"><scope>BipedalLocomotion::RobotInterface::ISensorBridge</scope><name>getPidPositions</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1a6a068e43f6eb1f149b7ef7bcac774a72" prot="public" virt="virtual"><scope>BipedalLocomotion::RobotInterface::ISensorBridge</scope><name>getSixAxisForceTorqueMeasurement</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1a4d95d80173b7dce89c6bf2ff7904e2ce" prot="public" virt="virtual"><scope>BipedalLocomotion::RobotInterface::ISensorBridge</scope><name>getSixAxisForceTorqueSensorsList</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1a9844da390618ef67e8dde314c4fee4a5" prot="public" virt="virtual"><scope>BipedalLocomotion::RobotInterface::ISensorBridge</scope><name>getTemperature</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1adbde89a822c2f343838b2b919987ca1f" prot="public" virt="virtual"><scope>BipedalLocomotion::RobotInterface::ISensorBridge</scope><name>getTemperatureSensorsList</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1afb90f14995a7b0c8c102f8b43985d6b4" prot="public" virt="virtual"><scope>BipedalLocomotion::RobotInterface::ISensorBridge</scope><name>getThreeAxisForceTorqueMeasurement</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1a48dd5094ae2efd7c119e59f2649ed972" prot="public" virt="virtual"><scope>BipedalLocomotion::RobotInterface::ISensorBridge</scope><name>getThreeAxisForceTorqueSensorsList</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1ac399abaa3e071481a313cac6df96efd9" prot="public" virt="non-virtual"><scope>BipedalLocomotion::RobotInterface::ISensorBridge</scope><name>OptionalDoubleRef</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1af951b34d0b4ff5dd51a23bf40dad488d" prot="protected" virt="virtual"><scope>BipedalLocomotion::RobotInterface::ISensorBridge</scope><name>populateSensorBridgeMetaDataFromConfig</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1a75a4cacac8252789fa054a20a548ba75" prot="protected" virt="virtual"><scope>BipedalLocomotion::RobotInterface::ISensorBridge</scope><name>populateSensorBridgeOptionsFromConfig</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1ad81d1c091fa178daf1489060c3b4756c" prot="protected" virt="virtual"><scope>BipedalLocomotion::RobotInterface::ISensorBridge</scope><name>populateSensorListsFromConfig</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1a07594468078e3f666d7a44a6fb33e1c4" prot="public" virt="non-virtual"><scope>BipedalLocomotion::RobotInterface::ISensorBridge</scope><name>shared_ptr</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1a3b4b4107634a981037efa760f91937aa" prot="public" virt="non-virtual"><scope>BipedalLocomotion::RobotInterface::ISensorBridge</scope><name>unique_ptr</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1a7435078b3d7458dfff6c9e4eb43a98b3" prot="public" virt="non-virtual"><scope>BipedalLocomotion::RobotInterface::ISensorBridge</scope><name>Vector12d</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1a1e8c492c2741354f96f509e9e22de032" prot="public" virt="non-virtual"><scope>BipedalLocomotion::RobotInterface::ISensorBridge</scope><name>Vector6d</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1a57a14eeec8ad23a41886c52b11de434b" prot="public" virt="non-virtual"><scope>BipedalLocomotion::RobotInterface::ISensorBridge</scope><name>weak_ptr</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1ISensorBridge_1aecfb22aae3634befc8dc3b3592325484" prot="public" virt="virtual"><scope>BipedalLocomotion::RobotInterface::ISensorBridge</scope><name>~ISensorBridge</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
