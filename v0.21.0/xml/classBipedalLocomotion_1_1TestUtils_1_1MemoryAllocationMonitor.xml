<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classBipedalLocomotion_1_1TestUtils_1_1MemoryAllocationMonitor" kind="class" language="C++" prot="public">
    <compoundname>BipedalLocomotion::TestUtils::MemoryAllocationMonitor</compoundname>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classBipedalLocomotion_1_1TestUtils_1_1MemoryAllocationMonitor_1ae1830e3b7e8412796c5399a359a438fc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool BipedalLocomotion::TestUtils::MemoryAllocationMonitor::monitorIsEnabled</definition>
        <argsstring>()</argsstring>
        <name>monitorIsEnabled</name>
        <briefdescription>
<para>Get if the the memory monitor is actually enabled at the compilation level. </para>
        </briefdescription>
        <detaileddescription>
<para>The monitor can be enabled (just on Linux) with the FRAMEWORK_RUN_MemoryAllocationMonitor_tests CMake variable <simplesect kind="return"><para>True if the the memory monitor is enabled, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/TestUtils/MemoryAllocationMonitor.h" line="25" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1TestUtils_1_1MemoryAllocationMonitor_1a3db3c8ba5d6baf67be3027ed54281d48" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void BipedalLocomotion::TestUtils::MemoryAllocationMonitor::startMonitor</definition>
        <argsstring>()</argsstring>
        <name>startMonitor</name>
        <briefdescription>
<para>Start monitoring the memory operations. </para>
        </briefdescription>
        <detaileddescription>
<para>This will reset all the memory operaton counters. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/TestUtils/MemoryAllocationMonitor.h" line="31" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1TestUtils_1_1MemoryAllocationMonitor_1a5065df81aa14de523bc1488a1e6e6fd7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void BipedalLocomotion::TestUtils::MemoryAllocationMonitor::endMonitor</definition>
        <argsstring>()</argsstring>
        <name>endMonitor</name>
        <briefdescription>
<para>Stop monitoring the memory operations. </para>
        </briefdescription>
        <detaileddescription>
<para>This will stop any counting of memory operations. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/TestUtils/MemoryAllocationMonitor.h" line="37" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1TestUtils_1_1MemoryAllocationMonitor_1a9b13050125bba05f80ae8d6c0f9bae36" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool BipedalLocomotion::TestUtils::MemoryAllocationMonitor::checkNoMemoryAllocationInLastMonitor</definition>
        <argsstring>()</argsstring>
        <name>checkNoMemoryAllocationInLastMonitor</name>
        <briefdescription>
<para>Check if any memory operation was performed during the last monitor. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if no memory operation were performed between the startMonitor and endMonitor calls, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/TestUtils/MemoryAllocationMonitor.h" line="43" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1TestUtils_1_1MemoryAllocationMonitor_1a7e12982ddc0220293ba7859a7cba72c3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool BipedalLocomotion::TestUtils::MemoryAllocationMonitor::endMonitorAndCheckNoMemoryAllocationInLastMonitor</definition>
        <argsstring>()</argsstring>
        <name>endMonitorAndCheckNoMemoryAllocationInLastMonitor</name>
        <briefdescription>
<para>Equivalent to calling <ref refid="classBipedalLocomotion_1_1TestUtils_1_1MemoryAllocationMonitor_1a5065df81aa14de523bc1488a1e6e6fd7" kindref="member">endMonitor()</ref> and <ref refid="classBipedalLocomotion_1_1TestUtils_1_1MemoryAllocationMonitor_1a9b13050125bba05f80ae8d6c0f9bae36" kindref="member">checkNoMemoryAllocationInLastMonitor()</ref> in sequence. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if no memory operation were performed between the startMonitor and endMonitor calls, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/TestUtils/MemoryAllocationMonitor.h" line="49" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1TestUtils_1_1MemoryAllocationMonitor_1af5caa4551c900da7b48a8a7d5f710957" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>static int32_t BipedalLocomotion::TestUtils::MemoryAllocationMonitor::getNumberOfDynamicMemoryOperationsInLastMonitor</definition>
        <argsstring>()</argsstring>
        <name>getNumberOfDynamicMemoryOperationsInLastMonitor</name>
        <briefdescription>
<para>Return the number of memory operations performed during the last monitor. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Return the number of memory operations were performed between the startMonitor and endMonitor calls. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/TestUtils/MemoryAllocationMonitor.h" line="55" column="20"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="BipedalLocomotion/TestUtils/MemoryAllocationMonitor.h" line="17" column="1" bodyfile="BipedalLocomotion/TestUtils/MemoryAllocationMonitor.h" bodystart="18" bodyend="56"/>
    <listofallmembers>
      <member refid="classBipedalLocomotion_1_1TestUtils_1_1MemoryAllocationMonitor_1a9b13050125bba05f80ae8d6c0f9bae36" prot="public" virt="non-virtual"><scope>BipedalLocomotion::TestUtils::MemoryAllocationMonitor</scope><name>checkNoMemoryAllocationInLastMonitor</name></member>
      <member refid="classBipedalLocomotion_1_1TestUtils_1_1MemoryAllocationMonitor_1a5065df81aa14de523bc1488a1e6e6fd7" prot="public" virt="non-virtual"><scope>BipedalLocomotion::TestUtils::MemoryAllocationMonitor</scope><name>endMonitor</name></member>
      <member refid="classBipedalLocomotion_1_1TestUtils_1_1MemoryAllocationMonitor_1a7e12982ddc0220293ba7859a7cba72c3" prot="public" virt="non-virtual"><scope>BipedalLocomotion::TestUtils::MemoryAllocationMonitor</scope><name>endMonitorAndCheckNoMemoryAllocationInLastMonitor</name></member>
      <member refid="classBipedalLocomotion_1_1TestUtils_1_1MemoryAllocationMonitor_1af5caa4551c900da7b48a8a7d5f710957" prot="public" virt="non-virtual"><scope>BipedalLocomotion::TestUtils::MemoryAllocationMonitor</scope><name>getNumberOfDynamicMemoryOperationsInLastMonitor</name></member>
      <member refid="classBipedalLocomotion_1_1TestUtils_1_1MemoryAllocationMonitor_1ae1830e3b7e8412796c5399a359a438fc" prot="public" virt="non-virtual"><scope>BipedalLocomotion::TestUtils::MemoryAllocationMonitor</scope><name>monitorIsEnabled</name></member>
      <member refid="classBipedalLocomotion_1_1TestUtils_1_1MemoryAllocationMonitor_1a3db3c8ba5d6baf67be3027ed54281d48" prot="public" virt="non-virtual"><scope>BipedalLocomotion::TestUtils::MemoryAllocationMonitor</scope><name>startMonitor</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
