<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classBipedalLocomotion_1_1RobotInterface_1_1YarpCameraBridge" kind="class" language="C++" prot="public">
    <compoundname>BipedalLocomotion::RobotInterface::YarpCameraBridge</compoundname>
    <basecompoundref refid="classBipedalLocomotion_1_1RobotInterface_1_1ICameraBridge" prot="public" virt="non-virtual">BipedalLocomotion::RobotInterface::ICameraBridge</basecompoundref>
    <includes local="no">BipedalLocomotion/RobotInterface/YarpCameraBridge.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classBipedalLocomotion_1_1RobotInterface_1_1YarpCameraBridge_1a81693f83366dd6337bcd8db4253467ba" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; Impl &gt;</type>
        <definition>std::unique_ptr&lt;Impl&gt; BipedalLocomotion::RobotInterface::YarpCameraBridge::m_pimpl</definition>
        <argsstring></argsstring>
        <name>m_pimpl</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/YarpCameraBridge.h" line="144" column="21" bodyfile="BipedalLocomotion/RobotInterface/YarpCameraBridge.h" bodystart="143" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1YarpCameraBridge_1a97b5ba8a7f1514d2852b9dc94dce0af0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BipedalLocomotion::RobotInterface::YarpCameraBridge::YarpCameraBridge</definition>
        <argsstring>()</argsstring>
        <name>YarpCameraBridge</name>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/YarpCameraBridge.h" line="56" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1YarpCameraBridge_1a450a60a8f09823c072747140896f91e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BipedalLocomotion::RobotInterface::YarpCameraBridge::~YarpCameraBridge</definition>
        <argsstring>()</argsstring>
        <name>~YarpCameraBridge</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/YarpCameraBridge.h" line="61" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1YarpCameraBridge_1ab940d3cdfaa1a4096142c762e1e74868" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::RobotInterface::YarpCameraBridge::initialize</definition>
        <argsstring>(std::weak_ptr&lt; const BipedalLocomotion::ParametersHandler::IParametersHandler &gt; handler) final</argsstring>
        <name>initialize</name>
        <reimplements refid="classBipedalLocomotion_1_1RobotInterface_1_1ICameraBridge_1abb42ab89afe8f0eb1f0cc3120f5bc4b3">initialize</reimplements>
        <param>
          <type>std::weak_ptr&lt; const <ref refid="classBipedalLocomotion_1_1ParametersHandler_1_1IParametersHandler" kindref="compound">BipedalLocomotion::ParametersHandler::IParametersHandler</ref> &gt;</type>
          <declname>handler</declname>
        </param>
        <briefdescription>
<para>Initialize estimator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handler</parametername>
</parameternamelist>
<parameterdescription>
<para>Parameters handler </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/YarpCameraBridge.h" line="67" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1YarpCameraBridge_1af2a0c66486efeff01f86401837a95585" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::RobotInterface::YarpCameraBridge::setDriversList</definition>
        <argsstring>(const yarp::dev::PolyDriverList &amp;deviceDriversList)</argsstring>
        <name>setDriversList</name>
        <param>
          <type>const yarp::dev::PolyDriverList &amp;</type>
          <declname>deviceDriversList</declname>
        </param>
        <briefdescription>
<para>Set the list of device drivers from which the sensor measurements need to be streamed. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>deviceDriversList</parametername>
</parameternamelist>
<parameterdescription>
<para>device drivers holding the pointer to sensor interfaces </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True/False in case of success/failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/YarpCameraBridge.h" line="74" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1YarpCameraBridge_1a331bd024381ed5c2a879d03ac75614de" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::RobotInterface::YarpCameraBridge::isValid</definition>
        <argsstring>() const final</argsstring>
        <name>isValid</name>
        <reimplements refid="classBipedalLocomotion_1_1RobotInterface_1_1ICameraBridge_1ad029283df1539db6fae56c9b0ea50ad2">isValid</reimplements>
        <briefdescription>
<para>Determines the validity of the object retrieved with getMetadata() </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if the object is valid, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/YarpCameraBridge.h" line="80" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1YarpCameraBridge_1a8705abc70daf7e47fb9808f513958a80" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structBipedalLocomotion_1_1RobotInterface_1_1CameraBridgeMetaData" kindref="compound">BipedalLocomotion::RobotInterface::CameraBridgeMetaData</ref> &amp;</type>
        <definition>const BipedalLocomotion::RobotInterface::CameraBridgeMetaData&amp; BipedalLocomotion::RobotInterface::YarpCameraBridge::get</definition>
        <argsstring>() const</argsstring>
        <name>get</name>
        <briefdescription>
<para>Get the object. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a const reference of the requested object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/YarpCameraBridge.h" line="87" column="67"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1YarpCameraBridge_1acf9b48bab358a0d307312a102bbb6f78" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>const <ref refid="structBipedalLocomotion_1_1RobotInterface_1_1CameraBridgeMetaData" kindref="compound">BipedalLocomotion::RobotInterface::CameraBridgeMetaData</ref> &amp;</type>
        <definition>const BipedalLocomotion::RobotInterface::CameraBridgeMetaData&amp; BipedalLocomotion::RobotInterface::YarpCameraBridge::getMetaData</definition>
        <argsstring>() const final</argsstring>
        <name>getMetaData</name>
        <reimplements refid="classBipedalLocomotion_1_1RobotInterface_1_1ICameraBridge_1a9e9e6eb606d25b2fff1d5c77c348aafa">getMetaData</reimplements>
        <briefdescription>
<para>Get the stored metadata. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a const reference to the metadata </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/YarpCameraBridge.h" line="93" column="67"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1YarpCameraBridge_1a5bcc48a9687e55fff28e3eb3d530631c" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::RobotInterface::YarpCameraBridge::getRGBCamerasList</definition>
        <argsstring>(std::vector&lt; std::string &gt; &amp;rgbCamerasList) final</argsstring>
        <name>getRGBCamerasList</name>
        <reimplements refid="classBipedalLocomotion_1_1RobotInterface_1_1ICameraBridge_1a18d604a503f9ba409aa1351de5fc7f1f">getRGBCamerasList</reimplements>
        <param>
          <type>std::vector&lt; std::string &gt; &amp;</type>
          <declname>rgbCamerasList</declname>
        </param>
        <briefdescription>
<para>Get rgb cameras. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">rgbCamerasList</parametername>
</parameternamelist>
<parameterdescription>
<para>list of rgb cameras attached to the bridge </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true/false in case of success/failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/YarpCameraBridge.h" line="100" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1YarpCameraBridge_1a3608f3f85a736e7cfe24e7aa0fc8b9f6" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::RobotInterface::YarpCameraBridge::getRGBDCamerasList</definition>
        <argsstring>(std::vector&lt; std::string &gt; &amp;rgbdCamerasList) final</argsstring>
        <name>getRGBDCamerasList</name>
        <reimplements refid="classBipedalLocomotion_1_1RobotInterface_1_1ICameraBridge_1a4157fc5df74981423dc29fe3afb27558">getRGBDCamerasList</reimplements>
        <param>
          <type>std::vector&lt; std::string &gt; &amp;</type>
          <declname>rgbdCamerasList</declname>
        </param>
        <briefdescription>
<para>Get RGBD cameras. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">rgbdCamerasList</parametername>
</parameternamelist>
<parameterdescription>
<para>list of depth cameras attached to the bridge </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true/false in case of success/failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/YarpCameraBridge.h" line="107" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1YarpCameraBridge_1a3a537945fb338732f19c3a5834238d43" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::RobotInterface::YarpCameraBridge::getColorImage</definition>
        <argsstring>(const std::string &amp;camName, cv::Mat &amp;colorImg, std::optional&lt; std::reference_wrapper&lt; double &gt;&gt; receiveTimeInSeconds={}) final</argsstring>
        <name>getColorImage</name>
        <reimplements refid="classBipedalLocomotion_1_1RobotInterface_1_1ICameraBridge_1a06408daf35fede203127d24e05a219a9">getColorImage</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>camName</declname>
        </param>
        <param>
          <type>cv::Mat &amp;</type>
          <declname>colorImg</declname>
        </param>
        <param>
          <type>std::optional&lt; std::reference_wrapper&lt; double &gt;&gt;</type>
          <declname>receiveTimeInSeconds</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Get color image from the camera. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">camName</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the camera </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">colorImg</parametername>
</parameternamelist>
<parameterdescription>
<para>image as cv Mat object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">receiveTimeInSeconds</parametername>
</parameternamelist>
<parameterdescription>
<para>time at which the measurement was received</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>the size is decided at the configuration and remains fixed, and internal checks must be done at the implementation level by the Derived class. This means that the user must pass a resized argument &quot;colorImg&quot; to this method</para>
</simplesect>
<simplesect kind="return"><para>true/false in case of success/failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/YarpCameraBridge.h" line="121" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1YarpCameraBridge_1a880c0bee874ee8c73b9a82764dff1417" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::RobotInterface::YarpCameraBridge::getDepthImage</definition>
        <argsstring>(const std::string &amp;camName, cv::Mat &amp;depthImg, std::optional&lt; std::reference_wrapper&lt; double &gt;&gt; receiveTimeInSeconds={}) final</argsstring>
        <name>getDepthImage</name>
        <reimplements refid="classBipedalLocomotion_1_1RobotInterface_1_1ICameraBridge_1ad267af952a3bd668f0b2bf83e72b9396">getDepthImage</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>camName</declname>
        </param>
        <param>
          <type>cv::Mat &amp;</type>
          <declname>depthImg</declname>
        </param>
        <param>
          <type>std::optional&lt; std::reference_wrapper&lt; double &gt;&gt;</type>
          <declname>receiveTimeInSeconds</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Get depth image. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">camName</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the gyroscope </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">depthImg</parametername>
</parameternamelist>
<parameterdescription>
<para>depth image as cv Mat object </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">receiveTimeInSeconds</parametername>
</parameternamelist>
<parameterdescription>
<para>time at which the measurement was received</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>the size is decided at the configuration and remains fixed, and internal checks must be done at the implementation level by the Derived class. This means that the user must pass a resized argument &quot;depthImg&quot; to this method</para>
</simplesect>
<simplesect kind="return"><para>true/false in case of success/failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/YarpCameraBridge.h" line="137" column="10"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpCameraBridge" kindref="compound">YarpCameraBridge</ref> Yarp implementation of the <ref refid="classBipedalLocomotion_1_1RobotInterface_1_1ICameraBridge" kindref="compound">ICameraBridge</ref> interface Currently available interfaces. </para>
    </briefdescription>
    <detaileddescription>
<para><itemizedlist>
<listitem><para>Depth Cameras through RGBD sensor interface</para>
</listitem><listitem><para>Camera images through OpenCV Grabber interface</para>
</listitem></itemizedlist>
</para>
<para>The <ref refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpCameraBridge" kindref="compound">YarpCameraBridge</ref> expects a list of device drivers through the yarp::dev::PolyDriverList object. Each PolyDriver object in the list is compared with the configured sensor names and the assumptions listed below to infer the sensor types and relevant interfaces in order to to read the relevant data.</para>
<para>MAJOR ASSUMPTIONS<itemizedlist>
<listitem><para>Every sensor unit(device driver) attached to this Bridge is identified by a unique name</para>
</listitem><listitem><para>The images are available through a FrameGrabber interface (RGB only) and a RGBD interface (RGB and Depth).</para>
</listitem><listitem><para>The current internal design (read all sensors in a serial fashion) may not be suitable for a heavy measurement set</para>
</listitem></itemizedlist>
</para>
<para>The parameters for writing the configuration file for this class is given as, <table rows="8" cols="5"><row>
<entry thead="yes" align='center'><para>Group   </para>
</entry><entry thead="yes" align='center'><para>Parameter   </para>
</entry><entry thead="yes" align='center'><para>Type   </para>
</entry><entry thead="yes" align='center'><para>Description   </para>
</entry><entry thead="yes" align='center'><para>Mandatory    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para>Cameras   </para>
</entry><entry thead="no" align='center'><para></para>
</entry><entry thead="no" align='center'><para></para>
</entry><entry thead="no" align='center'><para>Expects cameras to be opened either as remote frame grabber (&quot;RemoteFrameGrabber&quot;) with IFrameGrabber interface or rgbd sensor (&quot;RGBDSensorClient&quot;) with IRGBDSensor interface   </para>
</entry><entry thead="no" align='center'><para>Yes    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para></para>
</entry><entry thead="no" align='center'><para>rgbd_cameras_list   </para>
</entry><entry thead="no" align='center'><para>vector of strings   </para>
</entry><entry thead="no" align='center'><para>list containing the devices opened as RGBDSensorClients containing the IRGBD sensor interface   </para>
</entry><entry thead="no" align='center'><para>Yes    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para></para>
</entry><entry thead="no" align='center'><para>rgbd_image_width   </para>
</entry><entry thead="no" align='center'><para>vector of integers   </para>
</entry><entry thead="no" align='center'><para>list containing the image width dimensions of RGBD cameras. The list must be the same size and order as rgbd_list. If not provided, the size of the image is taken from the YarpInterface after calling <computeroutput><ref refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpCameraBridge_1af2a0c66486efeff01f86401837a95585" kindref="member">YarpCameraBridge::setDriversList</ref></computeroutput>   </para>
</entry><entry thead="no" align='center'><para>No    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para></para>
</entry><entry thead="no" align='center'><para>rgbd_image_height   </para>
</entry><entry thead="no" align='center'><para>vector of integers   </para>
</entry><entry thead="no" align='center'><para>list containing the image height dimensions of RGBD cameras. The list must be the same size and order as rgbd_list. If not provided the size of the image is taken from the YarpInterface after calling <computeroutput><ref refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpCameraBridge_1af2a0c66486efeff01f86401837a95585" kindref="member">YarpCameraBridge::setDriversList</ref></computeroutput>   </para>
</entry><entry thead="no" align='center'><para>No    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para></para>
</entry><entry thead="no" align='center'><para>rgb_cameras_list   </para>
</entry><entry thead="no" align='center'><para>vector of strings   </para>
</entry><entry thead="no" align='center'><para>list containing the devices opened as RemoteFrameGrabber devices containing the IFrameGrabber interface   </para>
</entry><entry thead="no" align='center'><para>Yes    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para></para>
</entry><entry thead="no" align='center'><para>rgb_image_width   </para>
</entry><entry thead="no" align='center'><para>vector of integers   </para>
</entry><entry thead="no" align='center'><para>list containing the image width dimensions of RGB cameras. The list must be the same size and order as rgb_list. If not provided the size of the image is taken from the YarpInterface after calling <computeroutput><ref refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpCameraBridge_1af2a0c66486efeff01f86401837a95585" kindref="member">YarpCameraBridge::setDriversList</ref></computeroutput>   </para>
</entry><entry thead="no" align='center'><para>No    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para></para>
</entry><entry thead="no" align='center'><para>rgb_image_height   </para>
</entry><entry thead="no" align='center'><para>vector of integers   </para>
</entry><entry thead="no" align='center'><para>list containing the image height dimensions of RGB cameras. The list must be the same size and order as rgb_list. If not provided the size of the image is taken from the YarpInterface after calling <computeroutput><ref refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpCameraBridge_1af2a0c66486efeff01f86401837a95585" kindref="member">YarpCameraBridge::setDriversList</ref></computeroutput>   </para>
</entry><entry thead="no" align='center'><para>No   </para>
</entry></row>
</table>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>BipedalLocomotion::RobotInterface::YarpCameraBridge</label>
        <link refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpCameraBridge"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>BipedalLocomotion::RobotInterface::ICameraBridge</label>
        <link refid="classBipedalLocomotion_1_1RobotInterface_1_1ICameraBridge"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>BipedalLocomotion::RobotInterface::YarpCameraBridge</label>
        <link refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpCameraBridge"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>BipedalLocomotion::RobotInterface::ICameraBridge</label>
        <link refid="classBipedalLocomotion_1_1RobotInterface_1_1ICameraBridge"/>
      </node>
    </collaborationgraph>
    <location file="BipedalLocomotion/RobotInterface/YarpCameraBridge.h" line="50" column="1" bodyfile="BipedalLocomotion/RobotInterface/YarpCameraBridge.h" bodystart="51" bodyend="145"/>
    <listofallmembers>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpCameraBridge_1a8705abc70daf7e47fb9808f513958a80" prot="public" virt="non-virtual"><scope>BipedalLocomotion::RobotInterface::YarpCameraBridge</scope><name>get</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpCameraBridge_1a3a537945fb338732f19c3a5834238d43" prot="public" virt="virtual"><scope>BipedalLocomotion::RobotInterface::YarpCameraBridge</scope><name>getColorImage</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpCameraBridge_1a880c0bee874ee8c73b9a82764dff1417" prot="public" virt="virtual"><scope>BipedalLocomotion::RobotInterface::YarpCameraBridge</scope><name>getDepthImage</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpCameraBridge_1acf9b48bab358a0d307312a102bbb6f78" prot="public" virt="virtual"><scope>BipedalLocomotion::RobotInterface::YarpCameraBridge</scope><name>getMetaData</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpCameraBridge_1a5bcc48a9687e55fff28e3eb3d530631c" prot="public" virt="virtual"><scope>BipedalLocomotion::RobotInterface::YarpCameraBridge</scope><name>getRGBCamerasList</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpCameraBridge_1a3608f3f85a736e7cfe24e7aa0fc8b9f6" prot="public" virt="virtual"><scope>BipedalLocomotion::RobotInterface::YarpCameraBridge</scope><name>getRGBDCamerasList</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpCameraBridge_1ab940d3cdfaa1a4096142c762e1e74868" prot="public" virt="virtual"><scope>BipedalLocomotion::RobotInterface::YarpCameraBridge</scope><name>initialize</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpCameraBridge_1a331bd024381ed5c2a879d03ac75614de" prot="public" virt="virtual"><scope>BipedalLocomotion::RobotInterface::YarpCameraBridge</scope><name>isValid</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpCameraBridge_1a81693f83366dd6337bcd8db4253467ba" prot="private" virt="non-virtual"><scope>BipedalLocomotion::RobotInterface::YarpCameraBridge</scope><name>m_pimpl</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1ICameraBridge_1a79f70ac178d2c60151483e84c000c5cb" prot="protected" virt="virtual"><scope>BipedalLocomotion::RobotInterface::YarpCameraBridge</scope><name>populateCameraBridgeMetaDataFromConfig</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1ICameraBridge_1ab3512211fe40a0ef2bad6c8354dd581d" prot="protected" virt="virtual"><scope>BipedalLocomotion::RobotInterface::YarpCameraBridge</scope><name>populateCameraBridgeOptionsFromConfig</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1ICameraBridge_1a558cc51658fe940823573793e0aea396" prot="protected" virt="virtual"><scope>BipedalLocomotion::RobotInterface::YarpCameraBridge</scope><name>populateCameraListsFromConfig</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpCameraBridge_1af2a0c66486efeff01f86401837a95585" prot="public" virt="non-virtual"><scope>BipedalLocomotion::RobotInterface::YarpCameraBridge</scope><name>setDriversList</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1ICameraBridge_1aaa69e3706400eaaa4292e2b57e81baf7" prot="public" virt="non-virtual"><scope>BipedalLocomotion::RobotInterface::YarpCameraBridge</scope><name>shared_ptr</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1ICameraBridge_1aa6d0959360199d4dca78f0e14d046793" prot="public" virt="non-virtual"><scope>BipedalLocomotion::RobotInterface::YarpCameraBridge</scope><name>unique_ptr</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1ICameraBridge_1ab535fbdd8130c0208c2f97e031f07f89" prot="public" virt="non-virtual"><scope>BipedalLocomotion::RobotInterface::YarpCameraBridge</scope><name>weak_ptr</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpCameraBridge_1a97b5ba8a7f1514d2852b9dc94dce0af0" prot="public" virt="non-virtual"><scope>BipedalLocomotion::RobotInterface::YarpCameraBridge</scope><name>YarpCameraBridge</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1ICameraBridge_1af72e9dd0ee0391e93ce4b56733c25757" prot="public" virt="virtual"><scope>BipedalLocomotion::RobotInterface::YarpCameraBridge</scope><name>~ICameraBridge</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpCameraBridge_1a450a60a8f09823c072747140896f91e9" prot="public" virt="non-virtual"><scope>BipedalLocomotion::RobotInterface::YarpCameraBridge</scope><name>~YarpCameraBridge</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
