<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classBipedalLocomotion_1_1TSID_1_1FeasibleContactWrenchTask" kind="class" language="C++" prot="public">
    <compoundname>BipedalLocomotion::TSID::FeasibleContactWrenchTask</compoundname>
    <basecompoundref refid="structBipedalLocomotion_1_1TSID_1_1TSIDLinearTask" prot="public" virt="non-virtual">BipedalLocomotion::TSID::TSIDLinearTask</basecompoundref>
    <includes local="no">BipedalLocomotion/TSID/FeasibleContactWrenchTask.h</includes>
    <innerclass refid="structBipedalLocomotion_1_1TSID_1_1FeasibleContactWrenchTask_1_1ContactWrench" prot="private">BipedalLocomotion::TSID::FeasibleContactWrenchTask::ContactWrench</innerclass>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classBipedalLocomotion_1_1TSID_1_1FeasibleContactWrenchTask_1a55394eaec7cc24a61b993730f148449d" prot="private" static="no" mutable="no">
        <type>ContactWrench</type>
        <definition>ContactWrench BipedalLocomotion::TSID::FeasibleContactWrenchTask::m_contactWrench</definition>
        <argsstring></argsstring>
        <name>m_contactWrench</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/TSID/FeasibleContactWrenchTask.h" line="44" column="19" bodyfile="BipedalLocomotion/TSID/FeasibleContactWrenchTask.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBipedalLocomotion_1_1TSID_1_1FeasibleContactWrenchTask_1a51331644e405fc919b9d1005826765e0" prot="private" static="no" mutable="no">
        <type><ref refid="classBipedalLocomotion_1_1Math_1_1ContactWrenchCone" kindref="compound">BipedalLocomotion::Math::ContactWrenchCone</ref></type>
        <definition>BipedalLocomotion::Math::ContactWrenchCone BipedalLocomotion::TSID::FeasibleContactWrenchTask::m_cone</definition>
        <argsstring></argsstring>
        <name>m_cone</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/TSID/FeasibleContactWrenchTask.h" line="46" column="48" bodyfile="BipedalLocomotion/TSID/FeasibleContactWrenchTask.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBipedalLocomotion_1_1TSID_1_1FeasibleContactWrenchTask_1a25b0345dfa99491352eb5c8f51af3100" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool BipedalLocomotion::TSID::FeasibleContactWrenchTask::m_isInitialized</definition>
        <argsstring></argsstring>
        <name>m_isInitialized</name>
        <initializer>{false}</initializer>
        <briefdescription>
<para>True if the task has been initialized. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/TSID/FeasibleContactWrenchTask.h" line="48" column="10" bodyfile="BipedalLocomotion/TSID/FeasibleContactWrenchTask.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBipedalLocomotion_1_1TSID_1_1FeasibleContactWrenchTask_1a0e8aac3be25c201b35ce23f9d90f819c" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool BipedalLocomotion::TSID::FeasibleContactWrenchTask::m_isValid</definition>
        <argsstring></argsstring>
        <name>m_isValid</name>
        <initializer>{false}</initializer>
        <briefdescription>
<para>True if the task is valid. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/TSID/FeasibleContactWrenchTask.h" line="49" column="10" bodyfile="BipedalLocomotion/TSID/FeasibleContactWrenchTask.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBipedalLocomotion_1_1TSID_1_1FeasibleContactWrenchTask_1a270c728f8db20d478c4dc5c7e06b7ae5" prot="private" static="no" mutable="no">
        <type>Eigen::MatrixXd</type>
        <definition>Eigen::MatrixXd BipedalLocomotion::TSID::FeasibleContactWrenchTask::m_AinBodyCoordinate</definition>
        <argsstring></argsstring>
        <name>m_AinBodyCoordinate</name>
        <briefdescription>
<para>Matrix A written in body frame. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/TSID/FeasibleContactWrenchTask.h" line="51" column="21" bodyfile="BipedalLocomotion/TSID/FeasibleContactWrenchTask.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBipedalLocomotion_1_1TSID_1_1FeasibleContactWrenchTask_1a545f125ac72cc9703cd557ed45583fdb" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; iDynTree::KinDynComputations &gt;</type>
        <definition>std::shared_ptr&lt;iDynTree::KinDynComputations&gt; BipedalLocomotion::TSID::FeasibleContactWrenchTask::m_kinDyn</definition>
        <argsstring></argsstring>
        <name>m_kinDyn</name>
        <briefdescription>
<para>Pointer to a KinDynComputations object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/TSID/FeasibleContactWrenchTask.h" line="53" column="21" bodyfile="BipedalLocomotion/TSID/FeasibleContactWrenchTask.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classBipedalLocomotion_1_1TSID_1_1FeasibleContactWrenchTask_1a096d9a596274a152bbfdd253bc3079ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::TSID::FeasibleContactWrenchTask::initialize</definition>
        <argsstring>(std::weak_ptr&lt; const ParametersHandler::IParametersHandler &gt; paramHandler) override</argsstring>
        <name>initialize</name>
        <reimplements refid="classBipedalLocomotion_1_1System_1_1LinearTask_1ae8bd038ace5d8bccda37b62c5712f22b">initialize</reimplements>
        <param>
          <type>std::weak_ptr&lt; const <ref refid="classBipedalLocomotion_1_1ParametersHandler_1_1IParametersHandler" kindref="compound">ParametersHandler::IParametersHandler</ref> &gt;</type>
          <declname>paramHandler</declname>
        </param>
        <briefdescription>
<para>Initialize the task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handler</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the parameter handler. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The following parameters are required: <table rows="7" cols="4"><row>
<entry thead="yes" align='center'><para>Parameter Name   </para>
</entry><entry thead="yes" align='center'><para>Type   </para>
</entry><entry thead="yes" align='center'><para>Description   </para>
</entry><entry thead="yes" align='center'><para>Mandatory    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>frame_name</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>string</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>Name of the frame associated to the contact   </para>
</entry><entry thead="no" align='center'><para>Yes    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>variable_name</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>string</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>Name of the variable contained in <computeroutput>VariablesHandler</computeroutput> describing the contact   </para>
</entry><entry thead="no" align='center'><para>Yes    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>number_of_slices</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>int</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>Number of slices used to split 90 deg.   </para>
</entry><entry thead="no" align='center'><para>Yes    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>static_friction_coefficient</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>double</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>Static friction coefficient.   </para>
</entry><entry thead="no" align='center'><para>Yes    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>foot_limits_x</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>vector&lt;double&gt;</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>x coordinate of the foot limits w.r.t the frame attached to the surface   </para>
</entry><entry thead="no" align='center'><para>Yes    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>foot_limits_y</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>vector&lt;double&gt;</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>y coordinate of the foot limits w.r.t the frame attached to the surface   </para>
</entry><entry thead="no" align='center'><para>Yes   </para>
</entry></row>
</table>
</para>
</simplesect>
<simplesect kind="return"><para>true in case of success/false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/TSID/FeasibleContactWrenchTask.h" line="71" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1TSID_1_1FeasibleContactWrenchTask_1a4579d2f58ef9835249221046347bc2a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::TSID::FeasibleContactWrenchTask::setKinDyn</definition>
        <argsstring>(std::shared_ptr&lt; iDynTree::KinDynComputations &gt; kinDyn)</argsstring>
        <name>setKinDyn</name>
        <param>
          <type>std::shared_ptr&lt; iDynTree::KinDynComputations &gt;</type>
          <declname>kinDyn</declname>
        </param>
        <briefdescription>
<para>Set the kinDynComputations object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>kinDyn</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a kinDynComputations object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True in case of success, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/TSID/FeasibleContactWrenchTask.h" line="78" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1TSID_1_1FeasibleContactWrenchTask_1a14b903533e5ed685afe108ea8eeca187" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::TSID::FeasibleContactWrenchTask::setVariablesHandler</definition>
        <argsstring>(const System::VariablesHandler &amp;variablesHandler) override</argsstring>
        <name>setVariablesHandler</name>
        <reimplements refid="classBipedalLocomotion_1_1System_1_1LinearTask_1a898c2f93e48aeeb41e29d17c17b95437">setVariablesHandler</reimplements>
        <param>
          <type>const <ref refid="classBipedalLocomotion_1_1System_1_1VariablesHandler" kindref="compound">System::VariablesHandler</ref> &amp;</type>
          <declname>variablesHandler</declname>
        </param>
        <briefdescription>
<para>Set the set of variables required by the task. </para>
        </briefdescription>
        <detaileddescription>
<para>The variables are stored in the <ref refid="classBipedalLocomotion_1_1System_1_1VariablesHandler" kindref="compound">System::VariablesHandler</ref>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>variablesHandler</parametername>
</parameternamelist>
<parameterdescription>
<para>reference to a variables handler. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The handler must contain a variable named as the parameter <computeroutput>variable_name</computeroutput> stored in the parameter handler. The variable represents the contact wrench acting of the robot. </para>
</simplesect>
<simplesect kind="return"><para>True in case of success, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/TSID/FeasibleContactWrenchTask.h" line="89" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1TSID_1_1FeasibleContactWrenchTask_1a35037493a05206a6594fc203e2f7f169" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::TSID::FeasibleContactWrenchTask::update</definition>
        <argsstring>() override</argsstring>
        <name>update</name>
        <reimplements refid="classBipedalLocomotion_1_1System_1_1LinearTask_1accd4ab19a7e8738abe53b485d8acbf1c">update</reimplements>
        <briefdescription>
<para>Update the content of the element. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True in case of success, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/TSID/FeasibleContactWrenchTask.h" line="95" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1TSID_1_1FeasibleContactWrenchTask_1ad4b34adf4fdd9e957f052c42d8ecb440" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BipedalLocomotion::TSID::FeasibleContactWrenchTask::setContactActive</definition>
        <argsstring>(bool isActive)</argsstring>
        <name>setContactActive</name>
        <param>
          <type>bool</type>
          <declname>isActive</declname>
        </param>
        <briefdescription>
<para>Set if the contact is active or not. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>isActive</parametername>
</parameternamelist>
<parameterdescription>
<para>true if the contact is active, false otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/TSID/FeasibleContactWrenchTask.h" line="101" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1TSID_1_1FeasibleContactWrenchTask_1a54644189c069a7ae4445f515770ea1d6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::size_t</type>
        <definition>std::size_t BipedalLocomotion::TSID::FeasibleContactWrenchTask::size</definition>
        <argsstring>() const override</argsstring>
        <name>size</name>
        <reimplements refid="classBipedalLocomotion_1_1System_1_1LinearTask_1a34621cd88c6d60909f09e95226f2cd67">size</reimplements>
        <briefdescription>
<para>Get the size of the task. </para>
        </briefdescription>
        <detaileddescription>
<para>(I.e the number of rows of the vector b) <simplesect kind="return"><para>the size of the task. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/TSID/FeasibleContactWrenchTask.h" line="107" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1TSID_1_1FeasibleContactWrenchTask_1af0a43ea40ca6a2458c43a91121a22182" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classBipedalLocomotion_1_1System_1_1LinearTask_1a2f9d37ec58342f227021c12a4a539748" kindref="member">Type</ref></type>
        <definition>Type BipedalLocomotion::TSID::FeasibleContactWrenchTask::type</definition>
        <argsstring>() const override</argsstring>
        <name>type</name>
        <reimplements refid="classBipedalLocomotion_1_1System_1_1LinearTask_1ac20d8e993c66663b61f587d9642f3e8a">type</reimplements>
        <briefdescription>
<para>The <ref refid="classBipedalLocomotion_1_1TSID_1_1CoMTask" kindref="compound">CoMTask</ref> is an equality task. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the size of the task. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/TSID/FeasibleContactWrenchTask.h" line="113" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1TSID_1_1FeasibleContactWrenchTask_1a0b332b35b7d5cb8b1666727470ad2970" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::TSID::FeasibleContactWrenchTask::isValid</definition>
        <argsstring>() const override</argsstring>
        <name>isValid</name>
        <reimplements refid="classBipedalLocomotion_1_1System_1_1LinearTask_1a2566bae7a097d11b420b89cdd3f2002f">isValid</reimplements>
        <briefdescription>
<para>Determines the validity of the objects retrieved with <ref refid="classBipedalLocomotion_1_1System_1_1LinearTask_1ad510fff46eb9cbbc65775b1a9490e297" kindref="member">getA()</ref> and <ref refid="classBipedalLocomotion_1_1System_1_1LinearTask_1a8c65780b85d3927038c3320d3cfca730" kindref="member">getB()</ref> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if the objects are valid, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/TSID/FeasibleContactWrenchTask.h" line="119" column="10"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="classBipedalLocomotion_1_1TSID_1_1FeasibleContactWrenchTask" kindref="compound">FeasibleContactWrenchTask</ref> is a concrete implementation of the <ref refid="structBipedalLocomotion_1_1TSID_1_1TSIDLinearTask" kindref="compound">TSIDLinearTask</ref>. </para>
    </briefdescription>
    <detaileddescription>
<para>Please use this element if you want to ensure that the contact wrench satisfies the constraints implemented in <ref refid="classBipedalLocomotion_1_1Math_1_1ContactWrenchCone" kindref="compound">BipedalLocomotion::Math::ContactWrenchCone</ref>. Differently from the <ref refid="classBipedalLocomotion_1_1Math_1_1ContactWrenchCone" kindref="compound">BipedalLocomotion::Math::ContactWrenchCone</ref> class, <ref refid="classBipedalLocomotion_1_1TSID_1_1FeasibleContactWrenchTask" kindref="compound">FeasibleContactWrenchTask</ref> requires also the positivstellensatz of the normal force written in local coordinate. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>BipedalLocomotion::TSID::TSIDLinearTask</label>
        <link refid="structBipedalLocomotion_1_1TSID_1_1TSIDLinearTask"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>BipedalLocomotion::TSID::FeasibleContactWrenchTask</label>
        <link refid="classBipedalLocomotion_1_1TSID_1_1FeasibleContactWrenchTask"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>BipedalLocomotion::System::LinearTask</label>
        <link refid="classBipedalLocomotion_1_1System_1_1LinearTask"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="5">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="2">
        <label>BipedalLocomotion::TSID::TSIDLinearTask</label>
        <link refid="structBipedalLocomotion_1_1TSID_1_1TSIDLinearTask"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>BipedalLocomotion::TSID::FeasibleContactWrenchTask</label>
        <link refid="classBipedalLocomotion_1_1TSID_1_1FeasibleContactWrenchTask"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>BipedalLocomotion::System::LinearTask</label>
        <link refid="classBipedalLocomotion_1_1System_1_1LinearTask"/>
        <childnode refid="4" relation="usage">
          <edgelabel>m_description</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>std::string</label>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="BipedalLocomotion/TSID/FeasibleContactWrenchTask.h" line="34" column="1" bodyfile="BipedalLocomotion/TSID/FeasibleContactWrenchTask.h" bodystart="35" bodyend="120"/>
    <listofallmembers>
      <member refid="classBipedalLocomotion_1_1System_1_1LinearTask_1ad510fff46eb9cbbc65775b1a9490e297" prot="public" virt="non-virtual"><scope>BipedalLocomotion::TSID::FeasibleContactWrenchTask</scope><name>getA</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1LinearTask_1a8c65780b85d3927038c3320d3cfca730" prot="public" virt="non-virtual"><scope>BipedalLocomotion::TSID::FeasibleContactWrenchTask</scope><name>getB</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1LinearTask_1a1d152be26f750d933bc07baf1344e97d" prot="public" virt="non-virtual"><scope>BipedalLocomotion::TSID::FeasibleContactWrenchTask</scope><name>getDescription</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1LinearTask_1a591be3a0f92c9e1c40ccadf85c21f739" prot="public" virt="non-virtual"><scope>BipedalLocomotion::TSID::FeasibleContactWrenchTask</scope><name>getResidual</name></member>
      <member refid="classBipedalLocomotion_1_1TSID_1_1FeasibleContactWrenchTask_1a096d9a596274a152bbfdd253bc3079ee" prot="public" virt="virtual"><scope>BipedalLocomotion::TSID::FeasibleContactWrenchTask</scope><name>initialize</name></member>
      <member refid="classBipedalLocomotion_1_1TSID_1_1FeasibleContactWrenchTask_1a0b332b35b7d5cb8b1666727470ad2970" prot="public" virt="virtual"><scope>BipedalLocomotion::TSID::FeasibleContactWrenchTask</scope><name>isValid</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1LinearTask_1aa95f6768b7cd98aab6727e2eb729a308" prot="protected" virt="non-virtual"><scope>BipedalLocomotion::TSID::FeasibleContactWrenchTask</scope><name>m_A</name></member>
      <member refid="classBipedalLocomotion_1_1TSID_1_1FeasibleContactWrenchTask_1a270c728f8db20d478c4dc5c7e06b7ae5" prot="private" virt="non-virtual"><scope>BipedalLocomotion::TSID::FeasibleContactWrenchTask</scope><name>m_AinBodyCoordinate</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1LinearTask_1a0e86b8ecde78a0d6e87fcb2c373b2151" prot="protected" virt="non-virtual"><scope>BipedalLocomotion::TSID::FeasibleContactWrenchTask</scope><name>m_b</name></member>
      <member refid="classBipedalLocomotion_1_1TSID_1_1FeasibleContactWrenchTask_1a51331644e405fc919b9d1005826765e0" prot="private" virt="non-virtual"><scope>BipedalLocomotion::TSID::FeasibleContactWrenchTask</scope><name>m_cone</name></member>
      <member refid="classBipedalLocomotion_1_1TSID_1_1FeasibleContactWrenchTask_1a55394eaec7cc24a61b993730f148449d" prot="private" virt="non-virtual"><scope>BipedalLocomotion::TSID::FeasibleContactWrenchTask</scope><name>m_contactWrench</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1LinearTask_1a5efff74f1d43a59376a9c93a0400120a" prot="protected" virt="non-virtual"><scope>BipedalLocomotion::TSID::FeasibleContactWrenchTask</scope><name>m_description</name></member>
      <member refid="classBipedalLocomotion_1_1TSID_1_1FeasibleContactWrenchTask_1a25b0345dfa99491352eb5c8f51af3100" prot="private" virt="non-virtual"><scope>BipedalLocomotion::TSID::FeasibleContactWrenchTask</scope><name>m_isInitialized</name></member>
      <member refid="classBipedalLocomotion_1_1TSID_1_1FeasibleContactWrenchTask_1a0e8aac3be25c201b35ce23f9d90f819c" prot="private" virt="non-virtual"><scope>BipedalLocomotion::TSID::FeasibleContactWrenchTask</scope><name>m_isValid</name></member>
      <member refid="classBipedalLocomotion_1_1TSID_1_1FeasibleContactWrenchTask_1a545f125ac72cc9703cd557ed45583fdb" prot="private" virt="non-virtual"><scope>BipedalLocomotion::TSID::FeasibleContactWrenchTask</scope><name>m_kinDyn</name></member>
      <member refid="classBipedalLocomotion_1_1TSID_1_1FeasibleContactWrenchTask_1ad4b34adf4fdd9e957f052c42d8ecb440" prot="public" virt="non-virtual"><scope>BipedalLocomotion::TSID::FeasibleContactWrenchTask</scope><name>setContactActive</name></member>
      <member refid="classBipedalLocomotion_1_1TSID_1_1FeasibleContactWrenchTask_1a4579d2f58ef9835249221046347bc2a0" prot="public" virt="non-virtual"><scope>BipedalLocomotion::TSID::FeasibleContactWrenchTask</scope><name>setKinDyn</name></member>
      <member refid="classBipedalLocomotion_1_1TSID_1_1FeasibleContactWrenchTask_1a14b903533e5ed685afe108ea8eeca187" prot="public" virt="virtual"><scope>BipedalLocomotion::TSID::FeasibleContactWrenchTask</scope><name>setVariablesHandler</name></member>
      <member refid="classBipedalLocomotion_1_1TSID_1_1FeasibleContactWrenchTask_1a54644189c069a7ae4445f515770ea1d6" prot="public" virt="virtual"><scope>BipedalLocomotion::TSID::FeasibleContactWrenchTask</scope><name>size</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1LinearTask_1a06fab6bb77dd556a74c76b6e57dc0ba1" prot="protected" virt="non-virtual"><scope>BipedalLocomotion::TSID::FeasibleContactWrenchTask</scope><name>subA</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1LinearTask_1ad6a0743b7902e539d634358b269741b4" prot="protected" virt="non-virtual"><scope>BipedalLocomotion::TSID::FeasibleContactWrenchTask</scope><name>subA</name></member>
      <member refid="classBipedalLocomotion_1_1TSID_1_1FeasibleContactWrenchTask_1af0a43ea40ca6a2458c43a91121a22182" prot="public" virt="virtual"><scope>BipedalLocomotion::TSID::FeasibleContactWrenchTask</scope><name>type</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1LinearTask_1a2f9d37ec58342f227021c12a4a539748" prot="public" virt="non-virtual"><scope>BipedalLocomotion::TSID::FeasibleContactWrenchTask</scope><name>Type</name></member>
      <member refid="classBipedalLocomotion_1_1TSID_1_1FeasibleContactWrenchTask_1a35037493a05206a6594fc203e2f7f169" prot="public" virt="virtual"><scope>BipedalLocomotion::TSID::FeasibleContactWrenchTask</scope><name>update</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1LinearTask_1a22edf322e7504d1a197b687d265445d7" prot="public" virt="virtual"><scope>BipedalLocomotion::TSID::FeasibleContactWrenchTask</scope><name>~LinearTask</name></member>
      <member refid="structBipedalLocomotion_1_1TSID_1_1TSIDLinearTask_1a7ba94cb320d7b4c367ed01c14ef29d73" prot="public" virt="virtual"><scope>BipedalLocomotion::TSID::FeasibleContactWrenchTask</scope><name>~TSIDLinearTask</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
