<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1_1Ref" kind="class" language="C++" prot="public">
    <compoundname>BipedalLocomotion::GenericContainer::Vector::Ref</compoundname>
    <basecompoundref refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector" prot="public" virt="non-virtual">BipedalLocomotion::GenericContainer::Vector&lt; T &gt;</basecompoundref>
    <includes local="no">BipedalLocomotion/GenericContainer/Vector.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1_1Ref_1af9aedd44a2ae16eb75d893141ede4170" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BipedalLocomotion::GenericContainer::Vector&lt; T &gt;::Ref::Ref</definition>
        <argsstring>()=delete</argsstring>
        <name>Ref</name>
        <briefdescription>
<para>A reference cannot exist on its own. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/GenericContainer/Vector.h" line="912" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1_1Ref_1a8f343fd42e25ebd19634a7fdd5fba9e1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>BipedalLocomotion::GenericContainer::Vector&lt; T &gt;::Ref::Ref</definition>
        <argsstring>(BipedalLocomotion::GenericContainer::Vector&lt; T &gt;::Ref &amp;other)</argsstring>
        <name>Ref</name>
        <param>
          <type><ref refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector" kindref="compound">BipedalLocomotion::GenericContainer::Vector</ref>&lt; T &gt;::<ref refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1_1Ref" kindref="compound">Ref</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Copy constructor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The ref from which to copy the context. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/GenericContainer/Vector.h" line="918" column="5" bodyfile="BipedalLocomotion/GenericContainer/Vector.h" bodystart="918" bodyend="922"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1_1Ref_1a5b9816f8f92f1fa8d4d5ea6f2c267fae" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>BipedalLocomotion::GenericContainer::Vector&lt; T &gt;::Ref::Ref</definition>
        <argsstring>(BipedalLocomotion::GenericContainer::Vector&lt; T &gt;::Ref &amp;&amp;other)</argsstring>
        <name>Ref</name>
        <param>
          <type><ref refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector" kindref="compound">BipedalLocomotion::GenericContainer::Vector</ref>&lt; T &gt;::<ref refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1_1Ref" kindref="compound">Ref</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Move constructor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The ref from which to get the context. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/GenericContainer/Vector.h" line="928" column="5" bodyfile="BipedalLocomotion/GenericContainer/Vector.h" bodystart="928" bodyend="932"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1_1Ref_1acecafed7a41dba62f32302fa769e6590" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>BipedalLocomotion::GenericContainer::Vector&lt; T &gt;::Ref::Ref</definition>
        <argsstring>(BipedalLocomotion::GenericContainer::Vector&lt; T &gt; &amp;other)</argsstring>
        <name>Ref</name>
        <param>
          <type><ref refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector" kindref="compound">BipedalLocomotion::GenericContainer::Vector</ref>&lt; T &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Constructor from a GenericContainer::Vector&lt;T&gt;&amp;. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The input vector from which the context is copied </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/GenericContainer/Vector.h" line="938" column="5" bodyfile="BipedalLocomotion/GenericContainer/Vector.h" bodystart="938" bodyend="942"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1_1Ref_1a76f151747e877c0e5a3261b243c00320" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>BipedalLocomotion::GenericContainer::Vector&lt; T &gt;::Ref::Ref</definition>
        <argsstring>(BipedalLocomotion::GenericContainer::Vector&lt; T &gt; &amp;&amp;other)</argsstring>
        <name>Ref</name>
        <param>
          <type><ref refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector" kindref="compound">BipedalLocomotion::GenericContainer::Vector</ref>&lt; T &gt; &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Constructor from a GenericContainer::Vector&lt;T&gt;&amp;. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The input vector from which the context is taken In principle, <ref refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1_1Ref" kindref="compound">Ref</ref> should be the reference of a Vector&lt;T&gt; which should remain alive while <ref refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1_1Ref" kindref="compound">Ref</ref> is alive. On the other hand, Vector&lt;T&gt; is only a pointer to some data which does not own. Hence, <ref refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1_1Ref" kindref="compound">Ref</ref> can remain alive even if the Vector&lt;T&gt; is deleted, provided that the original container stays alive. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/GenericContainer/Vector.h" line="952" column="5" bodyfile="BipedalLocomotion/GenericContainer/Vector.h" bodystart="952" bodyend="956"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1_1Ref_1ab3f502b73dda6c5301b21f8f6af8bf4e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector" kindref="compound">Vector</ref></type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename std::enable_if&lt;!<ref refid="structBipedalLocomotion_1_1GenericContainer_1_1is__vector" kindref="compound">GenericContainer::is_vector</ref>&lt;<ref refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector" kindref="compound">Vector</ref>&gt;::value &amp;&amp;                                                               !std::is_same&lt;<ref refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector" kindref="compound">Vector</ref>, std::string&gt;::value &amp;&amp;                                                               GenericContainer::is_vector_ref_constructible&lt;T,<ref refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector" kindref="compound">Vector</ref>&gt;::value &amp;&amp;                                                               !std::is_const_v&lt;T&gt; &amp;&amp;                                                               !is_container_const&lt;<ref refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector" kindref="compound">Vector</ref>&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type></type>
        <definition>BipedalLocomotion::GenericContainer::Vector&lt; T &gt;::Ref::Ref</definition>
        <argsstring>(Vector &amp;input)</argsstring>
        <name>Ref</name>
        <param>
          <type><ref refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>input</declname>
        </param>
        <briefdescription>
<para>Constructor from another container. </para>
        </briefdescription>
        <detaileddescription>
<para>This is used if:<itemizedlist>
<listitem><para>the input container is not a <ref refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector" kindref="compound">GenericContainer::Vector</ref>, to avoid ambiguities with other constructors</para>
</listitem><listitem><para>the input container is not a string. This allows using <ref refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1_1Ref" kindref="compound">Ref</ref> and string with overloaded methods.</para>
</listitem><listitem><para>a GenericContainer::Vector&lt;T&gt;::Ref can be constructed from the Container</para>
</listitem><listitem><para>T is not const</para>
</listitem><listitem><para>the input container is not const. </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/GenericContainer/Vector.h" line="972" column="5" bodyfile="BipedalLocomotion/GenericContainer/Vector.h" bodystart="972" bodyend="992"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1_1Ref_1a92080b7fa41786c8a5cdfd87e6513425" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector" kindref="compound">Vector</ref></type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename std::enable_if&lt;!<ref refid="structBipedalLocomotion_1_1GenericContainer_1_1is__vector" kindref="compound">GenericContainer::is_vector</ref>&lt;<ref refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector" kindref="compound">Vector</ref>&gt;::value &amp;&amp;                                                               !std::is_same&lt;<ref refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector" kindref="compound">Vector</ref>, std::string&gt;::value &amp;&amp;                                                               GenericContainer::is_vector_ref_constructible&lt;T,<ref refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector" kindref="compound">Vector</ref>&gt;::value &amp;&amp;                                                               std::is_const_v&lt;T&gt;&gt;::type</defval>
          </param>
        </templateparamlist>
        <type></type>
        <definition>BipedalLocomotion::GenericContainer::Vector&lt; T &gt;::Ref::Ref</definition>
        <argsstring>(const Vector &amp;input)</argsstring>
        <name>Ref</name>
        <param>
          <type>const <ref refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>input</declname>
        </param>
        <briefdescription>
<para>Constructor from another container. </para>
        </briefdescription>
        <detaileddescription>
<para>This is used if:<itemizedlist>
<listitem><para>the input container is not a <ref refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector" kindref="compound">GenericContainer::Vector</ref>, to avoid ambiguities with other constructors</para>
</listitem><listitem><para>the input container is not a string. This allows using <ref refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1_1Ref" kindref="compound">Ref</ref> and string with overloaded methods.</para>
</listitem><listitem><para>a GenericContainer::Vector&lt;T&gt;::Ref can be constructed from the Container</para>
</listitem><listitem><para>T is const. </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/GenericContainer/Vector.h" line="1006" column="5" bodyfile="BipedalLocomotion/GenericContainer/Vector.h" bodystart="1006" bodyend="1019"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1_1Ref_1afb75195226006054d1783077f1663ba6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BipedalLocomotion::GenericContainer::Vector&lt; T &gt;::Ref::~Ref</definition>
        <argsstring>()=default</argsstring>
        <name>~Ref</name>
        <briefdescription>
<para>Default constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/GenericContainer/Vector.h" line="1024" column="4"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1_1Ref_1adefaeb0ff580fa8e0df37cc02e98dd7c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1_1Ref" kindref="compound">Ref</ref></type>
        <definition>Ref BipedalLocomotion::GenericContainer::Vector&lt; T &gt;::Ref::operator=</definition>
        <argsstring>(const Ref &amp;other)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1_1Ref" kindref="compound">Ref</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Copy operator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other <ref refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1_1Ref" kindref="compound">Ref</ref>, from which the data is copied </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to the vector resulting from the copy. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/GenericContainer/Vector.h" line="1031" column="8" bodyfile="BipedalLocomotion/GenericContainer/Vector.h" bodystart="1031" bodyend="1034"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1_1Ref_1a6993d73d90962d5a71ee726cf3d95355" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1_1Ref" kindref="compound">Ref</ref></type>
        <definition>Ref BipedalLocomotion::GenericContainer::Vector&lt; T &gt;::Ref::operator=</definition>
        <argsstring>(Ref &amp;&amp;other)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1_1Ref" kindref="compound">Ref</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Copy operator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The other <ref refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1_1Ref" kindref="compound">Ref</ref>, from which the data is copied </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to the vector resulting from the copy. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/GenericContainer/Vector.h" line="1041" column="8" bodyfile="BipedalLocomotion/GenericContainer/Vector.h" bodystart="1041" bodyend="1044"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The class ref is used a substitution to a classical reference to a <ref refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector" kindref="compound">Vector</ref>. </para>
    </briefdescription>
    <detaileddescription>
<para>The advantage of using this, is that custom vectors (all those supported by <ref refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector" kindref="compound">GenericContainer::Vector</ref>) can be implicitly casted to <ref refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1_1Ref" kindref="compound">Ref</ref>. <ref refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1_1Ref" kindref="compound">Ref</ref> does not allocate any memory in construction, hence can be used as a parameter to be passed by copy. The = operator clones the content. <ref refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1_1Ref" kindref="compound">Ref</ref> inherits Vector&lt;T&gt;, hence it can be used as it was a Vector&lt;T&gt;. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>BipedalLocomotion::GenericContainer::Vector&lt; T &gt;</label>
        <link refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector"/>
      </node>
      <node id="1">
        <label>BipedalLocomotion::GenericContainer::Vector&lt; T &gt;::Ref</label>
        <link refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1_1Ref"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>BipedalLocomotion::GenericContainer::Vector&lt; T &gt;</label>
        <link refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector"/>
      </node>
      <node id="1">
        <label>BipedalLocomotion::GenericContainer::Vector&lt; T &gt;::Ref</label>
        <link refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1_1Ref"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="BipedalLocomotion/GenericContainer/Vector.h" line="905" column="1" bodyfile="BipedalLocomotion/GenericContainer/Vector.h" bodystart="906" bodyend="1046"/>
    <listofallmembers>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a13a3f4f64613a567063fa5a3f1c68d2a" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector::Ref</scope><name>at</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a8b84a57279bc47d198b458cce6774962" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector::Ref</scope><name>at</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a4e418475a094d986bd5990a69ad7c6a6" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector::Ref</scope><name>begin</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a97552d79f6011ead3f7fa64b40e8d392" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector::Ref</scope><name>begin</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a2372ac8afed80040cf767124aebb68b5" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector::Ref</scope><name>cbegin</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a5c1a1e786f5a5da2205568d9fbd5d434" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector::Ref</scope><name>cend</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a765def1a501657c88c91497a25687b4f" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector::Ref</scope><name>clone</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a9bc780199545553536488e69369c3f93" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector::Ref</scope><name>clone</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a27f04c6db02f3f9147ebbaf9e0d205f5" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector::Ref</scope><name>const_iterator</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1ad7a28eb6c208fae9527f728408513a43" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector::Ref</scope><name>const_reference</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1ad3f6d6328f20524f45feba0fa59dc461" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector::Ref</scope><name>const_reverse_iterator</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1ab4b546071654b7efc36c5d3a55a9395c" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector::Ref</scope><name>crbegin</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a74bf95f5058d0f2124f5a946b050dca0" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector::Ref</scope><name>crend</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1ab10fe69ae208bfa5a9ed922a8c196cf6" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector::Ref</scope><name>data</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1aed95ae0a7c5d802ff5f996ba9b7a455d" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector::Ref</scope><name>eigen_map_const_type</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1abbc623c0034000f1fec683d720d81f50" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector::Ref</scope><name>eigen_map_type</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a30f7c6df90375bffd1bc495f7979d3b1" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector::Ref</scope><name>empty</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a4d6baff8e550d857837f2b890e9a568b" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector::Ref</scope><name>end</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a3d2cce7023422701c15efa9853a58272" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector::Ref</scope><name>end</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a61093f9033b034b273c9d3245127fb8a" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector::Ref</scope><name>getVal</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a4f55fa3873e474a690ddd800afbb98e4" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector::Ref</scope><name>index_type</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a313b647e948370b83dc0c1740fd2c8f5" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector::Ref</scope><name>iterator</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1ac2417abc0abe3d0ceec513757d05e476" prot="protected" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector::Ref</scope><name>m_resizeLambda</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a85b321d378f02d91cde3dff28cd5eb66" prot="protected" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector::Ref</scope><name>m_span</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a225e077992be801e86230e08b52af380" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector::Ref</scope><name>operator()</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a04f85a234bbb581b65ad899b4baab20a" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector::Ref</scope><name>operator()</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1_1Ref_1adefaeb0ff580fa8e0df37cc02e98dd7c" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector::Ref</scope><name>operator=</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1_1Ref_1a6993d73d90962d5a71ee726cf3d95355" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector::Ref</scope><name>operator=</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1aa73fd1269957b82b21d99f28f2639eaa" prot="public" virt="non-virtual" ambiguityscope="BipedalLocomotion::GenericContainer::Vector::"><scope>BipedalLocomotion::GenericContainer::Vector::Ref</scope><name>operator=</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1aa7418456c07db18ee41e7e0e539a913f" prot="public" virt="non-virtual" ambiguityscope="BipedalLocomotion::GenericContainer::Vector::"><scope>BipedalLocomotion::GenericContainer::Vector::Ref</scope><name>operator=</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a2a89e82c87e4dfab48aafbb9024a4350" prot="public" virt="non-virtual" ambiguityscope="BipedalLocomotion::GenericContainer::Vector::"><scope>BipedalLocomotion::GenericContainer::Vector::Ref</scope><name>operator=</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1ac73657af135dd7b0144d8224c7f23d9f" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector::Ref</scope><name>operator[]</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a91c360963bed203fac33d7e3aa72508f" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector::Ref</scope><name>operator[]</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1adae1d70a1d3dca657930c035e635e851" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector::Ref</scope><name>pointer</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a47df090ff342328a85eaead732eab8f2" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector::Ref</scope><name>rbegin</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a8da9cd4ab5b707411b387d84faccc643" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector::Ref</scope><name>rbegin</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1_1Ref_1af9aedd44a2ae16eb75d893141ede4170" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector::Ref</scope><name>Ref</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1_1Ref_1a8f343fd42e25ebd19634a7fdd5fba9e1" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector::Ref</scope><name>Ref</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1_1Ref_1a5b9816f8f92f1fa8d4d5ea6f2c267fae" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector::Ref</scope><name>Ref</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1_1Ref_1acecafed7a41dba62f32302fa769e6590" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector::Ref</scope><name>Ref</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1_1Ref_1a76f151747e877c0e5a3261b243c00320" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector::Ref</scope><name>Ref</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1_1Ref_1ab3f502b73dda6c5301b21f8f6af8bf4e" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector::Ref</scope><name>Ref</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1_1Ref_1a92080b7fa41786c8a5cdfd87e6513425" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector::Ref</scope><name>Ref</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a873edd06479798e49e1bfddc84e076d0" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector::Ref</scope><name>reference</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a833502c7670d8b5d56b8e2702e567c56" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector::Ref</scope><name>rend</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1ac76fc757642e963273694237ef3b8ca5" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector::Ref</scope><name>rend</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a09f72ef6146dd541046a6a6fb9a5b623" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector::Ref</scope><name>resize</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a179fb4125500117720e5b6d9c53d497d" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector::Ref</scope><name>resize_function_type</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1ac70d5617a50f5a8856a324f9580091b9" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector::Ref</scope><name>resizeVector</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1adc6bc899e28272405795bfbf048d0df5" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector::Ref</scope><name>reverse_iterator</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a27d762527a91fc94749ba4aed34c7b27" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector::Ref</scope><name>setVal</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a4fdd476b7b135f9bbbc5bb2d16afc5b9" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector::Ref</scope><name>size</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a3474ae91039b79c5f0f97363e5119f9e" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector::Ref</scope><name>size_type</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1ae1488b2f061a0cab4b8f29d574a896ed" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector::Ref</scope><name>toEigen</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a7a2101a9a20acfdb75a2b01e2701fb6c" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector::Ref</scope><name>toEigen</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a57f6d86dc70039a4399369f060d508ae" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector::Ref</scope><name>value_type</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1aaaa9a73b59fc0db6aec86338f39e9ca9" prot="protected" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector::Ref</scope><name>Vector</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1adecc18b1ac9f884a35a0d038226f77f0" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector::Ref</scope><name>Vector</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a4bd32da4a52c5286e5a51d571cb75c7e" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector::Ref</scope><name>Vector</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a021e9da2bb8ad05425785f13d18052ad" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector::Ref</scope><name>Vector</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a0b14bc1588d8a0fb19c08c7ef2c55631" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector::Ref</scope><name>Vector</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1a57641a052b3f164b8bfc24105f9d26f1" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector::Ref</scope><name>vector_element_type</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1_1Ref_1afb75195226006054d1783077f1663ba6" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector::Ref</scope><name>~Ref</name></member>
      <member refid="classBipedalLocomotion_1_1GenericContainer_1_1Vector_1aa00909c13a587b8e433f31c1af2af8a3" prot="public" virt="non-virtual"><scope>BipedalLocomotion::GenericContainer::Vector::Ref</scope><name>~Vector</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
