<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UkfState" kind="class" language="C++" prot="public">
    <compoundname>BipedalLocomotion::Estimators::RobotDynamicsEstimator::UkfState</compoundname>
    <basecompoundref prot="public" virt="non-virtual">bfl::AdditiveStateModel</basecompoundref>
    <basecompoundref refid="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UkfModel" prot="private" virt="non-virtual">BipedalLocomotion::Estimators::RobotDynamicsEstimator::UkfModel</basecompoundref>
    <includes local="no">BipedalLocomotion/RobotDynamicsEstimator/UkfState.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UkfState_1ae5cc83ef3bb1b128bfa3258ca6440d61" prot="private" static="no" mutable="no">
        <type>Eigen::MatrixXd</type>
        <definition>Eigen::MatrixXd BipedalLocomotion::Estimators::RobotDynamicsEstimator::UkfState::m_covarianceQ</definition>
        <argsstring></argsstring>
        <name>m_covarianceQ</name>
        <briefdescription>
<para>Covariance matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotDynamicsEstimator/UkfState.h" line="42" column="21" bodyfile="BipedalLocomotion/RobotDynamicsEstimator/UkfState.h" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UkfState_1ac4b0832e20c7b5ca8c727f0b4f31ba96" prot="private" static="no" mutable="no">
        <type>Eigen::MatrixXd</type>
        <definition>Eigen::MatrixXd BipedalLocomotion::Estimators::RobotDynamicsEstimator::UkfState::m_initialCovariance</definition>
        <argsstring></argsstring>
        <name>m_initialCovariance</name>
        <briefdescription>
<para>Initial covariance matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotDynamicsEstimator/UkfState.h" line="43" column="22" bodyfile="BipedalLocomotion/RobotDynamicsEstimator/UkfState.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UkfState_1a87be84c2e7f251295272a40e20102bc2" prot="private" static="no" mutable="no">
        <type>std::size_t</type>
        <definition>std::size_t BipedalLocomotion::Estimators::RobotDynamicsEstimator::UkfState::m_stateSize</definition>
        <argsstring></argsstring>
        <name>m_stateSize</name>
        <briefdescription>
<para>Length of the state vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotDynamicsEstimator/UkfState.h" line="44" column="17" bodyfile="BipedalLocomotion/RobotDynamicsEstimator/UkfState.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UkfState_1ae5bad97ca18957f88cfe7e654fbc2009" prot="private" static="no" mutable="no">
        <type>Eigen::VectorXd</type>
        <definition>Eigen::VectorXd BipedalLocomotion::Estimators::RobotDynamicsEstimator::UkfState::m_nextState</definition>
        <argsstring></argsstring>
        <name>m_nextState</name>
        <briefdescription>
<para>Vector containing all the updated states. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotDynamicsEstimator/UkfState.h" line="45" column="21" bodyfile="BipedalLocomotion/RobotDynamicsEstimator/UkfState.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UkfState_1a0283c7b89f9b98738c4020dab96b1d52" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UkfState" kindref="compound">UkfState</ref> &gt;</type>
        <definition>static std::unique_ptr&lt;UkfState&gt; BipedalLocomotion::Estimators::RobotDynamicsEstimator::UkfState::build</definition>
        <argsstring>(std::weak_ptr&lt; const ParametersHandler::IParametersHandler &gt; handler, std::shared_ptr&lt; iDynTree::KinDynComputations &gt; kinDynFullModel, const std::vector&lt; SubModel &gt; &amp;subModelList, const std::vector&lt; std::shared_ptr&lt; KinDynWrapper &gt;&gt; &amp;kinDynWrapperList)</argsstring>
        <name>build</name>
        <param>
          <type>std::weak_ptr&lt; const <ref refid="classBipedalLocomotion_1_1ParametersHandler_1_1IParametersHandler" kindref="compound">ParametersHandler::IParametersHandler</ref> &gt;</type>
          <declname>handler</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; iDynTree::KinDynComputations &gt;</type>
          <declname>kinDynFullModel</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1SubModel" kindref="compound">SubModel</ref> &gt; &amp;</type>
          <declname>subModelList</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1KinDynWrapper" kindref="compound">KinDynWrapper</ref> &gt;&gt; &amp;</type>
          <declname>kinDynWrapperList</declname>
        </param>
        <briefdescription>
<para>Build the ukf state model. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>kinDyn</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer to an iDynTree::KinDynComputations object that will be shared among all the dynamics. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>subModelList</parametername>
</parameternamelist>
<parameterdescription>
<para>a vector of pairs (<ref refid="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1SubModel" kindref="compound">SubModel</ref>, <ref refid="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1KinDynWrapper" kindref="compound">KinDynWrapper</ref>) that will be shared among all the dynamics. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>handler</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the IParametersHandler interface. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>the following parameters are required by the class <table rows="3" cols="4"><row>
<entry thead="yes" align='center'><para>Parameter Name   </para>
</entry><entry thead="yes" align='center'><para>Type   </para>
</entry><entry thead="yes" align='center'><para>Description   </para>
</entry><entry thead="yes" align='center'><para>Mandatory    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>dT</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>double</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>Sampling time.   </para>
</entry><entry thead="no" align='center'><para>Yes    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>dynamics_list</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>vector&lt;string&gt;</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>List of dynamics composing the state model.   </para>
</entry><entry thead="no" align='center'><para>Yes   </para>
</entry></row>
</table>
For <bold>each</bold> dynamics listed in the parameter <computeroutput>dynamics_list</computeroutput> the user must specified all the parameters required by the dynamics itself but <computeroutput>dT</computeroutput> since is already specified in the parent group. Moreover the following parameters are required for each dynamics. <table rows="8" cols="5"><row>
<entry thead="yes" align='center'><para>Group   </para>
</entry><entry thead="yes" align='center'><para>Parameter Name   </para>
</entry><entry thead="yes" align='center'><para>Type   </para>
</entry><entry thead="yes" align='center'><para>Description   </para>
</entry><entry thead="yes" align='center'><para>Mandatory    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>DYNAMICS_NAME</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>name</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>string</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>String representing the name of the dynamics.   </para>
</entry><entry thead="no" align='center'><para>Yes    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>DYNAMICS_NAME</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>elements</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>std::vector&lt;string&gt;</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>Vector of strings representing the elements composing the specific dynamics.   </para>
</entry><entry thead="no" align='center'><para>No    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>DYNAMICS_NAME</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>covariance</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>std::vector&lt;double&gt;</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>Vector of double containing the covariance associated to each element.   </para>
</entry><entry thead="no" align='center'><para>Yes    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>DYNAMICS_NAME</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>dynamic_model</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>string</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>String representing the type of dynamics. The string should match the name of the C++ class.   </para>
</entry><entry thead="no" align='center'><para>Yes    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>DYNAMICS_NAME</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>friction_k0</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>std::vector&lt;double&gt;</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>Vector of double containing the coefficient k0 of the friction model of each element.   </para>
</entry><entry thead="no" align='center'><para>No    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>DYNAMICS_NAME</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>friction_k1</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>std::vector&lt;double&gt;</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>Vector of double containing the coefficient k1 of the friction model of each element.   </para>
</entry><entry thead="no" align='center'><para>No    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>DYNAMICS_NAME</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>friction_k2</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>std::vector&lt;double&gt;</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>Vector of double containing the coefficient k2 of the friction model of each element.   </para>
</entry><entry thead="no" align='center'><para>No   </para>
</entry></row>
</table>
<computeroutput>DYNAMICS_NAME</computeroutput> is a placeholder for the name of the dynamics contained in the <computeroutput>dynamics_list</computeroutput> list. <computeroutput>name</computeroutput> can contain only the following values (&quot;ds&quot;, &quot;tau_m&quot;, &quot;tau_F&quot;, &quot;*_ft_sensor&quot;, &quot;*_ft_sensor_bias&quot;, &quot;*_ft_acc_bias&quot;, &quot;*_ftgyro_bias&quot;). </para>
</simplesect>
<simplesect kind="note"><para>The following <computeroutput>ini</computeroutput> file presents an example of the configuration that can be used to build the <ref refid="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UkfState" kindref="compound">UkfState</ref>.</para>
</simplesect>
<programlisting filename=".ini"><codeline><highlight class="normal">#<sp/>UkfState.ini</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">dynamics_list<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(&quot;JOINT_VELOCITY&quot;,<sp/>&quot;FRICTION_TORQUE&quot;,<sp/>&quot;RIGHT_LEG_FT&quot;,<sp/>&quot;RIGHT_FOOT_REAR_GYRO_BIAS&quot;)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">[JOINT_VELOCITY]</highlight></codeline>
<codeline><highlight class="normal">name<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;ds&quot;</highlight></codeline>
<codeline><highlight class="normal">elements<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(&quot;r_hip_pitch&quot;,<sp/>&quot;r_hip_roll&quot;,<sp/>&quot;r_hip_yaw&quot;,<sp/>&quot;r_knee&quot;,<sp/>&quot;r_ankle_pitch&quot;,<sp/>&quot;r_ankle_roll&quot;)</highlight></codeline>
<codeline><highlight class="normal">covariance<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1e-3,<sp/>1e-3,<sp/>1e-3,<sp/>1e-3,<sp/>1e-3,<sp/>1e-3)</highlight></codeline>
<codeline><highlight class="normal">dynamic_model<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;JointVelocityDynamics&quot;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">[FRICTION_TORQUE]</highlight></codeline>
<codeline><highlight class="normal">name<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;tau_F&quot;</highlight></codeline>
<codeline><highlight class="normal">elements<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(&quot;r_hip_pitch&quot;,<sp/>&quot;r_hip_roll&quot;,<sp/>&quot;r_hip_yaw&quot;,<sp/>&quot;r_knee&quot;,<sp/>&quot;r_ankle_pitch&quot;,<sp/>&quot;r_ankle_roll&quot;)</highlight></codeline>
<codeline><highlight class="normal">covariance<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1e-2,<sp/>1e-2,<sp/>1e-2,<sp/>1e-2,<sp/>1e-2,<sp/>1e-1)</highlight></codeline>
<codeline><highlight class="normal">dynamic_model<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;FrictionTorqueDynamics&quot;</highlight></codeline>
<codeline><highlight class="normal">friction_k0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(9.106,<sp/>5.03,<sp/>4.93,<sp/>12.88,<sp/>14.34,<sp/>1.12)</highlight></codeline>
<codeline><highlight class="normal">friction_k1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(200.0,<sp/>6.9,<sp/>200.0,<sp/>59.87,<sp/>200.0,<sp/>200.0)</highlight></codeline>
<codeline><highlight class="normal">friction_k2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1.767,<sp/>5.64,<sp/>0.27,<sp/>2.0,<sp/>3.0,<sp/>0.0)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">[RIGHT_LEG_FT]</highlight></codeline>
<codeline><highlight class="normal">name<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;r_leg_ft_sensor&quot;</highlight></codeline>
<codeline><highlight class="normal">elements<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(&quot;fx&quot;,<sp/>&quot;fy&quot;,<sp/>&quot;fz&quot;,<sp/>&quot;mx&quot;,<sp/>&quot;my&quot;,<sp/>&quot;mz&quot;)</highlight></codeline>
<codeline><highlight class="normal">covariance<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1e-3,<sp/>1e-3,<sp/>1e-3,<sp/>1e-4,<sp/>1e-4,<sp/>1e-4)</highlight></codeline>
<codeline><highlight class="normal">dynamic_model<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;ZeroVelocityStateDynamics&quot;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">[RIGHT_FOOT_REAR_GYRO_BIAS]</highlight></codeline>
<codeline><highlight class="normal">name<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;r_foot_rear_ft_gyro_bias&quot;</highlight></codeline>
<codeline><highlight class="normal">elements<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(&quot;x&quot;,<sp/>&quot;y&quot;,<sp/>&quot;z&quot;)</highlight></codeline>
<codeline><highlight class="normal">covariance<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(8.2e-8,<sp/>1e-2,<sp/>9.3e-3)</highlight></codeline>
<codeline><highlight class="normal">dynamic_model<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;ZeroVelocityStateDynamics&quot;</highlight></codeline>
</programlisting> <simplesect kind="return"><para>a std::unique_ptr to the <ref refid="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UkfState" kindref="compound">UkfState</ref>. In case of issues, an empty <ref refid="classBipedalLocomotion_1_1System_1_1VariablesHandler" kindref="compound">BipedalLocomotion::System::VariablesHandler</ref> and an invalid pointer will be returned. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotDynamicsEstimator/UkfState.h" line="113" column="28"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UkfState_1ab5cd1c40b576e35ad2c572275dbe8081" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::Estimators::RobotDynamicsEstimator::UkfState::initialize</definition>
        <argsstring>(std::weak_ptr&lt; const ParametersHandler::IParametersHandler &gt; handler)</argsstring>
        <name>initialize</name>
        <param>
          <type>std::weak_ptr&lt; const <ref refid="classBipedalLocomotion_1_1ParametersHandler_1_1IParametersHandler" kindref="compound">ParametersHandler::IParametersHandler</ref> &gt;</type>
          <declname>handler</declname>
        </param>
        <briefdescription>
<para>Initialize the ukf state model. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handler</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the IParametersHandler interface. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>the following parameters are required by the class <table rows="2" cols="4"><row>
<entry thead="yes" align='center'><para>Parameter Name   </para>
</entry><entry thead="yes" align='center'><para>Type   </para>
</entry><entry thead="yes" align='center'><para>Description   </para>
</entry><entry thead="yes" align='center'><para>Mandatory    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>sampling_time</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>std::chrono::nanoseconds</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>Sampling time.   </para>
</entry><entry thead="no" align='center'><para>Yes   </para>
</entry></row>
</table>
</para>
</simplesect>
<simplesect kind="return"><para>True in case of success, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotDynamicsEstimator/UkfState.h" line="127" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UkfState_1acaa99e30db3ebecd16d362b179382970" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::Estimators::RobotDynamicsEstimator::UkfState::finalize</definition>
        <argsstring>(const System::VariablesHandler &amp;handler)</argsstring>
        <name>finalize</name>
        <param>
          <type>const <ref refid="classBipedalLocomotion_1_1System_1_1VariablesHandler" kindref="compound">System::VariablesHandler</ref> &amp;</type>
          <declname>handler</declname>
        </param>
        <briefdescription>
<para>Finalize the <ref refid="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UkfState" kindref="compound">UkfState</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handler</parametername>
</parameternamelist>
<parameterdescription>
<para>variable handler. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>You should call this method after you initialize the <ref refid="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UkfState" kindref="compound">UkfState</ref>. </para>
</simplesect>
<simplesect kind="return"><para>true in case of success, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotDynamicsEstimator/UkfState.h" line="135" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UkfState_1aaa9989719bf69312f6a848980128cbc7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BipedalLocomotion::Estimators::RobotDynamicsEstimator::UkfState::setUkfInputProvider</definition>
        <argsstring>(std::shared_ptr&lt; const UkfInputProvider &gt; ukfInputProvider)</argsstring>
        <name>setUkfInputProvider</name>
        <param>
          <type>std::shared_ptr&lt; const <ref refid="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UkfInputProvider" kindref="compound">UkfInputProvider</ref> &gt;</type>
          <declname>ukfInputProvider</declname>
        </param>
        <briefdescription>
<para>setUkfInputProvider set the provider for the ukf input. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ukfInputProvider</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer to a structure containing the joint positions and the robot base pose, velocity and acceleration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotDynamicsEstimator/UkfState.h" line="141" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UkfState_1a092c14e33f699e1736f46ee230fd0be0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classBipedalLocomotion_1_1System_1_1VariablesHandler" kindref="compound">System::VariablesHandler</ref> &amp;</type>
        <definition>const System::VariablesHandler&amp; BipedalLocomotion::Estimators::RobotDynamicsEstimator::UkfState::getStateVariableHandler</definition>
        <argsstring>() const</argsstring>
        <name>getStateVariableHandler</name>
        <briefdescription>
<para>getStateVariableHandler access the <computeroutput><ref refid="classBipedalLocomotion_1_1System_1_1VariablesHandler" kindref="compound">System::VariablesHandler</ref></computeroutput> instance created during the initialization phase. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the state variable handler containing all the state variables and their sizes and offsets. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotDynamicsEstimator/UkfState.h" line="147" column="36"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UkfState_1a6f79631bd5ad504f12da14aa745e89dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BipedalLocomotion::Estimators::RobotDynamicsEstimator::UkfState::propagate</definition>
        <argsstring>(const Eigen::Ref&lt; const Eigen::MatrixXd &gt; &amp;currentStates, Eigen::Ref&lt; Eigen::MatrixXd &gt; propagatedStates) override</argsstring>
        <name>propagate</name>
        <param>
          <type>const Eigen::Ref&lt; const Eigen::MatrixXd &gt; &amp;</type>
          <declname>currentStates</declname>
        </param>
        <param>
          <type>Eigen::Ref&lt; Eigen::MatrixXd &gt;</type>
          <declname>propagatedStates</declname>
        </param>
        <briefdescription>
<para>propagate implements the prediction phase of the ukf </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cur_states</parametername>
</parameternamelist>
<parameterdescription>
<para>is the state computed at the previous step </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prop_states</parametername>
</parameternamelist>
<parameterdescription>
<para>is the predicted state </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotDynamicsEstimator/UkfState.h" line="154" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UkfState_1af9b71712323de1a13b8a3316ee76bf81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::MatrixXd</type>
        <definition>Eigen::MatrixXd BipedalLocomotion::Estimators::RobotDynamicsEstimator::UkfState::getNoiseCovarianceMatrix</definition>
        <argsstring>() override</argsstring>
        <name>getNoiseCovarianceMatrix</name>
        <briefdescription>
<para>getNoiseCovarianceMatrix access the <computeroutput>Eigen::MatrixXd</computeroutput> representing the process covariance matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the process noise covariance matrix. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotDynamicsEstimator/UkfState.h" line="160" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UkfState_1a83258f0f53f4b63bac2abaaa23b54342" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::Estimators::RobotDynamicsEstimator::UkfState::setProperty</definition>
        <argsstring>(const std::string &amp;property) override</argsstring>
        <name>setProperty</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>property</declname>
        </param>
        <briefdescription>
<para>setProperty is not implemented. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>property</parametername>
</parameternamelist>
<parameterdescription>
<para>is a string. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>false as it is not implemented. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotDynamicsEstimator/UkfState.h" line="167" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UkfState_1a1bb99526b4040b76530e708affcc7150" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bfl::VectorDescription</type>
        <definition>bfl::VectorDescription BipedalLocomotion::Estimators::RobotDynamicsEstimator::UkfState::getStateDescription</definition>
        <argsstring>() override</argsstring>
        <name>getStateDescription</name>
        <briefdescription>
<para>getStateDescription access the <computeroutput>bfl::VectorDescription</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the state vector description. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotDynamicsEstimator/UkfState.h" line="173" column="28"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UkfState_1a7c79bcd69b5724370564b2fd0205ebd8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t BipedalLocomotion::Estimators::RobotDynamicsEstimator::UkfState::getStateSize</definition>
        <argsstring>()</argsstring>
        <name>getStateSize</name>
        <briefdescription>
<para>getStateSize access the length of the state vector. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the length of state vector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotDynamicsEstimator/UkfState.h" line="179" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UkfState_1afe13301fd258e6ab636ac9e4a7b0ab62" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Ref&lt; const Eigen::MatrixXd &gt;</type>
        <definition>Eigen::Ref&lt;const Eigen::MatrixXd&gt; BipedalLocomotion::Estimators::RobotDynamicsEstimator::UkfState::getInitialStateCovarianceMatrix</definition>
        <argsstring>() const</argsstring>
        <name>getInitialStateCovarianceMatrix</name>
        <briefdescription>
<para>getInitialStateCovarianceMatrix access the <computeroutput>Eigen::MatrixXd</computeroutput> representing the initial state covariance matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a Eigen reference to the Eigen Matrix covariance. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotDynamicsEstimator/UkfState.h" line="185" column="16"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UkfState" kindref="compound">UkfState</ref> is a concrete class that represents the State of the estimator. </para>
    </briefdescription>
    <detaileddescription>
<para>The user should build the dynamic model of the state setting a variable handler describing the variables composing the state, the list of the dynamic model associated to each variable in the variable handler, and the matrix of covariances associated to the state. The user should set also a ukf input provider which provides the inputs needed to update the ukf process dynamics. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>BipedalLocomotion::Estimators::RobotDynamicsEstimator::UkfModel</label>
        <link refid="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UkfModel"/>
      </node>
      <node id="2">
        <label>bfl::AdditiveStateModel</label>
      </node>
      <node id="1">
        <label>BipedalLocomotion::Estimators::RobotDynamicsEstimator::UkfState</label>
        <link refid="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UkfState"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="private-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="16">
        <label>K</label>
      </node>
      <node id="7">
        <label>T</label>
      </node>
      <node id="6">
        <label>std::shared_ptr&lt; T &gt;</label>
        <childnode refid="7" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>BipedalLocomotion::Estimators::RobotDynamicsEstimator::UkfModel</label>
        <link refid="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UkfModel"/>
        <childnode refid="4" relation="usage">
          <edgelabel>m_kinDynWrapperList</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>m_dynamicsList</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>m_ukfInput</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>m_kinDynFullModel</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>m_accMap</edgelabel>
          <edgelabel>m_gyroMap</edgelabel>
        </childnode>
        <childnode refid="17" relation="usage">
          <edgelabel>m_subModelList</edgelabel>
        </childnode>
        <childnode refid="19" relation="usage">
          <edgelabel>m_measurementMap</edgelabel>
        </childnode>
        <childnode refid="20" relation="usage">
          <edgelabel>m_subModelFrictionTorque</edgelabel>
          <edgelabel>m_subModelJointAcc</edgelabel>
          <edgelabel>m_subModelJointMotorTorque</edgelabel>
          <edgelabel>m_subModelJointPos</edgelabel>
          <edgelabel>m_subModelJointVel</edgelabel>
          <edgelabel>m_subModelNuDot</edgelabel>
          <edgelabel>m_totalTorqueFromContacts</edgelabel>
        </childnode>
        <childnode refid="21" relation="usage">
          <edgelabel>m_stateToUkfNames</edgelabel>
          <edgelabel>m_ukfNamesToMeasures</edgelabel>
        </childnode>
        <childnode refid="22" relation="usage">
          <edgelabel>m_FTMap</edgelabel>
          <edgelabel>m_extContactMap</edgelabel>
        </childnode>
        <childnode refid="25" relation="usage">
          <edgelabel>m_tempJacobianList</edgelabel>
        </childnode>
        <childnode refid="26" relation="usage">
          <edgelabel>m_stateVariableHandler</edgelabel>
        </childnode>
        <childnode refid="27" relation="usage">
          <edgelabel>m_ukfInputProvider</edgelabel>
        </childnode>
      </node>
      <node id="10">
        <label>BipedalLocomotion::Estimators::RobotDynamicsEstimator::UKFInput</label>
        <link refid="structBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UKFInput"/>
      </node>
      <node id="8">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="7" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="9">
        <label>std::vector&lt; std::pair&lt; std::string, std::shared_ptr&lt; BipedalLocomotion::Estimators::RobotDynamicsEstimator::Dynamics &gt; &gt; &gt;</label>
        <childnode refid="8" relation="template-instance">
          <edgelabel>&lt; std::pair&lt; std::string, std::shared_ptr&lt; BipedalLocomotion::Estimators::RobotDynamicsEstimator::Dynamics &gt; &gt; &gt;</edgelabel>
        </childnode>
      </node>
      <node id="15">
        <label>std::map&lt; K, T &gt;</label>
        <childnode refid="16" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>bfl::AdditiveStateModel</label>
      </node>
      <node id="22">
        <label>std::map&lt; std::string, BipedalLocomotion::Math::Wrench &gt;</label>
        <childnode refid="23" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="15" relation="template-instance">
          <edgelabel>&lt; std::string, BipedalLocomotion::Math::Wrench &gt;</edgelabel>
        </childnode>
      </node>
      <node id="12">
        <label>std::map&lt; std::string, Eigen::Vector3d &gt;</label>
        <childnode refid="13" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="15" relation="template-instance">
          <edgelabel>&lt; std::string, Eigen::Vector3d &gt;</edgelabel>
        </childnode>
      </node>
      <node id="14">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="5">
        <label>std::shared_ptr&lt; BipedalLocomotion::Estimators::RobotDynamicsEstimator::KinDynWrapper &gt;</label>
        <childnode refid="6" relation="template-instance">
          <edgelabel>&lt; BipedalLocomotion::Estimators::RobotDynamicsEstimator::KinDynWrapper &gt;</edgelabel>
        </childnode>
      </node>
      <node id="11">
        <label>std::shared_ptr&lt; iDynTree::KinDynComputations &gt;</label>
        <childnode refid="6" relation="template-instance">
          <edgelabel>&lt; iDynTree::KinDynComputations &gt;</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>std::vector&lt; std::shared_ptr&lt; BipedalLocomotion::Estimators::RobotDynamicsEstimator::KinDynWrapper &gt; &gt;</label>
        <childnode refid="5" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
        <childnode refid="8" relation="template-instance">
          <edgelabel>&lt; std::shared_ptr&lt; BipedalLocomotion::Estimators::RobotDynamicsEstimator::KinDynWrapper &gt; &gt;</edgelabel>
        </childnode>
      </node>
      <node id="18">
        <label>BipedalLocomotion::Estimators::RobotDynamicsEstimator::SubModel</label>
        <link refid="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1SubModel"/>
      </node>
      <node id="25">
        <label>std::vector&lt; Eigen::MatrixXd &gt;</label>
        <childnode refid="8" relation="template-instance">
          <edgelabel>&lt; Eigen::MatrixXd &gt;</edgelabel>
        </childnode>
      </node>
      <node id="17">
        <label>std::vector&lt; BipedalLocomotion::Estimators::RobotDynamicsEstimator::SubModel &gt;</label>
        <childnode refid="18" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
        <childnode refid="8" relation="template-instance">
          <edgelabel>&lt; BipedalLocomotion::Estimators::RobotDynamicsEstimator::SubModel &gt;</edgelabel>
        </childnode>
      </node>
      <node id="21">
        <label>std::map&lt; std::string, std::string &gt;</label>
        <childnode refid="13" relation="usage">
          <edgelabel>elements</edgelabel>
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="15" relation="template-instance">
          <edgelabel>&lt; std::string, std::string &gt;</edgelabel>
        </childnode>
      </node>
      <node id="20">
        <label>std::vector&lt; Eigen::VectorXd &gt;</label>
        <childnode refid="8" relation="template-instance">
          <edgelabel>&lt; Eigen::VectorXd &gt;</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>BipedalLocomotion::Estimators::RobotDynamicsEstimator::UkfState</label>
        <link refid="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UkfState"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="private-inheritance">
        </childnode>
      </node>
      <node id="23">
        <label>BipedalLocomotion::Math::Wrench&lt; Scalar &gt;</label>
        <link refid="classBipedalLocomotion_1_1Math_1_1Wrench"/>
        <childnode refid="24" relation="public-inheritance">
        </childnode>
      </node>
      <node id="19">
        <label>std::map&lt; std::string, Eigen::VectorXd &gt;</label>
        <childnode refid="13" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="15" relation="template-instance">
          <edgelabel>&lt; std::string, Eigen::VectorXd &gt;</edgelabel>
        </childnode>
      </node>
      <node id="24">
        <label>Eigen::Matrix&lt; Scalar, 6, 1 &gt;</label>
      </node>
      <node id="27">
        <label>std::shared_ptr&lt; const BipedalLocomotion::Estimators::RobotDynamicsEstimator::UkfInputProvider &gt;</label>
        <childnode refid="6" relation="template-instance">
          <edgelabel>&lt; const BipedalLocomotion::Estimators::RobotDynamicsEstimator::UkfInputProvider &gt;</edgelabel>
        </childnode>
      </node>
      <node id="26">
        <label>BipedalLocomotion::System::VariablesHandler</label>
        <link refid="classBipedalLocomotion_1_1System_1_1VariablesHandler"/>
      </node>
      <node id="13">
        <label>std::string</label>
        <childnode refid="14" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="BipedalLocomotion/RobotDynamicsEstimator/UkfState.h" line="40" column="1" bodyfile="BipedalLocomotion/RobotDynamicsEstimator/UkfState.h" bodystart="41" bodyend="186"/>
    <listofallmembers>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UkfState_1a0283c7b89f9b98738c4020dab96b1d52" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Estimators::RobotDynamicsEstimator::UkfState</scope><name>build</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UkfState_1acaa99e30db3ebecd16d362b179382970" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Estimators::RobotDynamicsEstimator::UkfState</scope><name>finalize</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UkfState_1afe13301fd258e6ab636ac9e4a7b0ab62" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Estimators::RobotDynamicsEstimator::UkfState</scope><name>getInitialStateCovarianceMatrix</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UkfState_1af9b71712323de1a13b8a3316ee76bf81" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Estimators::RobotDynamicsEstimator::UkfState</scope><name>getNoiseCovarianceMatrix</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UkfState_1a1bb99526b4040b76530e708affcc7150" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Estimators::RobotDynamicsEstimator::UkfState</scope><name>getStateDescription</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UkfState_1a7c79bcd69b5724370564b2fd0205ebd8" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Estimators::RobotDynamicsEstimator::UkfState</scope><name>getStateSize</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UkfState_1a092c14e33f699e1736f46ee230fd0be0" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Estimators::RobotDynamicsEstimator::UkfState</scope><name>getStateVariableHandler</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UkfState_1ab5cd1c40b576e35ad2c572275dbe8081" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Estimators::RobotDynamicsEstimator::UkfState</scope><name>initialize</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UkfState_1ae5cc83ef3bb1b128bfa3258ca6440d61" prot="private" virt="non-virtual"><scope>BipedalLocomotion::Estimators::RobotDynamicsEstimator::UkfState</scope><name>m_covarianceQ</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UkfState_1ac4b0832e20c7b5ca8c727f0b4f31ba96" prot="private" virt="non-virtual"><scope>BipedalLocomotion::Estimators::RobotDynamicsEstimator::UkfState</scope><name>m_initialCovariance</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UkfState_1ae5bad97ca18957f88cfe7e654fbc2009" prot="private" virt="non-virtual"><scope>BipedalLocomotion::Estimators::RobotDynamicsEstimator::UkfState</scope><name>m_nextState</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UkfState_1a87be84c2e7f251295272a40e20102bc2" prot="private" virt="non-virtual"><scope>BipedalLocomotion::Estimators::RobotDynamicsEstimator::UkfState</scope><name>m_stateSize</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UkfState_1a6f79631bd5ad504f12da14aa745e89dc" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Estimators::RobotDynamicsEstimator::UkfState</scope><name>propagate</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UkfState_1a83258f0f53f4b63bac2abaaa23b54342" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Estimators::RobotDynamicsEstimator::UkfState</scope><name>setProperty</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UkfState_1aaa9989719bf69312f6a848980128cbc7" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Estimators::RobotDynamicsEstimator::UkfState</scope><name>setUkfInputProvider</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
