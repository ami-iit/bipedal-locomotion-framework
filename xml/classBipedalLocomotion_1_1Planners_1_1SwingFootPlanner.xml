<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classBipedalLocomotion_1_1Planners_1_1SwingFootPlanner" kind="class" language="C++" prot="public">
    <compoundname>BipedalLocomotion::Planners::SwingFootPlanner</compoundname>
    <basecompoundref refid="classBipedalLocomotion_1_1System_1_1Source" prot="public" virt="non-virtual">BipedalLocomotion::System::Source&lt; SwingFootPlannerState &gt;</basecompoundref>
    <includes local="no">BipedalLocomotion/Planners/SwingFootPlanner.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classBipedalLocomotion_1_1Planners_1_1SwingFootPlanner_1a05f9acf196e6eb3d2065f348d168c54c" prot="private" static="no" mutable="no">
        <type><ref refid="structBipedalLocomotion_1_1Planners_1_1SwingFootPlannerState" kindref="compound">SwingFootPlannerState</ref></type>
        <definition>SwingFootPlannerState BipedalLocomotion::Planners::SwingFootPlanner::m_state</definition>
        <argsstring></argsstring>
        <name>m_state</name>
        <briefdescription>
<para>State of the planner. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Planners/SwingFootPlanner.h" line="46" column="27" bodyfile="BipedalLocomotion/Planners/SwingFootPlanner.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBipedalLocomotion_1_1Planners_1_1SwingFootPlanner_1ad357e7a7f386b5e07e28063956e6e032" prot="private" static="no" mutable="no">
        <type>std::chrono::nanoseconds</type>
        <definition>std::chrono::nanoseconds BipedalLocomotion::Planners::SwingFootPlanner::m_dT</definition>
        <argsstring></argsstring>
        <name>m_dT</name>
        <initializer>{std::chrono::nanoseconds::zero()}</initializer>
        <briefdescription>
<para>Sampling time of the planner. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Planners/SwingFootPlanner.h" line="48" column="30" bodyfile="BipedalLocomotion/Planners/SwingFootPlanner.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBipedalLocomotion_1_1Planners_1_1SwingFootPlanner_1a06fddc2be729d1ef4795d12b4bb62eb0" prot="private" static="no" mutable="no">
        <type>std::chrono::nanoseconds</type>
        <definition>std::chrono::nanoseconds BipedalLocomotion::Planners::SwingFootPlanner::m_currentTrajectoryTime</definition>
        <argsstring></argsstring>
        <name>m_currentTrajectoryTime</name>
        <initializer>{std::chrono::nanoseconds::zero()}</initializer>
        <briefdescription>
<para>Current time of the planner in seconds. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Planners/SwingFootPlanner.h" line="52" column="30" bodyfile="BipedalLocomotion/Planners/SwingFootPlanner.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBipedalLocomotion_1_1Planners_1_1SwingFootPlanner_1a7b438a1964aebbc631655aca706d420c" prot="private" static="no" mutable="no">
        <type>std::chrono::nanoseconds</type>
        <definition>std::chrono::nanoseconds BipedalLocomotion::Planners::SwingFootPlanner::m_staringTimeOfCurrentSO3Traj</definition>
        <argsstring></argsstring>
        <name>m_staringTimeOfCurrentSO3Traj</name>
        <initializer>{std::chrono::nanoseconds::zero()}</initializer>
        <briefdescription>
<para>Starting time of the active SO3 trajectory seconds. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Planners/SwingFootPlanner.h" line="55" column="30" bodyfile="BipedalLocomotion/Planners/SwingFootPlanner.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBipedalLocomotion_1_1Planners_1_1SwingFootPlanner_1a11f2f1f64a11a1e80c1e37d8fda93e64" prot="private" static="no" mutable="no">
        <type><ref refid="classBipedalLocomotion_1_1Contacts_1_1ContactList" kindref="compound">Contacts::ContactList</ref></type>
        <definition>Contacts::ContactList BipedalLocomotion::Planners::SwingFootPlanner::m_contactList</definition>
        <argsstring></argsstring>
        <name>m_contactList</name>
        <briefdescription>
<para>List of the contacts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Planners/SwingFootPlanner.h" line="57" column="27" bodyfile="BipedalLocomotion/Planners/SwingFootPlanner.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBipedalLocomotion_1_1Planners_1_1SwingFootPlanner_1a186b5acb5c339c1bb1b8c87ab58d06a8" prot="private" static="no" mutable="no">
        <type><ref refid="structBipedalLocomotion_1_1Contacts_1_1PlannedContact" kindref="compound">Contacts::PlannedContact</ref></type>
        <definition>Contacts::PlannedContact BipedalLocomotion::Planners::SwingFootPlanner::m_lastValidContact</definition>
        <argsstring></argsstring>
        <name>m_lastValidContact</name>
        <briefdescription>
<para>This contains the current contact if the contact is active otherwise the last contact before the current swing phase. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Planners/SwingFootPlanner.h" line="58" column="30" bodyfile="BipedalLocomotion/Planners/SwingFootPlanner.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBipedalLocomotion_1_1Planners_1_1SwingFootPlanner_1a74350935e4645a7c74479f7cb4429526" prot="private" static="no" mutable="no">
        <type><ref refid="SO3Planner_8h_1ae8bb8f4783a1e0e0c231333334c9675f" kindref="member">SO3PlannerInertial</ref></type>
        <definition>SO3PlannerInertial BipedalLocomotion::Planners::SwingFootPlanner::m_SO3Planner</definition>
        <argsstring></argsstring>
        <name>m_SO3Planner</name>
        <briefdescription>
<para>Trajectory planner in SO(3) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Planners/SwingFootPlanner.h" line="62" column="24" bodyfile="BipedalLocomotion/Planners/SwingFootPlanner.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBipedalLocomotion_1_1Planners_1_1SwingFootPlanner_1a11c4337a412dbb2d1e554958333f2373" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="classBipedalLocomotion_1_1Math_1_1Spline" kindref="compound">Math::Spline</ref>&lt; Eigen::Vector2d &gt; &gt;</type>
        <definition>std::unique_ptr&lt;Math::Spline&lt;Eigen::Vector2d&gt; &gt; BipedalLocomotion::Planners::SwingFootPlanner::m_planarPlanner</definition>
        <argsstring></argsstring>
        <name>m_planarPlanner</name>
        <briefdescription>
<para>Trajectory planner for the x y coordinates of the foot. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Planners/SwingFootPlanner.h" line="63" column="21" bodyfile="BipedalLocomotion/Planners/SwingFootPlanner.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBipedalLocomotion_1_1Planners_1_1SwingFootPlanner_1ae0a872ba21104fbb12725b328810395f" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="classBipedalLocomotion_1_1Math_1_1Spline" kindref="compound">Math::Spline</ref>&lt; Eigen::Matrix&lt; double, 1, 1 &gt; &gt; &gt;</type>
        <definition>std::unique_ptr&lt;Math::Spline&lt;Eigen::Matrix&lt;double, 1, 1&gt; &gt; &gt; BipedalLocomotion::Planners::SwingFootPlanner::m_heightPlanner</definition>
        <argsstring></argsstring>
        <name>m_heightPlanner</name>
        <briefdescription>
<para>Trajectory planner for the z coordinate of the foot. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Planners/SwingFootPlanner.h" line="66" column="21" bodyfile="BipedalLocomotion/Planners/SwingFootPlanner.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBipedalLocomotion_1_1Planners_1_1SwingFootPlanner_1ad22ed48af0c25891c140707a2308c350" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double BipedalLocomotion::Planners::SwingFootPlanner::m_stepHeight</definition>
        <argsstring></argsstring>
        <name>m_stepHeight</name>
        <initializer>{0.0}</initializer>
        <briefdescription>
<para>Height of the swing foot. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that this value could not be the maximum height of the foot. If m_footApexTime is set to 0.5 the stepHeight is the maximum of the trajectory. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Planners/SwingFootPlanner.h" line="71" column="12" bodyfile="BipedalLocomotion/Planners/SwingFootPlanner.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBipedalLocomotion_1_1Planners_1_1SwingFootPlanner_1a5a169917029284c391fb12021e22bb6a" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double BipedalLocomotion::Planners::SwingFootPlanner::m_footApexTime</definition>
        <argsstring></argsstring>
        <name>m_footApexTime</name>
        <initializer>{0.5}</initializer>
        <briefdescription>
<para>Number between 0 and 1 representing the foot apex instant. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Planners/SwingFootPlanner.h" line="74" column="12" bodyfile="BipedalLocomotion/Planners/SwingFootPlanner.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBipedalLocomotion_1_1Planners_1_1SwingFootPlanner_1a99f2231ea8f91088ac9430365fd8d83e" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double BipedalLocomotion::Planners::SwingFootPlanner::m_positionTolerance</definition>
        <argsstring></argsstring>
        <name>m_positionTolerance</name>
        <initializer>{1e-6}</initializer>
        <briefdescription>
<para>Position tolerance in <formula id="142">$m$</formula>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Planners/SwingFootPlanner.h" line="75" column="12" bodyfile="BipedalLocomotion/Planners/SwingFootPlanner.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBipedalLocomotion_1_1Planners_1_1SwingFootPlanner_1a7e8011b0b23bc63430a8b5b7b9b3fcbc" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double BipedalLocomotion::Planners::SwingFootPlanner::m_orientationTolerance</definition>
        <argsstring></argsstring>
        <name>m_orientationTolerance</name>
        <initializer>{1e-6}</initializer>
        <briefdescription>
<para>Orientation tolerance in <formula id="258">$rad$</formula>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Planners/SwingFootPlanner.h" line="76" column="12" bodyfile="BipedalLocomotion/Planners/SwingFootPlanner.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBipedalLocomotion_1_1Planners_1_1SwingFootPlanner_1a1d6a413c91862243185d1bfdf4096788" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double BipedalLocomotion::Planners::SwingFootPlanner::m_footLandingVelocity</definition>
        <argsstring></argsstring>
        <name>m_footLandingVelocity</name>
        <initializer>{0.0}</initializer>
        <briefdescription>
<para>Landing velocity in <formula id="259">$m/s$</formula>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Planners/SwingFootPlanner.h" line="78" column="12" bodyfile="BipedalLocomotion/Planners/SwingFootPlanner.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBipedalLocomotion_1_1Planners_1_1SwingFootPlanner_1ab486c43987b20ca3950f19f242c662fa" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double BipedalLocomotion::Planners::SwingFootPlanner::m_footLandingAcceleration</definition>
        <argsstring></argsstring>
        <name>m_footLandingAcceleration</name>
        <initializer>{0.0}</initializer>
        <briefdescription>
<para>Landing acceleration in <formula id="260">$m/s^2$</formula>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Planners/SwingFootPlanner.h" line="79" column="12" bodyfile="BipedalLocomotion/Planners/SwingFootPlanner.h" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBipedalLocomotion_1_1Planners_1_1SwingFootPlanner_1a9c034bd0aab0a822f696fdbe7f3d7bf7" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double BipedalLocomotion::Planners::SwingFootPlanner::m_footTakeOffVelocity</definition>
        <argsstring></argsstring>
        <name>m_footTakeOffVelocity</name>
        <initializer>{0.0}</initializer>
        <briefdescription>
<para>Take off velocity in <formula id="259">$m/s$</formula>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Planners/SwingFootPlanner.h" line="81" column="12" bodyfile="BipedalLocomotion/Planners/SwingFootPlanner.h" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBipedalLocomotion_1_1Planners_1_1SwingFootPlanner_1ad6fa5f331bffe3291d5c3a386f5de94f" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double BipedalLocomotion::Planners::SwingFootPlanner::m_footTakeOffAcceleration</definition>
        <argsstring></argsstring>
        <name>m_footTakeOffAcceleration</name>
        <initializer>{0.0}</initializer>
        <briefdescription>
<para>Take off acceleration in <formula id="260">$m/s^2$</formula>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Planners/SwingFootPlanner.h" line="82" column="12" bodyfile="BipedalLocomotion/Planners/SwingFootPlanner.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBipedalLocomotion_1_1Planners_1_1SwingFootPlanner_1a8d096eb9dc9a1d301d6e6d97a6820b4b" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool BipedalLocomotion::Planners::SwingFootPlanner::m_isOutputValid</definition>
        <argsstring></argsstring>
        <name>m_isOutputValid</name>
        <initializer>{false}</initializer>
        <briefdescription>
<para>True if getOutput returns meaningful data. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Planners/SwingFootPlanner.h" line="84" column="10" bodyfile="BipedalLocomotion/Planners/SwingFootPlanner.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classBipedalLocomotion_1_1Planners_1_1SwingFootPlanner_1ad672a37849bc692473eb69d56d747e66" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::Planners::SwingFootPlanner::evaluateSE3Traj</definition>
        <argsstring>(SwingFootPlannerState &amp;state)</argsstring>
        <name>evaluateSE3Traj</name>
        <param>
          <type><ref refid="structBipedalLocomotion_1_1Planners_1_1SwingFootPlannerState" kindref="compound">SwingFootPlannerState</ref> &amp;</type>
          <declname>state</declname>
        </param>
        <briefdescription>
<para>Evaluate the SE3 trajectory of the swing foot. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>state</parametername>
</parameternamelist>
<parameterdescription>
<para>will contain the pose, velocity and acceleration (expressed in mixed representation) of the swing foot computed at the current time instant. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True in case of success/false otherwise. </para>
</simplesect>
<simplesect kind="note"><para>This method assumes that the trajectory has been already created with the method SwingFootPlanner::createSE3Traj. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Planners/SwingFootPlanner.h" line="94" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Planners_1_1SwingFootPlanner_1a3b5d237e6b62bb4ddf87b9d164330a3d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::Planners::SwingFootPlanner::createSE3Traj</definition>
        <argsstring>(const manif::SE3d &amp;initialPose, Eigen::Ref&lt; const Eigen::Vector2d &gt; initialPlanarVelocity, Eigen::Ref&lt; const Eigen::Vector2d &gt; initialPlanarAcceleration, Eigen::Ref&lt; const Eigen::Matrix&lt; double, 1, 1 &gt;&gt; initialVerticalVelocity, Eigen::Ref&lt; const Eigen::Matrix&lt; double, 1, 1 &gt;&gt; initialVerticalAcceleration, const manif::SO3d::Tangent &amp;initialAngularVelocity, const manif::SO3d::Tangent &amp;initialAngularAcceleration)</argsstring>
        <name>createSE3Traj</name>
        <param>
          <type>const manif::SE3d &amp;</type>
          <declname>initialPose</declname>
        </param>
        <param>
          <type>Eigen::Ref&lt; const Eigen::Vector2d &gt;</type>
          <declname>initialPlanarVelocity</declname>
        </param>
        <param>
          <type>Eigen::Ref&lt; const Eigen::Vector2d &gt;</type>
          <declname>initialPlanarAcceleration</declname>
        </param>
        <param>
          <type>Eigen::Ref&lt; const Eigen::Matrix&lt; double, 1, 1 &gt;&gt;</type>
          <declname>initialVerticalVelocity</declname>
        </param>
        <param>
          <type>Eigen::Ref&lt; const Eigen::Matrix&lt; double, 1, 1 &gt;&gt;</type>
          <declname>initialVerticalAcceleration</declname>
        </param>
        <param>
          <type>const manif::SO3d::Tangent &amp;</type>
          <declname>initialAngularVelocity</declname>
        </param>
        <param>
          <type>const manif::SO3d::Tangent &amp;</type>
          <declname>initialAngularAcceleration</declname>
        </param>
        <briefdescription>
<para>Create a new SE3Trajectory considering the previous and next contact. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>initialPose</parametername>
</parameternamelist>
<parameterdescription>
<para>initial pose of the foot. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initialPlanarVelocity</parametername>
</parameternamelist>
<parameterdescription>
<para>initial planar velocity of the foot. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initialPlanarAcceleration</parametername>
</parameternamelist>
<parameterdescription>
<para>initial planar acceleration of the foot. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initialVerticalVelocity</parametername>
</parameternamelist>
<parameterdescription>
<para>initial vertical velocity of the foot. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initialVerticalAcceleration</parametername>
</parameternamelist>
<parameterdescription>
<para>initial vertical acceleration of the foot. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initialAngularVelocity</parametername>
</parameternamelist>
<parameterdescription>
<para>initial angular velocity of the foot. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>initialAngularAcceleration</parametername>
</parameternamelist>
<parameterdescription>
<para>initial angular acceleration of the foot. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True in case of success/false otherwise. </para>
</simplesect>
<simplesect kind="note"><para>This method assumes that the final planar and angular velocity and acceleration are equal to zero, while the final vertical velocity and acceleration are equal to the one provided by the user. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Planners/SwingFootPlanner.h" line="110" column="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classBipedalLocomotion_1_1Planners_1_1SwingFootPlanner_1aee5c47374eb365a445abf15300ecaea6" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::Planners::SwingFootPlanner::initialize</definition>
        <argsstring>(std::weak_ptr&lt; const ParametersHandler::IParametersHandler &gt; handler) final</argsstring>
        <name>initialize</name>
        <reimplements refid="classBipedalLocomotion_1_1System_1_1Advanceable_1a6db247d3db83217a16e963d01f6bcb77">initialize</reimplements>
        <param>
          <type>std::weak_ptr&lt; const <ref refid="classBipedalLocomotion_1_1ParametersHandler_1_1IParametersHandler" kindref="compound">ParametersHandler::IParametersHandler</ref> &gt;</type>
          <declname>handler</declname>
        </param>
        <briefdescription>
<para>Initialize the planner. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handler</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the parameter handler. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>the following parameters are required by the class <table rows="11" cols="4"><row>
<entry thead="yes" align='center'><para>Parameter Name   </para>
</entry><entry thead="yes" align='center'><para>Type   </para>
</entry><entry thead="yes" align='center'><para>Description   </para>
</entry><entry thead="yes" align='center'><para>Mandatory    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>sampling_time</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>double</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>Sampling time of the planner in seconds   </para>
</entry><entry thead="no" align='center'><para>Yes    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>step_height</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>double</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>Height of the swing foot. It is not the maximum height of the foot. If apex time is 0.5 <computeroutput>step_height</computeroutput> is the maximum   </para>
</entry><entry thead="no" align='center'><para>Yes    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>foot_apex_time</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>double</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>Number between 0 and 1 representing the foot apex instant. If 0 the apex happens at take off if 1 at touch down   </para>
</entry><entry thead="no" align='center'><para>Yes    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>foot_landing_velocity</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>double</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>Landing vertical velocity (default value 0.0)   </para>
</entry><entry thead="no" align='center'><para>No    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>foot_landing_acceleration</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>double</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>Landing vertical acceleration (default value 0.0)   </para>
</entry><entry thead="no" align='center'><para>No    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>foot_take_off_velocity</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>double</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>Take-off vertical velocity (default value 0.0)   </para>
</entry><entry thead="no" align='center'><para>No    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>foot_take_off_acceleration</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>double</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>Take-off vertical acceleration (default value 0.0)   </para>
</entry><entry thead="no" align='center'><para>No    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>interpolation_method</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>string</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>Define the interpolation method for the trajectory of the position. Accepted parameters: <computeroutput>min_acceleration</computeroutput>, <computeroutput>min_jerk</computeroutput> (default value <computeroutput>min_acceleration</computeroutput>)   </para>
</entry><entry thead="no" align='center'><para>No    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>position_tolerance</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>double</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>Position tolerance in meters considered in <ref refid="classBipedalLocomotion_1_1Planners_1_1SwingFootPlanner_1a4082618eeb6a330eef5cdefd9a0a8705" kindref="member">SwingFootPlanner::setContactList</ref>. (default value 1e-6)   </para>
</entry><entry thead="no" align='center'><para>No    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>orientation_tolerance</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>double</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>Orientation tolerance in radians considered in <ref refid="classBipedalLocomotion_1_1Planners_1_1SwingFootPlanner_1a4082618eeb6a330eef5cdefd9a0a8705" kindref="member">SwingFootPlanner::setContactList</ref>. (default value 1e-6)   </para>
</entry><entry thead="no" align='center'><para>No   </para>
</entry></row>
</table>
</para>
</simplesect>
<simplesect kind="return"><para>True in case of success/false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Planners/SwingFootPlanner.h" line="138" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Planners_1_1SwingFootPlanner_1a4082618eeb6a330eef5cdefd9a0a8705" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::Planners::SwingFootPlanner::setContactList</definition>
        <argsstring>(const Contacts::ContactList &amp;contactList)</argsstring>
        <name>setContactList</name>
        <param>
          <type>const <ref refid="classBipedalLocomotion_1_1Contacts_1_1ContactList" kindref="compound">Contacts::ContactList</ref> &amp;</type>
          <declname>contactList</declname>
        </param>
        <briefdescription>
<para>Set the contact list. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>contactList</parametername>
</parameternamelist>
<parameterdescription>
<para>contains the list for a given contact. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true in case of success, false otherwise. </para>
</simplesect>
<simplesect kind="note"><para>The contact list can be updated at run-time, i.e., when the planner is running. However the new contact list must satisfy a set of hypothesis. If the contact list stored in the class is empty, then it is the first time the contact list is added to the planner. In this case we accept all kinds of ContactList If the contact list is not empty, we check if it is possible to update the list. Given some limitations of the framework (mainly due to the SO3 trajectory generation) for the time being, we support only the two following cases:<itemizedlist>
<listitem><para>Given the current time instant, both the stored and the new contact lists must have an active contact at the same pose. In details the check is done by comparing the position and orientation of the contact. The position and orientation are considered equal if the following two conditions are satisfied:<orderedlist>
<listitem><para>the distance between the two positions is less than position_tolerance</para>
</listitem><listitem><para>the distance between the two orientations is less than orientation_tolerance</para>
</listitem></orderedlist>
</para>
</listitem><listitem><para>If the contact is not active (swing phase) the next contact must satisfy the following two hypothesis<orderedlist>
<listitem><para>the final orientation may change still the error (in the tangent space) between the new orientation and the current one should be parallel to the current velocity and acceleration vectors. This is required to keep the <ref refid="classBipedalLocomotion_1_1Planners_1_1SO3Planner" kindref="compound">SO3Planner</ref> problem still treatable online. This check is not done here since the <ref refid="classBipedalLocomotion_1_1Planners_1_1SO3Planner" kindref="compound">SO3Planner</ref> will complain in case of issues.</para>
</listitem><listitem><para>the impact time of the next contact must be the same as the one of the next contact in the contact list stored in the class. </para>
</listitem></orderedlist>
</para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Planners/SwingFootPlanner.h" line="168" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Planners_1_1SwingFootPlanner_1a72eb04436de799dbd282eb4e3cc30a4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BipedalLocomotion::Planners::SwingFootPlanner::setTime</definition>
        <argsstring>(const std::chrono::nanoseconds &amp;time)</argsstring>
        <name>setTime</name>
        <param>
          <type>const std::chrono::nanoseconds &amp;</type>
          <declname>time</declname>
        </param>
        <briefdescription>
<para>Reset the time. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>time</parametername>
</parameternamelist>
<parameterdescription>
<para>internal time of the system. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Planners/SwingFootPlanner.h" line="174" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Planners_1_1SwingFootPlanner_1a3495995d4e48df8f65648538f4b1ae88" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>const <ref refid="structBipedalLocomotion_1_1Planners_1_1SwingFootPlannerState" kindref="compound">SwingFootPlannerState</ref> &amp;</type>
        <definition>const SwingFootPlannerState&amp; BipedalLocomotion::Planners::SwingFootPlanner::getOutput</definition>
        <argsstring>() const final</argsstring>
        <name>getOutput</name>
        <reimplements refid="classBipedalLocomotion_1_1System_1_1OutputPort_1a8c089ecf2dd8ff0fb2732233994b6cac">getOutput</reimplements>
        <briefdescription>
<para>Get the object. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a const reference of the requested object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Planners/SwingFootPlanner.h" line="180" column="33"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Planners_1_1SwingFootPlanner_1af9b02eaefe72c8800c50e061a5ea0d87" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::Planners::SwingFootPlanner::isOutputValid</definition>
        <argsstring>() const final</argsstring>
        <name>isOutputValid</name>
        <reimplements refid="classBipedalLocomotion_1_1System_1_1OutputPort_1ac50de29a6160baa2bba195af9d69430a">isOutputValid</reimplements>
        <briefdescription>
<para>Determines the validity of the object retrieved with <ref refid="NamedTuple_8h_1ab70c8bf5efee8eb732d3dfa7d05efa58" kindref="member">get()</ref> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if the object is valid, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Planners/SwingFootPlanner.h" line="186" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Planners_1_1SwingFootPlanner_1a273fc940688dc888d1c3cb7ea3c8b6de" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::Planners::SwingFootPlanner::advance</definition>
        <argsstring>() final</argsstring>
        <name>advance</name>
        <reimplements refid="classBipedalLocomotion_1_1System_1_1Advanceable_1a67107e46e831d93f572558b541aab6d2">advance</reimplements>
        <briefdescription>
<para>Advance the internal state. </para>
        </briefdescription>
        <detaileddescription>
<para>This may change the value retrievable from <ref refid="NamedTuple_8h_1ab70c8bf5efee8eb732d3dfa7d05efa58" kindref="member">get()</ref>. <simplesect kind="return"><para>True if the advance is successfull. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Planners/SwingFootPlanner.h" line="192" column="10"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="classBipedalLocomotion_1_1Planners_1_1SwingFootPlanner" kindref="compound">SwingFootPlanner</ref> implement a minimum jerk trajectory planner for the swing foot. </para>
    </briefdescription>
    <detaileddescription>
<para>The planner is designed in SE(3) and we assume that initial 6d-acceleration and 6d-velocity of the foot is always equal to zero at take off. The trajectory of the foot will belong to the Geodesic. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>BipedalLocomotion::System::Source&lt; SwingFootPlannerState &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Source"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="template-instance">
          <edgelabel>&lt; SwingFootPlannerState &gt;</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>BipedalLocomotion::System::InputPort&lt; _Input &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1InputPort"/>
      </node>
      <node id="5">
        <label>BipedalLocomotion::System::OutputPort&lt; _Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1OutputPort"/>
      </node>
      <node id="1">
        <label>BipedalLocomotion::Planners::SwingFootPlanner</label>
        <link refid="classBipedalLocomotion_1_1Planners_1_1SwingFootPlanner"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>BipedalLocomotion::System::Advanceable&lt; EmptySignal, Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Advanceable"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="template-instance">
          <edgelabel>&lt; EmptySignal, Output &gt;</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>BipedalLocomotion::System::Source&lt; Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Source"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>BipedalLocomotion::System::Advanceable&lt; _Input, _Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Advanceable"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>BipedalLocomotion::System::Source&lt; SwingFootPlannerState &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Source"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="template-instance">
          <edgelabel>&lt; SwingFootPlannerState &gt;</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>BipedalLocomotion::System::InputPort&lt; _Input &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1InputPort"/>
      </node>
      <node id="5">
        <label>BipedalLocomotion::System::OutputPort&lt; _Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1OutputPort"/>
      </node>
      <node id="1">
        <label>BipedalLocomotion::Planners::SwingFootPlanner</label>
        <link refid="classBipedalLocomotion_1_1Planners_1_1SwingFootPlanner"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>BipedalLocomotion::System::Advanceable&lt; EmptySignal, Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Advanceable"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="template-instance">
          <edgelabel>&lt; EmptySignal, Output &gt;</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>BipedalLocomotion::System::Source&lt; Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Source"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>BipedalLocomotion::System::Advanceable&lt; _Input, _Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Advanceable"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="BipedalLocomotion/Planners/SwingFootPlanner.h" line="44" column="1" bodyfile="BipedalLocomotion/Planners/SwingFootPlanner.h" bodystart="45" bodyend="193"/>
    <listofallmembers>
      <member refid="classBipedalLocomotion_1_1Planners_1_1SwingFootPlanner_1a273fc940688dc888d1c3cb7ea3c8b6de" prot="public" virt="virtual"><scope>BipedalLocomotion::Planners::SwingFootPlanner</scope><name>advance</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1a09ee5b41c77c6b626f4d5cb775065325" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Planners::SwingFootPlanner</scope><name>Advanceable</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1aaeb3eba3073fbc844dea1eba4c9b68f3" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Planners::SwingFootPlanner</scope><name>Advanceable</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1ac1549cb26bd896e27370e97b0795ba3f" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Planners::SwingFootPlanner</scope><name>Advanceable</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1a618ab786bb43814b3b3012b843fce93b" prot="public" virt="virtual"><scope>BipedalLocomotion::Planners::SwingFootPlanner</scope><name>close</name></member>
      <member refid="classBipedalLocomotion_1_1Planners_1_1SwingFootPlanner_1a3b5d237e6b62bb4ddf87b9d164330a3d" prot="private" virt="non-virtual"><scope>BipedalLocomotion::Planners::SwingFootPlanner</scope><name>createSE3Traj</name></member>
      <member refid="classBipedalLocomotion_1_1Planners_1_1SwingFootPlanner_1ad672a37849bc692473eb69d56d747e66" prot="private" virt="non-virtual"><scope>BipedalLocomotion::Planners::SwingFootPlanner</scope><name>evaluateSE3Traj</name></member>
      <member refid="classBipedalLocomotion_1_1Planners_1_1SwingFootPlanner_1a3495995d4e48df8f65648538f4b1ae88" prot="public" virt="virtual"><scope>BipedalLocomotion::Planners::SwingFootPlanner</scope><name>getOutput</name></member>
      <member refid="classBipedalLocomotion_1_1Planners_1_1SwingFootPlanner_1aee5c47374eb365a445abf15300ecaea6" prot="public" virt="virtual"><scope>BipedalLocomotion::Planners::SwingFootPlanner</scope><name>initialize</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1a975a7ecbf38c917c7b72519581fc7dba" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Planners::SwingFootPlanner</scope><name>Input</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1InputPort_1a27c614cb30c1e4b78e64791f4919dfa7" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Planners::SwingFootPlanner</scope><name>InputPort</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1InputPort_1a74d1418613e89a7f2993ea936228a44a" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Planners::SwingFootPlanner</scope><name>InputPort</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1InputPort_1a02ec5c947f1d2d83d2952c3b899cc58f" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Planners::SwingFootPlanner</scope><name>InputPort</name></member>
      <member refid="classBipedalLocomotion_1_1Planners_1_1SwingFootPlanner_1af9b02eaefe72c8800c50e061a5ea0d87" prot="public" virt="virtual"><scope>BipedalLocomotion::Planners::SwingFootPlanner</scope><name>isOutputValid</name></member>
      <member refid="classBipedalLocomotion_1_1Planners_1_1SwingFootPlanner_1a11f2f1f64a11a1e80c1e37d8fda93e64" prot="private" virt="non-virtual"><scope>BipedalLocomotion::Planners::SwingFootPlanner</scope><name>m_contactList</name></member>
      <member refid="classBipedalLocomotion_1_1Planners_1_1SwingFootPlanner_1a06fddc2be729d1ef4795d12b4bb62eb0" prot="private" virt="non-virtual"><scope>BipedalLocomotion::Planners::SwingFootPlanner</scope><name>m_currentTrajectoryTime</name></member>
      <member refid="classBipedalLocomotion_1_1Planners_1_1SwingFootPlanner_1ad357e7a7f386b5e07e28063956e6e032" prot="private" virt="non-virtual"><scope>BipedalLocomotion::Planners::SwingFootPlanner</scope><name>m_dT</name></member>
      <member refid="classBipedalLocomotion_1_1Planners_1_1SwingFootPlanner_1a5a169917029284c391fb12021e22bb6a" prot="private" virt="non-virtual"><scope>BipedalLocomotion::Planners::SwingFootPlanner</scope><name>m_footApexTime</name></member>
      <member refid="classBipedalLocomotion_1_1Planners_1_1SwingFootPlanner_1ab486c43987b20ca3950f19f242c662fa" prot="private" virt="non-virtual"><scope>BipedalLocomotion::Planners::SwingFootPlanner</scope><name>m_footLandingAcceleration</name></member>
      <member refid="classBipedalLocomotion_1_1Planners_1_1SwingFootPlanner_1a1d6a413c91862243185d1bfdf4096788" prot="private" virt="non-virtual"><scope>BipedalLocomotion::Planners::SwingFootPlanner</scope><name>m_footLandingVelocity</name></member>
      <member refid="classBipedalLocomotion_1_1Planners_1_1SwingFootPlanner_1ad6fa5f331bffe3291d5c3a386f5de94f" prot="private" virt="non-virtual"><scope>BipedalLocomotion::Planners::SwingFootPlanner</scope><name>m_footTakeOffAcceleration</name></member>
      <member refid="classBipedalLocomotion_1_1Planners_1_1SwingFootPlanner_1a9c034bd0aab0a822f696fdbe7f3d7bf7" prot="private" virt="non-virtual"><scope>BipedalLocomotion::Planners::SwingFootPlanner</scope><name>m_footTakeOffVelocity</name></member>
      <member refid="classBipedalLocomotion_1_1Planners_1_1SwingFootPlanner_1ae0a872ba21104fbb12725b328810395f" prot="private" virt="non-virtual"><scope>BipedalLocomotion::Planners::SwingFootPlanner</scope><name>m_heightPlanner</name></member>
      <member refid="classBipedalLocomotion_1_1Planners_1_1SwingFootPlanner_1a8d096eb9dc9a1d301d6e6d97a6820b4b" prot="private" virt="non-virtual"><scope>BipedalLocomotion::Planners::SwingFootPlanner</scope><name>m_isOutputValid</name></member>
      <member refid="classBipedalLocomotion_1_1Planners_1_1SwingFootPlanner_1a186b5acb5c339c1bb1b8c87ab58d06a8" prot="private" virt="non-virtual"><scope>BipedalLocomotion::Planners::SwingFootPlanner</scope><name>m_lastValidContact</name></member>
      <member refid="classBipedalLocomotion_1_1Planners_1_1SwingFootPlanner_1a7e8011b0b23bc63430a8b5b7b9b3fcbc" prot="private" virt="non-virtual"><scope>BipedalLocomotion::Planners::SwingFootPlanner</scope><name>m_orientationTolerance</name></member>
      <member refid="classBipedalLocomotion_1_1Planners_1_1SwingFootPlanner_1a11c4337a412dbb2d1e554958333f2373" prot="private" virt="non-virtual"><scope>BipedalLocomotion::Planners::SwingFootPlanner</scope><name>m_planarPlanner</name></member>
      <member refid="classBipedalLocomotion_1_1Planners_1_1SwingFootPlanner_1a99f2231ea8f91088ac9430365fd8d83e" prot="private" virt="non-virtual"><scope>BipedalLocomotion::Planners::SwingFootPlanner</scope><name>m_positionTolerance</name></member>
      <member refid="classBipedalLocomotion_1_1Planners_1_1SwingFootPlanner_1a74350935e4645a7c74479f7cb4429526" prot="private" virt="non-virtual"><scope>BipedalLocomotion::Planners::SwingFootPlanner</scope><name>m_SO3Planner</name></member>
      <member refid="classBipedalLocomotion_1_1Planners_1_1SwingFootPlanner_1a7b438a1964aebbc631655aca706d420c" prot="private" virt="non-virtual"><scope>BipedalLocomotion::Planners::SwingFootPlanner</scope><name>m_staringTimeOfCurrentSO3Traj</name></member>
      <member refid="classBipedalLocomotion_1_1Planners_1_1SwingFootPlanner_1a05f9acf196e6eb3d2065f348d168c54c" prot="private" virt="non-virtual"><scope>BipedalLocomotion::Planners::SwingFootPlanner</scope><name>m_state</name></member>
      <member refid="classBipedalLocomotion_1_1Planners_1_1SwingFootPlanner_1ad22ed48af0c25891c140707a2308c350" prot="private" virt="non-virtual"><scope>BipedalLocomotion::Planners::SwingFootPlanner</scope><name>m_stepHeight</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Source_1a922e6eec2f74620c49f9fcd1ddf709ae" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Planners::SwingFootPlanner</scope><name>operator=</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Source_1ad63e64dcad4c269263ecd20b2c81352b" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Planners::SwingFootPlanner</scope><name>operator=</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1ae147cdee9ff9160a9dfe0d3e349a9aad" prot="public" virt="non-virtual" ambiguityscope="BipedalLocomotion::System::Advanceable::"><scope>BipedalLocomotion::Planners::SwingFootPlanner</scope><name>operator=</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1adf0d9fc07bab0ec5d4db7f3a35816bf2" prot="public" virt="non-virtual" ambiguityscope="BipedalLocomotion::System::Advanceable::"><scope>BipedalLocomotion::Planners::SwingFootPlanner</scope><name>operator=</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1InputPort_1a54f476d3c8d6d003fb714309ea6272aa" prot="public" virt="non-virtual" ambiguityscope="BipedalLocomotion::System::InputPort::"><scope>BipedalLocomotion::Planners::SwingFootPlanner</scope><name>operator=</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1InputPort_1adb341b37472241b6da8b552166308d7b" prot="public" virt="non-virtual" ambiguityscope="BipedalLocomotion::System::InputPort::"><scope>BipedalLocomotion::Planners::SwingFootPlanner</scope><name>operator=</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1OutputPort_1af5e15f5e4962a5c8e0f0c0a49adb9ca1" prot="public" virt="non-virtual" ambiguityscope="BipedalLocomotion::System::OutputPort::"><scope>BipedalLocomotion::Planners::SwingFootPlanner</scope><name>operator=</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1OutputPort_1ad5c6ce3ad7d2a064d7bb512fe0bc489e" prot="public" virt="non-virtual" ambiguityscope="BipedalLocomotion::System::OutputPort::"><scope>BipedalLocomotion::Planners::SwingFootPlanner</scope><name>operator=</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1a69603f2c9c608815908425b5b8c2005c" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Planners::SwingFootPlanner</scope><name>Output</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1OutputPort_1a7c0d15e677a1935918fc747ba4c25ec1" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Planners::SwingFootPlanner</scope><name>OutputPort</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1OutputPort_1a0a39b891749961d34507b4b591886741" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Planners::SwingFootPlanner</scope><name>OutputPort</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1OutputPort_1a581340f280eca1890a8a7b2331761b57" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Planners::SwingFootPlanner</scope><name>OutputPort</name></member>
      <member refid="classBipedalLocomotion_1_1Planners_1_1SwingFootPlanner_1a4082618eeb6a330eef5cdefd9a0a8705" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Planners::SwingFootPlanner</scope><name>setContactList</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Source_1a472624c76d5e02e8ae16991cd77016ce" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Planners::SwingFootPlanner</scope><name>setInput</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1InputPort_1ad2637be5c9075a2d8f09fedc6a42d808" prot="public" virt="pure-virtual" ambiguityscope="BipedalLocomotion::System::Advanceable::"><scope>BipedalLocomotion::Planners::SwingFootPlanner</scope><name>setInput</name></member>
      <member refid="classBipedalLocomotion_1_1Planners_1_1SwingFootPlanner_1a72eb04436de799dbd282eb4e3cc30a4a" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Planners::SwingFootPlanner</scope><name>setTime</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Source_1aa6af70cc2e04e6a7e011af3d968b3b4b" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Planners::SwingFootPlanner</scope><name>Source</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Source_1a1c126531af21d485f09f297cb162c30a" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Planners::SwingFootPlanner</scope><name>Source</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Source_1af0cf2abdf10e6594372a0b062fe4a8af" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Planners::SwingFootPlanner</scope><name>Source</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1afae1137cba829874bab4a1d25d559896" prot="public" virt="virtual"><scope>BipedalLocomotion::Planners::SwingFootPlanner</scope><name>~Advanceable</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1InputPort_1ac9b58b0d2f6ae8821b873ed6f9817ccb" prot="public" virt="virtual"><scope>BipedalLocomotion::Planners::SwingFootPlanner</scope><name>~InputPort</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1OutputPort_1adcc49c38152c9204dcab4f8e87f68977" prot="public" virt="virtual"><scope>BipedalLocomotion::Planners::SwingFootPlanner</scope><name>~OutputPort</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Source_1acf12427433027de27b18e6e70ba0cae8" prot="public" virt="virtual"><scope>BipedalLocomotion::Planners::SwingFootPlanner</scope><name>~Source</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
