<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classBipedalLocomotion_1_1Planners_1_1UnicycleTrajectoryPlanner" kind="class" language="C++" prot="public" final="yes">
    <compoundname>BipedalLocomotion::Planners::UnicycleTrajectoryPlanner</compoundname>
    <basecompoundref refid="classBipedalLocomotion_1_1System_1_1Advanceable" prot="public" virt="non-virtual">BipedalLocomotion::System::Advanceable&lt; UnicycleTrajectoryPlannerInput, UnicycleTrajectoryPlannerOutput &gt;</basecompoundref>
    <includes local="no">BipedalLocomotion/Planners/UnicycleTrajectoryPlanner.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classBipedalLocomotion_1_1Planners_1_1UnicycleTrajectoryPlanner_1abd4d3abde99be48cc735c45030a939c3" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; Impl &gt;</type>
        <definition>std::unique_ptr&lt;Impl&gt; BipedalLocomotion::Planners::UnicycleTrajectoryPlanner::m_pImpl</definition>
        <argsstring></argsstring>
        <name>m_pImpl</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Planners/UnicycleTrajectoryPlanner.h" line="281" column="21" bodyfile="BipedalLocomotion/Planners/UnicycleTrajectoryPlanner.h" bodystart="280" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classBipedalLocomotion_1_1Planners_1_1UnicycleTrajectoryPlanner_1ae746d9dd623b6a3a7f281fd4bc13e126" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BipedalLocomotion::Planners::UnicycleTrajectoryPlanner::UnicycleTrajectoryPlanner</definition>
        <argsstring>()</argsstring>
        <name>UnicycleTrajectoryPlanner</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Planners/UnicycleTrajectoryPlanner.h" line="163" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Planners_1_1UnicycleTrajectoryPlanner_1ab8ce56b881f7bb79be0512aae09b8d52" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual BipedalLocomotion::Planners::UnicycleTrajectoryPlanner::~UnicycleTrajectoryPlanner</definition>
        <argsstring>()</argsstring>
        <name>~UnicycleTrajectoryPlanner</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Planners/UnicycleTrajectoryPlanner.h" line="165" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Planners_1_1UnicycleTrajectoryPlanner_1a75d0aa997ff3314e4cd143bab7a66683" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::Planners::UnicycleTrajectoryPlanner::setRobotContactFrames</definition>
        <argsstring>(const iDynTree::Model &amp;model)</argsstring>
        <name>setRobotContactFrames</name>
        <param>
          <type>const iDynTree::Model &amp;</type>
          <declname>model</declname>
        </param>
        <briefdescription>
<para>Set the robot contact frames. </para>
        </briefdescription>
        <detaileddescription>
<para>It should be called after the <ref refid="classBipedalLocomotion_1_1Planners_1_1UnicycleTrajectoryPlanner_1aef151639c1e5fea815c8972f565c972e" kindref="member">initialize()</ref> function. It checks if the contact frames names parsed by the <ref refid="classBipedalLocomotion_1_1Planners_1_1UnicycleTrajectoryPlanner_1aef151639c1e5fea815c8972f565c972e" kindref="member">initialize()</ref> function exist. If yes, it sets the related contact frames indexes and returns true. Otherwise, it sets the Impl::FSM::State back to NotInitialized and returns false. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>model</parametername>
</parameternamelist>
<parameterdescription>
<para>iDynTree::Model of the robot considered. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Planners/UnicycleTrajectoryPlanner.h" line="175" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Planners_1_1UnicycleTrajectoryPlanner_1a0f9b07db49980476c46d78cb7e7d4f7e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BipedalLocomotion::Planners::UnicycleTrajectoryPlanner::getRightContactFrameIndex</definition>
        <argsstring>() const</argsstring>
        <name>getRightContactFrameIndex</name>
        <briefdescription>
<para>Get the index of the right foot contact frame. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The index of the right foot contact frame. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Planners/UnicycleTrajectoryPlanner.h" line="181" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Planners_1_1UnicycleTrajectoryPlanner_1a0fd5260461172bc33ade3d4e4af03c80" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BipedalLocomotion::Planners::UnicycleTrajectoryPlanner::getLeftContactFrameIndex</definition>
        <argsstring>() const</argsstring>
        <name>getLeftContactFrameIndex</name>
        <briefdescription>
<para>Get the index of the left foot contact frame. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The index of the left foot contact frame. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Planners/UnicycleTrajectoryPlanner.h" line="187" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Planners_1_1UnicycleTrajectoryPlanner_1aef151639c1e5fea815c8972f565c972e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::Planners::UnicycleTrajectoryPlanner::initialize</definition>
        <argsstring>(std::weak_ptr&lt; const ParametersHandler::IParametersHandler &gt; handler) override</argsstring>
        <name>initialize</name>
        <reimplements refid="classBipedalLocomotion_1_1System_1_1Advanceable_1a6db247d3db83217a16e963d01f6bcb77">initialize</reimplements>
        <param>
          <type>std::weak_ptr&lt; const <ref refid="classBipedalLocomotion_1_1ParametersHandler_1_1IParametersHandler" kindref="compound">ParametersHandler::IParametersHandler</ref> &gt;</type>
          <declname>handler</declname>
        </param>
        <briefdescription>
<para>Initialize the planner. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The following parameters are required by the class:</para>
</simplesect>
<table rows="38" cols="5"><row>
<entry thead="yes" align='center'><para>Name   </para>
</entry><entry thead="yes" align='center'><para>Type   </para>
</entry><entry thead="yes" align='center'><para>Default   </para>
</entry><entry thead="yes" align='center'><para>Example   </para>
</entry><entry thead="yes" align='center'><para>Description    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>referencePosition</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>list of 2 doubles   </para>
</entry><entry thead="no" align='center'><para>-   </para>
</entry><entry thead="no" align='center'><para>(0.1 0.0)   </para>
</entry><entry thead="no" align='center'><para>The reference position of the unicycle controller    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>controlType</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>string   </para>
</entry><entry thead="no" align='center'><para>&quot;direct&quot;   </para>
</entry><entry thead="no" align='center'><para>-   </para>
</entry><entry thead="no" align='center'><para>The control mode used by the unicycle controller    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>unicycleGain</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>double   </para>
</entry><entry thead="no" align='center'><para>10.0   </para>
</entry><entry thead="no" align='center'><para>-   </para>
</entry><entry thead="no" align='center'><para>The main gain of the unicycle controller    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>slowWhenTurningGain</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>double   </para>
</entry><entry thead="no" align='center'><para>2.0   </para>
</entry><entry thead="no" align='center'><para>-   </para>
</entry><entry thead="no" align='center'><para>The turning gain of the unicycle controller    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>slowWhenBackwardFactor</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>double   </para>
</entry><entry thead="no" align='center'><para>0.4   </para>
</entry><entry thead="no" align='center'><para>-   </para>
</entry><entry thead="no" align='center'><para>The backward gain of the unicycle controller    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>slowWhenSidewaysFactor</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>double   </para>
</entry><entry thead="no" align='center'><para>0.2   </para>
</entry><entry thead="no" align='center'><para>-   </para>
</entry><entry thead="no" align='center'><para>The sideways gain of the unicycle controller    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>dt</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>double   </para>
</entry><entry thead="no" align='center'><para>0.002   </para>
</entry><entry thead="no" align='center'><para>-   </para>
</entry><entry thead="no" align='center'><para>The sampling time of the planner    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>plannerHorizon</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>double   </para>
</entry><entry thead="no" align='center'><para>20.0   </para>
</entry><entry thead="no" align='center'><para>-   </para>
</entry><entry thead="no" align='center'><para>The planner time horizon    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>positionWeight</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>double   </para>
</entry><entry thead="no" align='center'><para>1.0   </para>
</entry><entry thead="no" align='center'><para>-   </para>
</entry><entry thead="no" align='center'><para>The position weight of the OC problem    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>timeWeight</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>double   </para>
</entry><entry thead="no" align='center'><para>2.5   </para>
</entry><entry thead="no" align='center'><para>-   </para>
</entry><entry thead="no" align='center'><para>The time weight of the OC problem    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>maxStepLength</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>double   </para>
</entry><entry thead="no" align='center'><para>0.32   </para>
</entry><entry thead="no" align='center'><para>-   </para>
</entry><entry thead="no" align='center'><para>The maximum length of a step    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>minStepLength</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>double   </para>
</entry><entry thead="no" align='center'><para>0.01   </para>
</entry><entry thead="no" align='center'><para>-   </para>
</entry><entry thead="no" align='center'><para>The minimum length of a step    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>maxLengthBackwardFactor</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>double   </para>
</entry><entry thead="no" align='center'><para>0.8   </para>
</entry><entry thead="no" align='center'><para>-   </para>
</entry><entry thead="no" align='center'><para>The factor of maximum backward walk    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>nominalWidth</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>double   </para>
</entry><entry thead="no" align='center'><para>0.20   </para>
</entry><entry thead="no" align='center'><para>-   </para>
</entry><entry thead="no" align='center'><para>The nominal feet distance    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>minWidth</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>double   </para>
</entry><entry thead="no" align='center'><para>0.14   </para>
</entry><entry thead="no" align='center'><para>-   </para>
</entry><entry thead="no" align='center'><para>The minimum feet distance    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>minStepDuration</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>double   </para>
</entry><entry thead="no" align='center'><para>0.65   </para>
</entry><entry thead="no" align='center'><para>-   </para>
</entry><entry thead="no" align='center'><para>The minimum duration of a step    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>maxStepDuration</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>double   </para>
</entry><entry thead="no" align='center'><para>1.5   </para>
</entry><entry thead="no" align='center'><para>-   </para>
</entry><entry thead="no" align='center'><para>The maximum duration of a step    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>nominalDuration</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>double   </para>
</entry><entry thead="no" align='center'><para>0.8   </para>
</entry><entry thead="no" align='center'><para>-   </para>
</entry><entry thead="no" align='center'><para>The nominal duration of a step    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>maxAngleVariation</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>double   </para>
</entry><entry thead="no" align='center'><para>18.0   </para>
</entry><entry thead="no" align='center'><para>-   </para>
</entry><entry thead="no" align='center'><para>The maximum unicycle rotation    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>minAngleVariation</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>double   </para>
</entry><entry thead="no" align='center'><para>5.0   </para>
</entry><entry thead="no" align='center'><para>-   </para>
</entry><entry thead="no" align='center'><para>The minimum unicycle rotation    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>saturationFactors</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>list of 2 doubles   </para>
</entry><entry thead="no" align='center'><para>-   </para>
</entry><entry thead="no" align='center'><para>(0.7 0.7)   </para>
</entry><entry thead="no" align='center'><para>Linear and Angular velocity conservative factors    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>leftYawDeltaInDeg</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>double   </para>
</entry><entry thead="no" align='center'><para>0.0   </para>
</entry><entry thead="no" align='center'><para>-   </para>
</entry><entry thead="no" align='center'><para>Offset for the left foot rotation around the z axis    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>rightYawDeltaInDeg</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>double   </para>
</entry><entry thead="no" align='center'><para>0.0   </para>
</entry><entry thead="no" align='center'><para>-   </para>
</entry><entry thead="no" align='center'><para>Offset for the right foot rotation around the z axis    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>swingLeft</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>bool   </para>
</entry><entry thead="no" align='center'><para>false   </para>
</entry><entry thead="no" align='center'><para>-   </para>
</entry><entry thead="no" align='center'><para>Perform the first step with the left foot    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>startAlwaysSameFoot</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>bool   </para>
</entry><entry thead="no" align='center'><para>false   </para>
</entry><entry thead="no" align='center'><para>-   </para>
</entry><entry thead="no" align='center'><para>Restart with the default foot if still    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>terminalStep</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>bool   </para>
</entry><entry thead="no" align='center'><para>true   </para>
</entry><entry thead="no" align='center'><para>-   </para>
</entry><entry thead="no" align='center'><para>Add a terminal step at the end of the horizon    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>mergePointRatios</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>list of 2 doubles   </para>
</entry><entry thead="no" align='center'><para>-   </para>
</entry><entry thead="no" align='center'><para>(0.4 0.4)   </para>
</entry><entry thead="no" align='center'><para>The ratios of the DS phase in which it is present a merge point    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>switchOverSwingRatio</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>double   </para>
</entry><entry thead="no" align='center'><para>0.2   </para>
</entry><entry thead="no" align='center'><para>-   </para>
</entry><entry thead="no" align='center'><para>The ratio between single and double support phases    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>lastStepSwitchTime</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>double   </para>
</entry><entry thead="no" align='center'><para>0.3   </para>
</entry><entry thead="no" align='center'><para>-   </para>
</entry><entry thead="no" align='center'><para>Time duration of double support phase in final step    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>isPauseActive</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>bool   </para>
</entry><entry thead="no" align='center'><para>true   </para>
</entry><entry thead="no" align='center'><para>-   </para>
</entry><entry thead="no" align='center'><para>If true, the planner can pause, instead of make tiny steps.    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>comHeight</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>double   </para>
</entry><entry thead="no" align='center'><para>0.70   </para>
</entry><entry thead="no" align='center'><para>-   </para>
</entry><entry thead="no" align='center'><para>CoM height in double support phase    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>comHeightDelta</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>double   </para>
</entry><entry thead="no" align='center'><para>0.01   </para>
</entry><entry thead="no" align='center'><para>-   </para>
</entry><entry thead="no" align='center'><para>Delta to add to CoM heinght in Single support phases    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>leftZMPDelta</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>list of 2 doubles   </para>
</entry><entry thead="no" align='center'><para>-   </para>
</entry><entry thead="no" align='center'><para>(0.0 0.0)   </para>
</entry><entry thead="no" align='center'><para>Local ZMP reference: delta wrt center frame of the foot    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>rightZMPDelta</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>list of 2 doubles   </para>
</entry><entry thead="no" align='center'><para>-   </para>
</entry><entry thead="no" align='center'><para>(0.0 0.0)   </para>
</entry><entry thead="no" align='center'><para>Local ZMP reference: delta wrt center frame of the foot    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>lastStepDCMOffset</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>double   </para>
</entry><entry thead="no" align='center'><para>0.5   </para>
</entry><entry thead="no" align='center'><para>-   </para>
</entry><entry thead="no" align='center'><para>Last Step DCM Offset. If 0, DCM coincides with stance foot ZMP    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>leftContactFrameName</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>string   </para>
</entry><entry thead="no" align='center'><para>-   </para>
</entry><entry thead="no" align='center'><para>&quot;l_sole&quot;   </para>
</entry><entry thead="no" align='center'><para>Name of the left foot contact frame    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>rightContactFrameName</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>string   </para>
</entry><entry thead="no" align='center'><para>-   </para>
</entry><entry thead="no" align='center'><para>&quot;r_sole&quot;   </para>
</entry><entry thead="no" align='center'><para>Name of the right foot contact frame   </para>
</entry></row>
</table>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handler</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the parameter handler. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True in case of success, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Planners/UnicycleTrajectoryPlanner.h" line="238" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Planners_1_1UnicycleTrajectoryPlanner_1a91d2c7e5b034956159662a0ed7c8f0fd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>const <ref refid="structBipedalLocomotion_1_1Planners_1_1UnicycleTrajectoryPlannerOutput" kindref="compound">UnicycleTrajectoryPlannerOutput</ref> &amp;</type>
        <definition>const UnicycleTrajectoryPlannerOutput&amp; BipedalLocomotion::Planners::UnicycleTrajectoryPlanner::getOutput</definition>
        <argsstring>() const override</argsstring>
        <name>getOutput</name>
        <reimplements refid="classBipedalLocomotion_1_1System_1_1OutputPort_1a8c089ecf2dd8ff0fb2732233994b6cac">getOutput</reimplements>
        <briefdescription>
<para>Get the output of the planner. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The output of the planner. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Planners/UnicycleTrajectoryPlanner.h" line="245" column="43"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Planners_1_1UnicycleTrajectoryPlanner_1a2a496f83fd70975470a65603c83321d8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::Planners::UnicycleTrajectoryPlanner::isOutputValid</definition>
        <argsstring>() const override</argsstring>
        <name>isOutputValid</name>
        <reimplements refid="classBipedalLocomotion_1_1System_1_1OutputPort_1ac50de29a6160baa2bba195af9d69430a">isOutputValid</reimplements>
        <briefdescription>
<para>Check if the output is valid. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if the output is valid, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Planners/UnicycleTrajectoryPlanner.h" line="251" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Planners_1_1UnicycleTrajectoryPlanner_1aada2e13ef23293cfa638d25e2962d7ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::Planners::UnicycleTrajectoryPlanner::setInput</definition>
        <argsstring>(const UnicycleTrajectoryPlannerInput &amp;input) override</argsstring>
        <name>setInput</name>
        <param>
          <type>const <ref refid="structBipedalLocomotion_1_1Planners_1_1UnicycleTrajectoryPlannerInput" kindref="compound">UnicycleTrajectoryPlannerInput</ref> &amp;</type>
          <declname>input</declname>
        </param>
        <briefdescription>
<para>Set the input of the planner. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>Input of the planner. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True in case of success, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Planners/UnicycleTrajectoryPlanner.h" line="258" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Planners_1_1UnicycleTrajectoryPlanner_1a632c6bc9269d5d2d028dff1e131439e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::Planners::UnicycleTrajectoryPlanner::advance</definition>
        <argsstring>() override</argsstring>
        <name>advance</name>
        <reimplements refid="classBipedalLocomotion_1_1System_1_1Advanceable_1a67107e46e831d93f572558b541aab6d2">advance</reimplements>
        <briefdescription>
<para>Advance the planner. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True in case of success, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Planners/UnicycleTrajectoryPlanner.h" line="264" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Planners_1_1UnicycleTrajectoryPlanner_1abc1c3510b82812a86ffdb9c82fad0e0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBipedalLocomotion_1_1Contacts_1_1ContactPhaseList" kindref="compound">Contacts::ContactPhaseList</ref></type>
        <definition>Contacts::ContactPhaseList BipedalLocomotion::Planners::UnicycleTrajectoryPlanner::getContactPhaseList</definition>
        <argsstring>()</argsstring>
        <name>getContactPhaseList</name>
        <briefdescription>
<para>Get the contact phase list. </para>
        </briefdescription>
        <detaileddescription>
<para>It returns the contact phase list built with the footsteps generated by the planner. <simplesect kind="return"><para>The contact phase list. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Planners/UnicycleTrajectoryPlanner.h" line="271" column="32"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Planners_1_1UnicycleTrajectoryPlanner_1a590ca5bad072721200c60a2804b66055" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::chrono::nanoseconds</type>
        <definition>std::chrono::nanoseconds BipedalLocomotion::Planners::UnicycleTrajectoryPlanner::getMinStepDuration</definition>
        <argsstring>() const</argsstring>
        <name>getMinStepDuration</name>
        <briefdescription>
<para>Get the minimum time duration of a step. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>minimum time duration of a step. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Planners/UnicycleTrajectoryPlanner.h" line="277" column="30"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classBipedalLocomotion_1_1Planners_1_1UnicycleTrajectoryPlanner_1aadf821cb8d4690023fb0dc85f1da4f50" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::Planners::UnicycleTrajectoryPlanner::setUnicycleControllerFromString</definition>
        <argsstring>(const std::string &amp;unicycleControllerAsString, UnicycleController &amp;unicycleController)</argsstring>
        <name>setUnicycleControllerFromString</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>unicycleControllerAsString</declname>
        </param>
        <param>
          <type>UnicycleController &amp;</type>
          <declname>unicycleController</declname>
        </param>
        <briefdescription>
<para>Set the unicycle controller mode based on the given string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>unicycleControllerAsString</parametername>
</parameternamelist>
<parameterdescription>
<para>unicycle controller mode as string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unicycleController</parametername>
</parameternamelist>
<parameterdescription>
<para>unicycle controller mode. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True in case of success, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Planners/UnicycleTrajectoryPlanner.h" line="289" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Planners_1_1UnicycleTrajectoryPlanner_1ac61ba52272cdca5a0bc3be91167f0129" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::Planners::UnicycleTrajectoryPlanner::generateFirstTrajectory</definition>
        <argsstring>()</argsstring>
        <name>generateFirstTrajectory</name>
        <briefdescription>
<para>Generate the first trajectory. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Planners/UnicycleTrajectoryPlanner.h" line="295" column="10"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="classBipedalLocomotion_1_1Planners_1_1UnicycleTrajectoryPlanner" kindref="compound">UnicycleTrajectoryPlanner</ref> is a class that uses UnicycleGenerator of <ulink url="https://github.com/robotology/unicycle-footstep-planner">https://github.com/robotology/unicycle-footstep-planner</ulink>) to generate reference trajectories for humanoid robots. </para>
    </briefdescription>
    <detaileddescription>
<para>Every time the <ref refid="classBipedalLocomotion_1_1Planners_1_1UnicycleTrajectoryPlanner_1a632c6bc9269d5d2d028dff1e131439e4" kindref="member">advance()</ref> function is called, the planner generates a new trajectory, which spans the time horizon configured by the user. The <ref refid="classBipedalLocomotion_1_1Planners_1_1UnicycleTrajectoryPlanner_1a91d2c7e5b034956159662a0ed7c8f0fd" kindref="member">getOutput()</ref> member function returns the generated trajectory, which includes the CoM, DCM, and footstep ones. The planner requires the user to set the robot model using the setRobotModel() member function, before invoking the <ref refid="classBipedalLocomotion_1_1Planners_1_1UnicycleTrajectoryPlanner_1aef151639c1e5fea815c8972f565c972e" kindref="member">initialize()</ref> member function, which configures the planner. As input, which is set using the <ref refid="classBipedalLocomotion_1_1Planners_1_1UnicycleTrajectoryPlanner_1aada2e13ef23293cfa638d25e2962d7ee" kindref="member">setInput()</ref> member function, the planner requires an instance of the <ref refid="structBipedalLocomotion_1_1Planners_1_1UnicycleTrajectoryPlannerInput" kindref="compound">UnicycleTrajectoryPlannerInput</ref> struct. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>BipedalLocomotion::System::InputPort&lt; _Input &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1InputPort"/>
      </node>
      <node id="1">
        <label>BipedalLocomotion::Planners::UnicycleTrajectoryPlanner</label>
        <link refid="classBipedalLocomotion_1_1Planners_1_1UnicycleTrajectoryPlanner"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>BipedalLocomotion::System::OutputPort&lt; _Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1OutputPort"/>
      </node>
      <node id="2">
        <label>BipedalLocomotion::System::Advanceable&lt; UnicycleTrajectoryPlannerInput, UnicycleTrajectoryPlannerOutput &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Advanceable"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="template-instance">
          <edgelabel>&lt; UnicycleTrajectoryPlannerInput, UnicycleTrajectoryPlannerOutput &gt;</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>BipedalLocomotion::System::Advanceable&lt; _Input, _Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Advanceable"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>BipedalLocomotion::System::InputPort&lt; _Input &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1InputPort"/>
      </node>
      <node id="1">
        <label>BipedalLocomotion::Planners::UnicycleTrajectoryPlanner</label>
        <link refid="classBipedalLocomotion_1_1Planners_1_1UnicycleTrajectoryPlanner"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>BipedalLocomotion::System::OutputPort&lt; _Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1OutputPort"/>
      </node>
      <node id="2">
        <label>BipedalLocomotion::System::Advanceable&lt; UnicycleTrajectoryPlannerInput, UnicycleTrajectoryPlannerOutput &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Advanceable"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="template-instance">
          <edgelabel>&lt; UnicycleTrajectoryPlannerInput, UnicycleTrajectoryPlannerOutput &gt;</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>BipedalLocomotion::System::Advanceable&lt; _Input, _Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Advanceable"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="BipedalLocomotion/Planners/UnicycleTrajectoryPlanner.h" line="159" column="1" bodyfile="BipedalLocomotion/Planners/UnicycleTrajectoryPlanner.h" bodystart="161" bodyend="296"/>
    <listofallmembers>
      <member refid="classBipedalLocomotion_1_1Planners_1_1UnicycleTrajectoryPlanner_1a632c6bc9269d5d2d028dff1e131439e4" prot="public" virt="virtual"><scope>BipedalLocomotion::Planners::UnicycleTrajectoryPlanner</scope><name>advance</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1a09ee5b41c77c6b626f4d5cb775065325" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Planners::UnicycleTrajectoryPlanner</scope><name>Advanceable</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1aaeb3eba3073fbc844dea1eba4c9b68f3" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Planners::UnicycleTrajectoryPlanner</scope><name>Advanceable</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1ac1549cb26bd896e27370e97b0795ba3f" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Planners::UnicycleTrajectoryPlanner</scope><name>Advanceable</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1a618ab786bb43814b3b3012b843fce93b" prot="public" virt="virtual"><scope>BipedalLocomotion::Planners::UnicycleTrajectoryPlanner</scope><name>close</name></member>
      <member refid="classBipedalLocomotion_1_1Planners_1_1UnicycleTrajectoryPlanner_1ac61ba52272cdca5a0bc3be91167f0129" prot="private" virt="non-virtual"><scope>BipedalLocomotion::Planners::UnicycleTrajectoryPlanner</scope><name>generateFirstTrajectory</name></member>
      <member refid="classBipedalLocomotion_1_1Planners_1_1UnicycleTrajectoryPlanner_1abc1c3510b82812a86ffdb9c82fad0e0e" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Planners::UnicycleTrajectoryPlanner</scope><name>getContactPhaseList</name></member>
      <member refid="classBipedalLocomotion_1_1Planners_1_1UnicycleTrajectoryPlanner_1a0fd5260461172bc33ade3d4e4af03c80" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Planners::UnicycleTrajectoryPlanner</scope><name>getLeftContactFrameIndex</name></member>
      <member refid="classBipedalLocomotion_1_1Planners_1_1UnicycleTrajectoryPlanner_1a590ca5bad072721200c60a2804b66055" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Planners::UnicycleTrajectoryPlanner</scope><name>getMinStepDuration</name></member>
      <member refid="classBipedalLocomotion_1_1Planners_1_1UnicycleTrajectoryPlanner_1a91d2c7e5b034956159662a0ed7c8f0fd" prot="public" virt="virtual"><scope>BipedalLocomotion::Planners::UnicycleTrajectoryPlanner</scope><name>getOutput</name></member>
      <member refid="classBipedalLocomotion_1_1Planners_1_1UnicycleTrajectoryPlanner_1a0f9b07db49980476c46d78cb7e7d4f7e" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Planners::UnicycleTrajectoryPlanner</scope><name>getRightContactFrameIndex</name></member>
      <member refid="classBipedalLocomotion_1_1Planners_1_1UnicycleTrajectoryPlanner_1aef151639c1e5fea815c8972f565c972e" prot="public" virt="virtual"><scope>BipedalLocomotion::Planners::UnicycleTrajectoryPlanner</scope><name>initialize</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1a975a7ecbf38c917c7b72519581fc7dba" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Planners::UnicycleTrajectoryPlanner</scope><name>Input</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1InputPort_1a27c614cb30c1e4b78e64791f4919dfa7" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Planners::UnicycleTrajectoryPlanner</scope><name>InputPort</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1InputPort_1a74d1418613e89a7f2993ea936228a44a" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Planners::UnicycleTrajectoryPlanner</scope><name>InputPort</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1InputPort_1a02ec5c947f1d2d83d2952c3b899cc58f" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Planners::UnicycleTrajectoryPlanner</scope><name>InputPort</name></member>
      <member refid="classBipedalLocomotion_1_1Planners_1_1UnicycleTrajectoryPlanner_1a2a496f83fd70975470a65603c83321d8" prot="public" virt="virtual"><scope>BipedalLocomotion::Planners::UnicycleTrajectoryPlanner</scope><name>isOutputValid</name></member>
      <member refid="classBipedalLocomotion_1_1Planners_1_1UnicycleTrajectoryPlanner_1abd4d3abde99be48cc735c45030a939c3" prot="private" virt="non-virtual"><scope>BipedalLocomotion::Planners::UnicycleTrajectoryPlanner</scope><name>m_pImpl</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1ae147cdee9ff9160a9dfe0d3e349a9aad" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Planners::UnicycleTrajectoryPlanner</scope><name>operator=</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1adf0d9fc07bab0ec5d4db7f3a35816bf2" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Planners::UnicycleTrajectoryPlanner</scope><name>operator=</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1InputPort_1a54f476d3c8d6d003fb714309ea6272aa" prot="public" virt="non-virtual" ambiguityscope="BipedalLocomotion::System::InputPort::"><scope>BipedalLocomotion::Planners::UnicycleTrajectoryPlanner</scope><name>operator=</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1InputPort_1adb341b37472241b6da8b552166308d7b" prot="public" virt="non-virtual" ambiguityscope="BipedalLocomotion::System::InputPort::"><scope>BipedalLocomotion::Planners::UnicycleTrajectoryPlanner</scope><name>operator=</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1OutputPort_1af5e15f5e4962a5c8e0f0c0a49adb9ca1" prot="public" virt="non-virtual" ambiguityscope="BipedalLocomotion::System::OutputPort::"><scope>BipedalLocomotion::Planners::UnicycleTrajectoryPlanner</scope><name>operator=</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1OutputPort_1ad5c6ce3ad7d2a064d7bb512fe0bc489e" prot="public" virt="non-virtual" ambiguityscope="BipedalLocomotion::System::OutputPort::"><scope>BipedalLocomotion::Planners::UnicycleTrajectoryPlanner</scope><name>operator=</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1a69603f2c9c608815908425b5b8c2005c" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Planners::UnicycleTrajectoryPlanner</scope><name>Output</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1OutputPort_1a7c0d15e677a1935918fc747ba4c25ec1" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Planners::UnicycleTrajectoryPlanner</scope><name>OutputPort</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1OutputPort_1a0a39b891749961d34507b4b591886741" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Planners::UnicycleTrajectoryPlanner</scope><name>OutputPort</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1OutputPort_1a581340f280eca1890a8a7b2331761b57" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Planners::UnicycleTrajectoryPlanner</scope><name>OutputPort</name></member>
      <member refid="classBipedalLocomotion_1_1Planners_1_1UnicycleTrajectoryPlanner_1aada2e13ef23293cfa638d25e2962d7ee" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Planners::UnicycleTrajectoryPlanner</scope><name>setInput</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1InputPort_1ad2637be5c9075a2d8f09fedc6a42d808" prot="public" virt="pure-virtual" ambiguityscope="Advanceable&lt; UnicycleTrajectoryPlannerInput, UnicycleTrajectoryPlannerOutput &gt;::"><scope>BipedalLocomotion::Planners::UnicycleTrajectoryPlanner</scope><name>setInput</name></member>
      <member refid="classBipedalLocomotion_1_1Planners_1_1UnicycleTrajectoryPlanner_1a75d0aa997ff3314e4cd143bab7a66683" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Planners::UnicycleTrajectoryPlanner</scope><name>setRobotContactFrames</name></member>
      <member refid="classBipedalLocomotion_1_1Planners_1_1UnicycleTrajectoryPlanner_1aadf821cb8d4690023fb0dc85f1da4f50" prot="private" virt="non-virtual"><scope>BipedalLocomotion::Planners::UnicycleTrajectoryPlanner</scope><name>setUnicycleControllerFromString</name></member>
      <member refid="classBipedalLocomotion_1_1Planners_1_1UnicycleTrajectoryPlanner_1ae746d9dd623b6a3a7f281fd4bc13e126" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Planners::UnicycleTrajectoryPlanner</scope><name>UnicycleTrajectoryPlanner</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1afae1137cba829874bab4a1d25d559896" prot="public" virt="virtual"><scope>BipedalLocomotion::Planners::UnicycleTrajectoryPlanner</scope><name>~Advanceable</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1InputPort_1ac9b58b0d2f6ae8821b873ed6f9817ccb" prot="public" virt="virtual"><scope>BipedalLocomotion::Planners::UnicycleTrajectoryPlanner</scope><name>~InputPort</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1OutputPort_1adcc49c38152c9204dcab4f8e87f68977" prot="public" virt="virtual"><scope>BipedalLocomotion::Planners::UnicycleTrajectoryPlanner</scope><name>~OutputPort</name></member>
      <member refid="classBipedalLocomotion_1_1Planners_1_1UnicycleTrajectoryPlanner_1ab8ce56b881f7bb79be0512aae09b8d52" prot="public" virt="virtual"><scope>BipedalLocomotion::Planners::UnicycleTrajectoryPlanner</scope><name>~UnicycleTrajectoryPlanner</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
