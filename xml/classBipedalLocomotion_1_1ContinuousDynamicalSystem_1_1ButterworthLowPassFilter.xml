<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classBipedalLocomotion_1_1ContinuousDynamicalSystem_1_1ButterworthLowPassFilter" kind="class" language="C++" prot="public">
    <compoundname>BipedalLocomotion::ContinuousDynamicalSystem::ButterworthLowPassFilter</compoundname>
    <basecompoundref refid="classBipedalLocomotion_1_1System_1_1Advanceable" prot="public" virt="non-virtual">BipedalLocomotion::System::Advanceable&lt; Eigen::VectorXd, Eigen::VectorXd &gt;</basecompoundref>
    <includes local="no">BipedalLocomotion/ContinuousDynamicalSystem/ButterworthLowPassFilter.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classBipedalLocomotion_1_1ContinuousDynamicalSystem_1_1ButterworthLowPassFilter_1a8d5f039884936fe28c8f82540495fdbe" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; Impl &gt;</type>
        <definition>std::unique_ptr&lt;Impl&gt; BipedalLocomotion::ContinuousDynamicalSystem::ButterworthLowPassFilter::m_pimpl</definition>
        <argsstring></argsstring>
        <name>m_pimpl</name>
        <briefdescription>
<para>Pimpl idiom. </para>
        </briefdescription>
        <detaileddescription>
<para>Pointer to the implementation </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/ContinuousDynamicalSystem/ButterworthLowPassFilter.h" line="163" column="21" bodyfile="BipedalLocomotion/ContinuousDynamicalSystem/ButterworthLowPassFilter.h" bodystart="162" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classBipedalLocomotion_1_1ContinuousDynamicalSystem_1_1ButterworthLowPassFilter_1a0432049333e16d63eb592add63102797" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BipedalLocomotion::ContinuousDynamicalSystem::ButterworthLowPassFilter::ButterworthLowPassFilter</definition>
        <argsstring>()</argsstring>
        <name>ButterworthLowPassFilter</name>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/ContinuousDynamicalSystem/ButterworthLowPassFilter.h" line="105" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1ContinuousDynamicalSystem_1_1ButterworthLowPassFilter_1ac440ba85ccbd64a01110dd381b75f521" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BipedalLocomotion::ContinuousDynamicalSystem::ButterworthLowPassFilter::~ButterworthLowPassFilter</definition>
        <argsstring>() override</argsstring>
        <name>~ButterworthLowPassFilter</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/ContinuousDynamicalSystem/ButterworthLowPassFilter.h" line="110" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1ContinuousDynamicalSystem_1_1ButterworthLowPassFilter_1af741179c5dd7d16769c6ddf40d317110" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::ContinuousDynamicalSystem::ButterworthLowPassFilter::initialize</definition>
        <argsstring>(std::weak_ptr&lt; const ParametersHandler::IParametersHandler &gt; handler) override</argsstring>
        <name>initialize</name>
        <reimplements refid="classBipedalLocomotion_1_1System_1_1Advanceable_1a6db247d3db83217a16e963d01f6bcb77">initialize</reimplements>
        <param>
          <type>std::weak_ptr&lt; const <ref refid="classBipedalLocomotion_1_1ParametersHandler_1_1IParametersHandler" kindref="compound">ParametersHandler::IParametersHandler</ref> &gt;</type>
          <declname>handler</declname>
        </param>
        <briefdescription>
<para>Initialize the Dynamical system. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handler</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the parameter handler. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>the following parameters are required <table rows="5" cols="4"><row>
<entry thead="yes" align='center'><para>Parameter Name   </para>
</entry><entry thead="yes" align='center'><para>Type   </para>
</entry><entry thead="yes" align='center'><para>Description   </para>
</entry><entry thead="yes" align='center'><para>Mandatory    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>sampling_time</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>double</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>Sampling time used to discrete the linear system   </para>
</entry><entry thead="no" align='center'><para>Yes    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>cutoff_frequency</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>double</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>Cutoff frequency of the low pass filter.   </para>
</entry><entry thead="no" align='center'><para>Yes    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>order</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>int</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>Order of the low pass filter.   </para>
</entry><entry thead="no" align='center'><para>Yes    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>enable_prewrapping</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>bool</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>Enable the pre-wrapping of the filter. (Default value True).   </para>
</entry><entry thead="no" align='center'><para>No   </para>
</entry></row>
</table>
</para>
</simplesect>
<simplesect kind="return"><para>true in case of success/false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/ContinuousDynamicalSystem/ButterworthLowPassFilter.h" line="125" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1ContinuousDynamicalSystem_1_1ButterworthLowPassFilter_1ae75a8cd0b563c3459747cac85aaf385d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::ContinuousDynamicalSystem::ButterworthLowPassFilter::reset</definition>
        <argsstring>(Eigen::Ref&lt; const Eigen::VectorXd &gt; initialState)</argsstring>
        <name>reset</name>
        <param>
          <type>Eigen::Ref&lt; const Eigen::VectorXd &gt;</type>
          <declname>initialState</declname>
        </param>
        <briefdescription>
<para>Set the state of the smoother. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>initialState</parametername>
</parameternamelist>
<parameterdescription>
<para>initial state of the smoother </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true in case of success, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/ContinuousDynamicalSystem/ButterworthLowPassFilter.h" line="133" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1ContinuousDynamicalSystem_1_1ButterworthLowPassFilter_1a2df7f4208b7181644e8d54d1cb7e7ac6" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::ContinuousDynamicalSystem::ButterworthLowPassFilter::advance</definition>
        <argsstring>() override</argsstring>
        <name>advance</name>
        <reimplements refid="classBipedalLocomotion_1_1System_1_1Advanceable_1a67107e46e831d93f572558b541aab6d2">advance</reimplements>
        <briefdescription>
<para>Compute the output of the filter. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true in case of success, false otherwise. </para>
</simplesect>
<simplesect kind="note"><para>The function update also the internal state of the filter. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/ContinuousDynamicalSystem/ButterworthLowPassFilter.h" line="140" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1ContinuousDynamicalSystem_1_1ButterworthLowPassFilter_1a768c0d978625281c7c71a9c15fd6cc5f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>const Eigen::VectorXd &amp;</type>
        <definition>const Eigen::VectorXd&amp; BipedalLocomotion::ContinuousDynamicalSystem::ButterworthLowPassFilter::getOutput</definition>
        <argsstring>() const override</argsstring>
        <name>getOutput</name>
        <reimplements refid="classBipedalLocomotion_1_1System_1_1OutputPort_1a8c089ecf2dd8ff0fb2732233994b6cac">getOutput</reimplements>
        <briefdescription>
<para>Get the output of the filter. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a vector containing the output of the smoother </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/ContinuousDynamicalSystem/ButterworthLowPassFilter.h" line="146" column="27"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1ContinuousDynamicalSystem_1_1ButterworthLowPassFilter_1a4860e9984e2d70d564cd71c9a242d937" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::ContinuousDynamicalSystem::ButterworthLowPassFilter::setInput</definition>
        <argsstring>(const Eigen::VectorXd &amp;input) override</argsstring>
        <name>setInput</name>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>input</declname>
        </param>
        <briefdescription>
<para>Set the input of the filter. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>the vector representing the input of the filter </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True in case of success and false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/ContinuousDynamicalSystem/ButterworthLowPassFilter.h" line="153" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1ContinuousDynamicalSystem_1_1ButterworthLowPassFilter_1a57517a93a22d0d1c13460dd0a0a96402" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::ContinuousDynamicalSystem::ButterworthLowPassFilter::isOutputValid</definition>
        <argsstring>() const override</argsstring>
        <name>isOutputValid</name>
        <reimplements refid="classBipedalLocomotion_1_1System_1_1OutputPort_1ac50de29a6160baa2bba195af9d69430a">isOutputValid</reimplements>
        <briefdescription>
<para>Determines the validity of the object retrieved with <ref refid="classBipedalLocomotion_1_1ContinuousDynamicalSystem_1_1ButterworthLowPassFilter_1a768c0d978625281c7c71a9c15fd6cc5f" kindref="member">getOutput()</ref> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if the object is valid, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/ContinuousDynamicalSystem/ButterworthLowPassFilter.h" line="159" column="10"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>ButterworthLowPass implements a low pass filter of order N. </para>
    </briefdescription>
    <detaileddescription>
<para>The system is described by the following transfer function <formula id="164">\[ H(s) = \frac{1}{\sqrt{1 + \left(\frac{s}{\omega_c}\right)^{2N}}} \]</formula> where <formula id="165">$\omega_c$</formula> is the cutoff frequency and <formula id="166">$N$</formula> is the order of the filter and <formula id="72">$s$</formula> is the Laplace variable.</para>
<para>What follows is a brief description of the filter and how it is implemented.</para>
<sect1 id="classBipedalLocomotion_1_1ContinuousDynamicalSystem_1_1ButterworthLowPassFilter_1ButterworthLowPassFilter_continuous">
<title>Compute the transfer function of the continuous system</title>
<para>What follows is taken from from Passive and Active Network Analysis and Synthesis, Aram Budak, Houghton Mifflin, 1974 and from <ulink url="https://dsp.stackexchange.com/questions/79498/butterworth-filter-poles">https://dsp.stackexchange.com/questions/79498/butterworth-filter-poles</ulink> The poles of the Butterworth filter are evenly spaced on a circle of radius <formula id="165">$\omega_c$</formula> in the s-plane. The poles are given by <formula id="167">\[ p_k = \omega_c e^{j \frac{\pi}{2} \left(1 + \frac{2k - 1}{2N}\right)} \]</formula> where <formula id="168">$k = 0, 1, \ldots, N-1$</formula> and <formula id="169">$j$</formula> is the imaginary unit. By construction, the Butterworth filter does not have zeros. The gain of the filter is given by <formula id="170">\[ K = \prod_{k=0}^{N-1} s_k = \omega_c^N \]</formula> </para>
</sect1>
<sect1 id="classBipedalLocomotion_1_1ContinuousDynamicalSystem_1_1ButterworthLowPassFilter_1ButterworthLowPassFilter_discrete">
<title>Compute the transfer function of the discrete system</title>
<para>As mentioned before, the transfer function of the discrete system is obtained by the bilinear transform <formula id="171">\[ s = \frac{2}{\delta t} \frac{1 - z^{-1}}{1 + z^{-1}} \]</formula> The poles of the discrete system are obtained by substituting the poles of the continuous system in the bilinear transformation as explained in <ulink url="https://it.mathworks.com/help/signal/ref/bilinear.html">https://it.mathworks.com/help/signal/ref/bilinear.html</ulink> The poles of the discrete system are given by <formula id="172">\[ p^d_k = \frac{1 + p_k \delta t/2}{1 - p_k \delta t/2} \]</formula> where <formula id="173">$p_k$</formula> are the poles of the continuous system, <formula id="174">$\delta t$</formula> is the sampling time and <formula id="168">$k = 0, 1, \ldots, N-1$</formula>. All the zeros of the continuous system are mapped to -1. Finally, the gain of the discrete system is given by <formula id="175">\[ K^d = \text{real} \frac{K}{ \prod (\frac{2}{\delta T} - p_k) } \]</formula> </para>
<sect2 id="classBipedalLocomotion_1_1ContinuousDynamicalSystem_1_1ButterworthLowPassFilter_1ButterworthLowPassFilter_prewrapping">
<title>Pre-wrapping</title>
<para>The ButterworthLowPass supports the pre-wrapping of the filter. The pre-wrapping is a technique used to mitigate the distortion that can occur during the bilinear transformation. It consists in shifting the poles of the continuous system in the s-plane. To easily implement the pre-wrapping, we slightly modify the bilinear transformation as <formula id="176">\[ s = \frac{\omega_c}{\tan\left(\frac{\omega_c \delta t}{2}\right)} \frac{1 - z^{-1}}{1 + z^{-1}} \]</formula> where <formula id="165">$\omega_c$</formula> is the cutoff frequency and <formula id="174">$\delta t$</formula> is the sampling time. In the class the pre-wrapping is enabled by default and can be disabled by setting the parameter <computeroutput>enable_prewrapping</computeroutput> to false. The interested reader can find more information about the pre-wrapping at <ulink url="https://en.wikipedia.org/wiki/Bilinear_transform#Frequency_warping">this link</ulink>. </para>
</sect2>
</sect1>
<sect1 id="classBipedalLocomotion_1_1ContinuousDynamicalSystem_1_1ButterworthLowPassFilter_1ButterworthLowPassFilter_coefficients">
<title>Compute the coefficients of the discrete system</title>
<para>Once we have the poles and the gain of the discrete system we can compute the coefficients of the filter by applying the <ulink url="https://en.wikipedia.org/wiki/Vieta%27s_formulas">Vieta&apos;s formulas</ulink>. The transfer function of the discrete system is given by <formula id="177">\[ H(z) = \frac{a_n + a_{n-1} z^{-1} + \ldots + a_1 z^{-n+1} + a_0 z^{-n}}{1 + b_{n-1} z^{-1} + \ldots + b_1 z^{-n+1} + b_0 z^{-n}} \]</formula> Once the numerator and the denominator are computed we can easily antitransform the transfer function to obtain the coefficients of the filter as <formula id="178">\[ y[k] = \frac{1}{b_0} \left( a_0 x[k] + a_1 x[k-1] + \ldots + a_n x[k-n] - b_1 y[k-1] - \ldots - b_n y[k-n] \right) \]</formula> where <formula id="179">$x[k]$</formula> is the input of the filter and <formula id="180">$y[k]$</formula> is the output of the filter. </para>
</sect1>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>BipedalLocomotion::System::InputPort&lt; _Input &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1InputPort"/>
      </node>
      <node id="2">
        <label>BipedalLocomotion::System::Advanceable&lt; Eigen::VectorXd, Eigen::VectorXd &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Advanceable"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="template-instance">
          <edgelabel>&lt; Eigen::VectorXd, Eigen::VectorXd &gt;</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>BipedalLocomotion::System::OutputPort&lt; _Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1OutputPort"/>
      </node>
      <node id="1">
        <label>BipedalLocomotion::ContinuousDynamicalSystem::ButterworthLowPassFilter</label>
        <link refid="classBipedalLocomotion_1_1ContinuousDynamicalSystem_1_1ButterworthLowPassFilter"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>BipedalLocomotion::System::Advanceable&lt; _Input, _Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Advanceable"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>BipedalLocomotion::System::InputPort&lt; _Input &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1InputPort"/>
      </node>
      <node id="2">
        <label>BipedalLocomotion::System::Advanceable&lt; Eigen::VectorXd, Eigen::VectorXd &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Advanceable"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="template-instance">
          <edgelabel>&lt; Eigen::VectorXd, Eigen::VectorXd &gt;</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>BipedalLocomotion::System::OutputPort&lt; _Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1OutputPort"/>
      </node>
      <node id="1">
        <label>BipedalLocomotion::ContinuousDynamicalSystem::ButterworthLowPassFilter</label>
        <link refid="classBipedalLocomotion_1_1ContinuousDynamicalSystem_1_1ButterworthLowPassFilter"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>BipedalLocomotion::System::Advanceable&lt; _Input, _Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Advanceable"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="BipedalLocomotion/ContinuousDynamicalSystem/ButterworthLowPassFilter.h" line="98" column="1" bodyfile="BipedalLocomotion/ContinuousDynamicalSystem/ButterworthLowPassFilter.h" bodystart="100" bodyend="164"/>
    <listofallmembers>
      <member refid="classBipedalLocomotion_1_1ContinuousDynamicalSystem_1_1ButterworthLowPassFilter_1a2df7f4208b7181644e8d54d1cb7e7ac6" prot="public" virt="virtual"><scope>BipedalLocomotion::ContinuousDynamicalSystem::ButterworthLowPassFilter</scope><name>advance</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1a09ee5b41c77c6b626f4d5cb775065325" prot="public" virt="non-virtual"><scope>BipedalLocomotion::ContinuousDynamicalSystem::ButterworthLowPassFilter</scope><name>Advanceable</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1aaeb3eba3073fbc844dea1eba4c9b68f3" prot="public" virt="non-virtual"><scope>BipedalLocomotion::ContinuousDynamicalSystem::ButterworthLowPassFilter</scope><name>Advanceable</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1ac1549cb26bd896e27370e97b0795ba3f" prot="public" virt="non-virtual"><scope>BipedalLocomotion::ContinuousDynamicalSystem::ButterworthLowPassFilter</scope><name>Advanceable</name></member>
      <member refid="classBipedalLocomotion_1_1ContinuousDynamicalSystem_1_1ButterworthLowPassFilter_1a0432049333e16d63eb592add63102797" prot="public" virt="non-virtual"><scope>BipedalLocomotion::ContinuousDynamicalSystem::ButterworthLowPassFilter</scope><name>ButterworthLowPassFilter</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1a618ab786bb43814b3b3012b843fce93b" prot="public" virt="virtual"><scope>BipedalLocomotion::ContinuousDynamicalSystem::ButterworthLowPassFilter</scope><name>close</name></member>
      <member refid="classBipedalLocomotion_1_1ContinuousDynamicalSystem_1_1ButterworthLowPassFilter_1a768c0d978625281c7c71a9c15fd6cc5f" prot="public" virt="virtual"><scope>BipedalLocomotion::ContinuousDynamicalSystem::ButterworthLowPassFilter</scope><name>getOutput</name></member>
      <member refid="classBipedalLocomotion_1_1ContinuousDynamicalSystem_1_1ButterworthLowPassFilter_1af741179c5dd7d16769c6ddf40d317110" prot="public" virt="virtual"><scope>BipedalLocomotion::ContinuousDynamicalSystem::ButterworthLowPassFilter</scope><name>initialize</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1a975a7ecbf38c917c7b72519581fc7dba" prot="public" virt="non-virtual"><scope>BipedalLocomotion::ContinuousDynamicalSystem::ButterworthLowPassFilter</scope><name>Input</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1InputPort_1a27c614cb30c1e4b78e64791f4919dfa7" prot="public" virt="non-virtual"><scope>BipedalLocomotion::ContinuousDynamicalSystem::ButterworthLowPassFilter</scope><name>InputPort</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1InputPort_1a74d1418613e89a7f2993ea936228a44a" prot="public" virt="non-virtual"><scope>BipedalLocomotion::ContinuousDynamicalSystem::ButterworthLowPassFilter</scope><name>InputPort</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1InputPort_1a02ec5c947f1d2d83d2952c3b899cc58f" prot="public" virt="non-virtual"><scope>BipedalLocomotion::ContinuousDynamicalSystem::ButterworthLowPassFilter</scope><name>InputPort</name></member>
      <member refid="classBipedalLocomotion_1_1ContinuousDynamicalSystem_1_1ButterworthLowPassFilter_1a57517a93a22d0d1c13460dd0a0a96402" prot="public" virt="virtual"><scope>BipedalLocomotion::ContinuousDynamicalSystem::ButterworthLowPassFilter</scope><name>isOutputValid</name></member>
      <member refid="classBipedalLocomotion_1_1ContinuousDynamicalSystem_1_1ButterworthLowPassFilter_1a8d5f039884936fe28c8f82540495fdbe" prot="private" virt="non-virtual"><scope>BipedalLocomotion::ContinuousDynamicalSystem::ButterworthLowPassFilter</scope><name>m_pimpl</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1ae147cdee9ff9160a9dfe0d3e349a9aad" prot="public" virt="non-virtual"><scope>BipedalLocomotion::ContinuousDynamicalSystem::ButterworthLowPassFilter</scope><name>operator=</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1adf0d9fc07bab0ec5d4db7f3a35816bf2" prot="public" virt="non-virtual"><scope>BipedalLocomotion::ContinuousDynamicalSystem::ButterworthLowPassFilter</scope><name>operator=</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1InputPort_1a54f476d3c8d6d003fb714309ea6272aa" prot="public" virt="non-virtual" ambiguityscope="BipedalLocomotion::System::InputPort::"><scope>BipedalLocomotion::ContinuousDynamicalSystem::ButterworthLowPassFilter</scope><name>operator=</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1InputPort_1adb341b37472241b6da8b552166308d7b" prot="public" virt="non-virtual" ambiguityscope="BipedalLocomotion::System::InputPort::"><scope>BipedalLocomotion::ContinuousDynamicalSystem::ButterworthLowPassFilter</scope><name>operator=</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1OutputPort_1af5e15f5e4962a5c8e0f0c0a49adb9ca1" prot="public" virt="non-virtual" ambiguityscope="BipedalLocomotion::System::OutputPort::"><scope>BipedalLocomotion::ContinuousDynamicalSystem::ButterworthLowPassFilter</scope><name>operator=</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1OutputPort_1ad5c6ce3ad7d2a064d7bb512fe0bc489e" prot="public" virt="non-virtual" ambiguityscope="BipedalLocomotion::System::OutputPort::"><scope>BipedalLocomotion::ContinuousDynamicalSystem::ButterworthLowPassFilter</scope><name>operator=</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1a69603f2c9c608815908425b5b8c2005c" prot="public" virt="non-virtual"><scope>BipedalLocomotion::ContinuousDynamicalSystem::ButterworthLowPassFilter</scope><name>Output</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1OutputPort_1a7c0d15e677a1935918fc747ba4c25ec1" prot="public" virt="non-virtual"><scope>BipedalLocomotion::ContinuousDynamicalSystem::ButterworthLowPassFilter</scope><name>OutputPort</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1OutputPort_1a0a39b891749961d34507b4b591886741" prot="public" virt="non-virtual"><scope>BipedalLocomotion::ContinuousDynamicalSystem::ButterworthLowPassFilter</scope><name>OutputPort</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1OutputPort_1a581340f280eca1890a8a7b2331761b57" prot="public" virt="non-virtual"><scope>BipedalLocomotion::ContinuousDynamicalSystem::ButterworthLowPassFilter</scope><name>OutputPort</name></member>
      <member refid="classBipedalLocomotion_1_1ContinuousDynamicalSystem_1_1ButterworthLowPassFilter_1ae75a8cd0b563c3459747cac85aaf385d" prot="public" virt="non-virtual"><scope>BipedalLocomotion::ContinuousDynamicalSystem::ButterworthLowPassFilter</scope><name>reset</name></member>
      <member refid="classBipedalLocomotion_1_1ContinuousDynamicalSystem_1_1ButterworthLowPassFilter_1a4860e9984e2d70d564cd71c9a242d937" prot="public" virt="non-virtual"><scope>BipedalLocomotion::ContinuousDynamicalSystem::ButterworthLowPassFilter</scope><name>setInput</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1InputPort_1ad2637be5c9075a2d8f09fedc6a42d808" prot="public" virt="pure-virtual" ambiguityscope="Advanceable&lt; Eigen::VectorXd, Eigen::VectorXd &gt;::"><scope>BipedalLocomotion::ContinuousDynamicalSystem::ButterworthLowPassFilter</scope><name>setInput</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1afae1137cba829874bab4a1d25d559896" prot="public" virt="virtual"><scope>BipedalLocomotion::ContinuousDynamicalSystem::ButterworthLowPassFilter</scope><name>~Advanceable</name></member>
      <member refid="classBipedalLocomotion_1_1ContinuousDynamicalSystem_1_1ButterworthLowPassFilter_1ac440ba85ccbd64a01110dd381b75f521" prot="public" virt="non-virtual"><scope>BipedalLocomotion::ContinuousDynamicalSystem::ButterworthLowPassFilter</scope><name>~ButterworthLowPassFilter</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1InputPort_1ac9b58b0d2f6ae8821b873ed6f9817ccb" prot="public" virt="virtual"><scope>BipedalLocomotion::ContinuousDynamicalSystem::ButterworthLowPassFilter</scope><name>~InputPort</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1OutputPort_1adcc49c38152c9204dcab4f8e87f68977" prot="public" virt="virtual"><scope>BipedalLocomotion::ContinuousDynamicalSystem::ButterworthLowPassFilter</scope><name>~OutputPort</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
