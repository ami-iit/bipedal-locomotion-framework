<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classBipedalLocomotion_1_1Math_1_1Spline" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>BipedalLocomotion::Math::Spline</compoundname>
    <basecompoundref refid="classBipedalLocomotion_1_1System_1_1Source" prot="public" virt="non-virtual">BipedalLocomotion::System::Source&lt; TrajectoryPoint&lt; T &gt; &gt;</basecompoundref>
    <derivedcompoundref refid="classBipedalLocomotion_1_1Math_1_1CubicSpline" prot="public" virt="non-virtual">BipedalLocomotion::Math::CubicSpline&lt; T &gt;</derivedcompoundref>
    <derivedcompoundref refid="classBipedalLocomotion_1_1Math_1_1LinearSpline" prot="public" virt="non-virtual">BipedalLocomotion::Math::LinearSpline&lt; T &gt;</derivedcompoundref>
    <derivedcompoundref refid="classBipedalLocomotion_1_1Math_1_1QuinticSpline" prot="public" virt="non-virtual">BipedalLocomotion::Math::QuinticSpline&lt; T &gt;</derivedcompoundref>
    <derivedcompoundref refid="classBipedalLocomotion_1_1Math_1_1ZeroOrderSpline" prot="public" virt="non-virtual">BipedalLocomotion::Math::ZeroOrderSpline&lt; T &gt;</derivedcompoundref>
    <includes local="no">BipedalLocomotion/Math/Spline.h</includes>
    <innerclass refid="structBipedalLocomotion_1_1Math_1_1Spline_1_1DerivativeBoundaryConditions" prot="public">BipedalLocomotion::Math::Spline::DerivativeBoundaryConditions</innerclass>
    <innerclass refid="structBipedalLocomotion_1_1Math_1_1Spline_1_1Polynomial" prot="protected">BipedalLocomotion::Math::Spline::Polynomial</innerclass>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classBipedalLocomotion_1_1Math_1_1Spline_1ac7c3ffafdc2f04a85b8cc2c25d953f64" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="structBipedalLocomotion_1_1Math_1_1TrajectoryPoint" kindref="compound">TrajectoryPoint</ref>&lt; T &gt; &gt;</type>
        <definition>std::vector&lt;TrajectoryPoint&lt;T&gt; &gt; BipedalLocomotion::Math::Spline&lt; T &gt;::m_knots</definition>
        <argsstring></argsstring>
        <name>m_knots</name>
        <briefdescription>
<para>Knots of the spline. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Math/Spline.h" line="220" column="17" bodyfile="BipedalLocomotion/Math/Spline.h" bodystart="220" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBipedalLocomotion_1_1Math_1_1Spline_1acff8ec4aa58769503bc251d8cfc689c7" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="structBipedalLocomotion_1_1Math_1_1Spline_1_1Polynomial" kindref="compound">Polynomial</ref> &gt;</type>
        <definition>std::vector&lt;Polynomial&gt; BipedalLocomotion::Math::Spline&lt; T &gt;::m_polynomials</definition>
        <argsstring></argsstring>
        <name>m_polynomials</name>
        <briefdescription>
<para>Polynomials of the spline. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Math/Spline.h" line="221" column="17" bodyfile="BipedalLocomotion/Math/Spline.h" bodystart="221" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classBipedalLocomotion_1_1Math_1_1Spline_1aaa3ab6ae7a525cf56a9720a33ca87595" prot="private" static="no" mutable="no">
        <type>T</type>
        <definition>T BipedalLocomotion::Math::Spline&lt; T &gt;::m_dummy</definition>
        <argsstring></argsstring>
        <name>m_dummy</name>
        <briefdescription>
<para>Dummy variable used to avoid the creation of a temporary variable. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Math/Spline.h" line="243" column="7" bodyfile="BipedalLocomotion/Math/Spline.h" bodystart="243" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBipedalLocomotion_1_1Math_1_1Spline_1aecdbdde582a1deffdaef21a7da245f70" prot="private" static="no" mutable="no">
        <type><ref refid="structBipedalLocomotion_1_1Math_1_1TrajectoryPoint" kindref="compound">TrajectoryPoint</ref>&lt; T &gt;</type>
        <definition>TrajectoryPoint&lt;T&gt; BipedalLocomotion::Math::Spline&lt; T &gt;::m_currentTrajectoryPoint</definition>
        <argsstring></argsstring>
        <name>m_currentTrajectoryPoint</name>
        <briefdescription>
<para>Current trajectory. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Math/Spline.h" line="244" column="21" bodyfile="BipedalLocomotion/Math/Spline.h" bodystart="244" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBipedalLocomotion_1_1Math_1_1Spline_1a61f107976f0a2641d9f8bdf1ae75853c" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool BipedalLocomotion::Math::Spline&lt; T &gt;::m_isOutputValid</definition>
        <argsstring></argsstring>
        <name>m_isOutputValid</name>
        <initializer>{false}</initializer>
        <briefdescription>
<para>True if the output is valid. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Math/Spline.h" line="245" column="10" bodyfile="BipedalLocomotion/Math/Spline.h" bodystart="245" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBipedalLocomotion_1_1Math_1_1Spline_1ae489f71f71153c87384222b1915320ae" prot="private" static="no" mutable="no">
        <type>std::chrono::nanoseconds</type>
        <definition>std::chrono::nanoseconds BipedalLocomotion::Math::Spline&lt; T &gt;::m_advanceCurrentTime</definition>
        <argsstring></argsstring>
        <name>m_advanceCurrentTime</name>
        <briefdescription>
<para>Current time of the advance interface. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Math/Spline.h" line="247" column="30" bodyfile="BipedalLocomotion/Math/Spline.h" bodystart="247" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBipedalLocomotion_1_1Math_1_1Spline_1a66b1933fa0e91491d66559df47d9d7ad" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool BipedalLocomotion::Math::Spline&lt; T &gt;::m_areCoefficientsComputed</definition>
        <argsstring></argsstring>
        <name>m_areCoefficientsComputed</name>
        <initializer>{false}</initializer>
        <briefdescription>
<para>True if the coefficients are computed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Math/Spline.h" line="248" column="10" bodyfile="BipedalLocomotion/Math/Spline.h" bodystart="248" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBipedalLocomotion_1_1Math_1_1Spline_1a9c5e42bc760e87b2b7605c42f6d749f0" prot="private" static="no" mutable="no">
        <type><ref refid="structBipedalLocomotion_1_1Math_1_1Spline_1_1DerivativeBoundaryConditions" kindref="compound">DerivativeBoundaryConditions</ref></type>
        <definition>DerivativeBoundaryConditions BipedalLocomotion::Math::Spline&lt; T &gt;::m_initialConditions</definition>
        <argsstring></argsstring>
        <name>m_initialConditions</name>
        <briefdescription>
<para>Initial conditions of the spline. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Math/Spline.h" line="250" column="34" bodyfile="BipedalLocomotion/Math/Spline.h" bodystart="250" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBipedalLocomotion_1_1Math_1_1Spline_1a22eb50930806f1f270382d47dee7cb10" prot="private" static="no" mutable="no">
        <type><ref refid="structBipedalLocomotion_1_1Math_1_1Spline_1_1DerivativeBoundaryConditions" kindref="compound">DerivativeBoundaryConditions</ref></type>
        <definition>DerivativeBoundaryConditions BipedalLocomotion::Math::Spline&lt; T &gt;::m_finalConditions</definition>
        <argsstring></argsstring>
        <name>m_finalConditions</name>
        <briefdescription>
<para>Final conditions of the spline. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Math/Spline.h" line="251" column="34" bodyfile="BipedalLocomotion/Math/Spline.h" bodystart="251" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBipedalLocomotion_1_1Math_1_1Spline_1a809cdbcd81f1905bbb2e90ead08ef8bd" prot="private" static="no" mutable="no">
        <type>std::chrono::nanoseconds</type>
        <definition>std::chrono::nanoseconds BipedalLocomotion::Math::Spline&lt; T &gt;::m_dT</definition>
        <argsstring></argsstring>
        <name>m_dT</name>
        <briefdescription>
<para>Time step of the advance interface. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Math/Spline.h" line="253" column="30" bodyfile="BipedalLocomotion/Math/Spline.h" bodystart="253" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classBipedalLocomotion_1_1Math_1_1Spline_1aef6b39b238c112bc74348d1c9d2c66c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual BipedalLocomotion::Math::Spline&lt; T &gt;::~Spline</definition>
        <argsstring>()=default</argsstring>
        <name>~Spline</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Math/Spline.h" line="62" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Math_1_1Spline_1a645584a5318f34174b6ce5174032f4c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::Math::Spline&lt; T &gt;::setAdvanceTimeStep</definition>
        <argsstring>(const std::chrono::nanoseconds &amp;dt)</argsstring>
        <name>setAdvanceTimeStep</name>
        <param>
          <type>const std::chrono::nanoseconds &amp;</type>
          <declname>dt</declname>
        </param>
        <briefdescription>
<para>Set the time step of the advance interface. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>if the the time step is not set, the user cannot use the advance features. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dt</parametername>
</parameternamelist>
<parameterdescription>
<para>the time step of the advance block. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True in case of success, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Math/Spline.h" line="70" column="10" bodyfile="BipedalLocomotion/Math/Spline.h" bodystart="752" bodyend="762"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Math_1_1Spline_1af11908563fbb5104d97492310a19e29f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::Math::Spline&lt; T &gt;::setKnots</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;position, const std::vector&lt; std::chrono::nanoseconds &gt; &amp;time)</argsstring>
        <name>setKnots</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>position</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::chrono::nanoseconds &gt; &amp;</type>
          <declname>time</declname>
        </param>
        <briefdescription>
<para>Set the knots of the spline. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>position of the knots in <formula id="109">$\mathbb{R}^n$</formula>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>time</parametername>
</parameternamelist>
<parameterdescription>
<para>vector containing the time instant of the knots. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True in case of success, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Math/Spline.h" line="78" column="10" bodyfile="BipedalLocomotion/Math/Spline.h" bodystart="323" bodyend="386"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Math_1_1Spline_1a3b09d555e4a5d8abfe1d08fbac294ad8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::Math::Spline&lt; T &gt;::setInitialConditions</definition>
        <argsstring>(const DerivativeBoundaryConditions &amp;initialConditions)</argsstring>
        <name>setInitialConditions</name>
        <param>
          <type>const <ref refid="structBipedalLocomotion_1_1Math_1_1Spline_1_1DerivativeBoundaryConditions" kindref="compound">DerivativeBoundaryConditions</ref> &amp;</type>
          <declname>initialConditions</declname>
        </param>
        <briefdescription>
<para>Set the initial condition of the spline. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>initialConditions</parametername>
</parameternamelist>
<parameterdescription>
<para>initial conditions of the spline. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True in case of success, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Math/Spline.h" line="86" column="10" bodyfile="BipedalLocomotion/Math/Spline.h" bodystart="396" bodyend="411"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Math_1_1Spline_1a3a73b41acf09e871b30b8315963c8ca9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::Math::Spline&lt; T &gt;::setFinalConditions</definition>
        <argsstring>(const DerivativeBoundaryConditions &amp;finalConditions)</argsstring>
        <name>setFinalConditions</name>
        <param>
          <type>const <ref refid="structBipedalLocomotion_1_1Math_1_1Spline_1_1DerivativeBoundaryConditions" kindref="compound">DerivativeBoundaryConditions</ref> &amp;</type>
          <declname>finalConditions</declname>
        </param>
        <briefdescription>
<para>Set the final condition of the spline. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>finalConditions</parametername>
</parameternamelist>
<parameterdescription>
<para>final conditions of the spline. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True in case of success, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Math/Spline.h" line="93" column="10" bodyfile="BipedalLocomotion/Math/Spline.h" bodystart="421" bodyend="436"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Math_1_1Spline_1a1bddbcb7b19b36aadbbb5339786036a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::Math::Spline&lt; T &gt;::setInitialConditions</definition>
        <argsstring>(Eigen::Ref&lt; const T &gt; initialVelocity, Eigen::Ref&lt; const T &gt; initialAcceleration)</argsstring>
        <name>setInitialConditions</name>
        <param>
          <type>Eigen::Ref&lt; const T &gt;</type>
          <declname>initialVelocity</declname>
        </param>
        <param>
          <type>Eigen::Ref&lt; const T &gt;</type>
          <declname>initialAcceleration</declname>
        </param>
        <briefdescription>
<para>Set the initial condition of the spline. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>velocity</parametername>
</parameternamelist>
<parameterdescription>
<para>initial velocity (i.e. first derivative). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>acceleration</parametername>
</parameternamelist>
<parameterdescription>
<para>initial acceleration (i.e. second derivative). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True in case of success, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Math/Spline.h" line="101" column="10" bodyfile="BipedalLocomotion/Math/Spline.h" bodystart="389" bodyend="393"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Math_1_1Spline_1a42d9ee9e30261fd741b8344d8fca1832" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::Math::Spline&lt; T &gt;::setFinalConditions</definition>
        <argsstring>(Eigen::Ref&lt; const T &gt; finalVelocity, Eigen::Ref&lt; const T &gt; finalAcceleration)</argsstring>
        <name>setFinalConditions</name>
        <param>
          <type>Eigen::Ref&lt; const T &gt;</type>
          <declname>finalVelocity</declname>
        </param>
        <param>
          <type>Eigen::Ref&lt; const T &gt;</type>
          <declname>finalAcceleration</declname>
        </param>
        <briefdescription>
<para>Set the final condition of the spline. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>velocity</parametername>
</parameternamelist>
<parameterdescription>
<para>final velocity (i.e. first derivative). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>acceleration</parametername>
</parameternamelist>
<parameterdescription>
<para>final acceleration (i.e. second derivative). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True in case of success, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Math/Spline.h" line="110" column="10" bodyfile="BipedalLocomotion/Math/Spline.h" bodystart="414" bodyend="418"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Math_1_1Spline_1a98e97511aed7db9f13007ad55b6d7b5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::Math::Spline&lt; T &gt;::evaluatePoint</definition>
        <argsstring>(const std::chrono::nanoseconds &amp;t, Eigen::Ref&lt; T &gt; position, Eigen::Ref&lt; T &gt; velocity, Eigen::Ref&lt; T &gt; acceleration)</argsstring>
        <name>evaluatePoint</name>
        <param>
          <type>const std::chrono::nanoseconds &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>Eigen::Ref&lt; T &gt;</type>
          <declname>position</declname>
        </param>
        <param>
          <type>Eigen::Ref&lt; T &gt;</type>
          <declname>velocity</declname>
        </param>
        <param>
          <type>Eigen::Ref&lt; T &gt;</type>
          <declname>acceleration</declname>
        </param>
        <briefdescription>
<para>Evaluate the spline at a given point. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>instant time </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>position at time t </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>velocity</parametername>
</parameternamelist>
<parameterdescription>
<para>velocity at time t </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>acceleration</parametername>
</parameternamelist>
<parameterdescription>
<para>acceleration at time t </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True in case of success, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Math/Spline.h" line="121" column="10" bodyfile="BipedalLocomotion/Math/Spline.h" bodystart="594" bodyend="641"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Math_1_1Spline_1a40df1bf5d140a620b2cf365047c60215" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::Math::Spline&lt; T &gt;::evaluatePoint</definition>
        <argsstring>(const std::chrono::nanoseconds &amp;t, Eigen::Ref&lt; T &gt; position)</argsstring>
        <name>evaluatePoint</name>
        <param>
          <type>const std::chrono::nanoseconds &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>Eigen::Ref&lt; T &gt;</type>
          <declname>position</declname>
        </param>
        <briefdescription>
<para>Evaluate the spline at a given point. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>instant time </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>position at time t </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True in case of success, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Math/Spline.h" line="132" column="10" bodyfile="BipedalLocomotion/Math/Spline.h" bodystart="580" bodyend="583"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Math_1_1Spline_1a14fcc91da964940098ff0a6f0536f622" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::Math::Spline&lt; T &gt;::evaluatePoint</definition>
        <argsstring>(const std::chrono::nanoseconds &amp;t, Eigen::Ref&lt; T &gt; position, Eigen::Ref&lt; T &gt; velocity)</argsstring>
        <name>evaluatePoint</name>
        <param>
          <type>const std::chrono::nanoseconds &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>Eigen::Ref&lt; T &gt;</type>
          <declname>position</declname>
        </param>
        <param>
          <type>Eigen::Ref&lt; T &gt;</type>
          <declname>velocity</declname>
        </param>
        <briefdescription>
<para>Evaluate the spline at a given point. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>instant time </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>position at time t </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>velocity</parametername>
</parameternamelist>
<parameterdescription>
<para>velocity at time t </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True in case of success, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Math/Spline.h" line="142" column="10" bodyfile="BipedalLocomotion/Math/Spline.h" bodystart="586" bodyend="591"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Math_1_1Spline_1a2de97d0a599929a5b702317ed4745b64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::Math::Spline&lt; T &gt;::evaluateOrderedPoints</definition>
        <argsstring>(const std::vector&lt; std::chrono::nanoseconds &gt; &amp;t, std::vector&lt; T &gt; &amp;position, std::vector&lt; T &gt; &amp;velocity, std::vector&lt; T &gt; &amp;acceleration)</argsstring>
        <name>evaluateOrderedPoints</name>
        <param>
          <type>const std::vector&lt; std::chrono::nanoseconds &gt; &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>std::vector&lt; T &gt; &amp;</type>
          <declname>position</declname>
        </param>
        <param>
          <type>std::vector&lt; T &gt; &amp;</type>
          <declname>velocity</declname>
        </param>
        <param>
          <type>std::vector&lt; T &gt; &amp;</type>
          <declname>acceleration</declname>
        </param>
        <briefdescription>
<para>Evaluate the spline at given set of points. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>ordered vector containing the time instant </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>position at time t </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>velocity</parametername>
</parameternamelist>
<parameterdescription>
<para>velocity at time t </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>acceleration</parametername>
</parameternamelist>
<parameterdescription>
<para>acceleration at time t </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True in case of success, false otherwise. </para>
</simplesect>
<simplesect kind="note"><para>The time vector has to be ordered. No check is performed. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Math/Spline.h" line="155" column="10" bodyfile="BipedalLocomotion/Math/Spline.h" bodystart="644" bodyend="711"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Math_1_1Spline_1a9481d1827dc2abcee390361dc84671ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::Math::Spline&lt; T &gt;::evaluatePoint</definition>
        <argsstring>(const std::chrono::nanoseconds &amp;t, TrajectoryPoint&lt; T &gt; &amp;state)</argsstring>
        <name>evaluatePoint</name>
        <param>
          <type>const std::chrono::nanoseconds &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type><ref refid="structBipedalLocomotion_1_1Math_1_1TrajectoryPoint" kindref="compound">TrajectoryPoint</ref>&lt; T &gt; &amp;</type>
          <declname>state</declname>
        </param>
        <briefdescription>
<para>Evaluate the spline at a given point. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>instant time </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>state</parametername>
</parameternamelist>
<parameterdescription>
<para>of the system </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True in case of success, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Math/Spline.h" line="166" column="10" bodyfile="BipedalLocomotion/Math/Spline.h" bodystart="714" bodyend="718"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Math_1_1Spline_1a016211240b78f71eca3fcbe0db741464" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::Math::Spline&lt; T &gt;::isOutputValid</definition>
        <argsstring>() const final</argsstring>
        <name>isOutputValid</name>
        <reimplements refid="classBipedalLocomotion_1_1System_1_1OutputPort_1ac50de29a6160baa2bba195af9d69430a">isOutputValid</reimplements>
        <briefdescription>
<para>Check if the output is valid. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if the output is valid, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Math/Spline.h" line="172" column="10" bodyfile="BipedalLocomotion/Math/Spline.h" bodystart="720" bodyend="723"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Math_1_1Spline_1a5b22ec55c97bccb788fc7ea18dd9510a" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>const <ref refid="structBipedalLocomotion_1_1Math_1_1TrajectoryPoint" kindref="compound">TrajectoryPoint</ref>&lt; T &gt; &amp;</type>
        <definition>const TrajectoryPoint&lt; T &gt; &amp; BipedalLocomotion::Math::Spline&lt; T &gt;::getOutput</definition>
        <argsstring>() const final</argsstring>
        <name>getOutput</name>
        <reimplements refid="classBipedalLocomotion_1_1System_1_1OutputPort_1a8c089ecf2dd8ff0fb2732233994b6cac">getOutput</reimplements>
        <briefdescription>
<para>Get the output of the system. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The output of the system. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Math/Spline.h" line="178" column="27" bodyfile="BipedalLocomotion/Math/Spline.h" bodystart="725" bodyend="728"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Math_1_1Spline_1a8cf213c9db189bce27a429555f664e60" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::Math::Spline&lt; T &gt;::advance</definition>
        <argsstring>() final</argsstring>
        <name>advance</name>
        <reimplements refid="classBipedalLocomotion_1_1System_1_1Advanceable_1a67107e46e831d93f572558b541aab6d2">advance</reimplements>
        <briefdescription>
<para>Advance the system. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True in case of success, false otherwise. </para>
</simplesect>
<simplesect kind="note"><para>The user has to set the time step of the advance interface. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Math/Spline.h" line="185" column="10" bodyfile="BipedalLocomotion/Math/Spline.h" bodystart="730" bodyend="750"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classBipedalLocomotion_1_1Math_1_1Spline_1a517fd4d8d5ad9328fb140705fbb24fc1" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::Math::Spline&lt; T &gt;::computePhasesDuration</definition>
        <argsstring>()</argsstring>
        <name>computePhasesDuration</name>
        <briefdescription>
<para>Compute the duration of each phase (sub-trajectory). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True in case of success, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Math/Spline.h" line="227" column="10" bodyfile="BipedalLocomotion/Math/Spline.h" bodystart="438" bodyend="454"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Math_1_1Spline_1af3624bb84475635eeacd16ceccd73604" prot="protected" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void BipedalLocomotion::Math::Spline&lt; T &gt;::computeIntermediateQuantities</definition>
        <argsstring>()=0</argsstring>
        <name>computeIntermediateQuantities</name>
        <reimplementedby refid="classBipedalLocomotion_1_1Math_1_1CubicSpline_1acf0a2911c75973ad055e1c7c985ddbf6">computeIntermediateQuantities</reimplementedby>
        <reimplementedby refid="classBipedalLocomotion_1_1Math_1_1LinearSpline_1ad3b4c65d713c2dae524e731ce78a37f6">computeIntermediateQuantities</reimplementedby>
        <reimplementedby refid="classBipedalLocomotion_1_1Math_1_1QuinticSpline_1a9bce323ed365779e68cb2ab8311d0b30">computeIntermediateQuantities</reimplementedby>
        <reimplementedby refid="classBipedalLocomotion_1_1Math_1_1ZeroOrderSpline_1a98e9c06997a0b0a2ae0e8d05df8afc3a">computeIntermediateQuantities</reimplementedby>
        <briefdescription>
<para>Compute the intermediate quantities of the spline. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True in case of success, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Math/Spline.h" line="233" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Math_1_1Spline_1abeb15638f72f826a0b6d68669dfba59a" prot="protected" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void BipedalLocomotion::Math::Spline&lt; T &gt;::updatePolynomialCoefficients</definition>
        <argsstring>(Polynomial &amp;polynomial)=0</argsstring>
        <name>updatePolynomialCoefficients</name>
        <param>
          <type><ref refid="structBipedalLocomotion_1_1Math_1_1Spline_1_1Polynomial" kindref="compound">Polynomial</ref> &amp;</type>
          <declname>polynomial</declname>
        </param>
        <briefdescription>
<para>Set the coefficients of the polynomial. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>polynomial</parametername>
</parameternamelist>
<parameterdescription>
<para>polynomial to be updated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True in case of success, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Math/Spline.h" line="240" column="18"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classBipedalLocomotion_1_1Math_1_1Spline_1a6338ee07ce172c3112b53716c483f496" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::Math::Spline&lt; T &gt;::computeCoefficients</definition>
        <argsstring>()</argsstring>
        <name>computeCoefficients</name>
        <briefdescription>
<para>Compute the coefficients of the spline. </para>
        </briefdescription>
        <detaileddescription>
<para>If the coefficients are already computed the function is a no-op. <simplesect kind="note"><para>This function calls computeIntermediateQuantities and updatePolynomialCoefficients. </para>
</simplesect>
<simplesect kind="return"><para>True in case of success, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Math/Spline.h" line="261" column="10" bodyfile="BipedalLocomotion/Math/Spline.h" bodystart="516" bodyend="577"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Math_1_1Spline_1ab0fac14b4b44aea72744f00c7b56059d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::Math::Spline&lt; T &gt;::setBoundaryVelocitiesAndAcceleration</definition>
        <argsstring>()</argsstring>
        <name>setBoundaryVelocitiesAndAcceleration</name>
        <briefdescription>
<para>Set the boundary conditions related to the velocity and acceleration. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True in case of success, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Math/Spline.h" line="267" column="10" bodyfile="BipedalLocomotion/Math/Spline.h" bodystart="456" bodyend="514"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="classBipedalLocomotion_1_1Math_1_1Spline" kindref="compound">Spline</ref> implement a basic spline. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="note"><para>The spline is defined as a set of polynomials. The coefficients of the polynomials are computed using the boundary conditions. The boundary conditions are the initial and final velocity and acceleration. </para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>type of the spline. T must be an Eigen type (i.e. Eigen::Vector3d). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="4">
        <label>BipedalLocomotion::System::InputPort&lt; _Input &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1InputPort"/>
      </node>
      <node id="2">
        <label>BipedalLocomotion::System::Source&lt; TrajectoryPoint&lt; T &gt; &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Source"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="template-instance">
          <edgelabel>&lt; TrajectoryPoint&lt; T &gt; &gt;</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>BipedalLocomotion::Math::Spline&lt; T &gt;</label>
        <link refid="classBipedalLocomotion_1_1Math_1_1Spline"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11">
        <label>BipedalLocomotion::Math::ZeroOrderSpline&lt; T &gt;</label>
        <link refid="classBipedalLocomotion_1_1Math_1_1ZeroOrderSpline"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>BipedalLocomotion::System::OutputPort&lt; _Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1OutputPort"/>
      </node>
      <node id="10">
        <label>BipedalLocomotion::Math::QuinticSpline&lt; T &gt;</label>
        <link refid="classBipedalLocomotion_1_1Math_1_1QuinticSpline"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>BipedalLocomotion::Math::LinearSpline&lt; T &gt;</label>
        <link refid="classBipedalLocomotion_1_1Math_1_1LinearSpline"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>BipedalLocomotion::System::Advanceable&lt; EmptySignal, Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Advanceable"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="template-instance">
          <edgelabel>&lt; EmptySignal, Output &gt;</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>BipedalLocomotion::Math::CubicSpline&lt; T &gt;</label>
        <link refid="classBipedalLocomotion_1_1Math_1_1CubicSpline"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>BipedalLocomotion::System::Source&lt; Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Source"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>BipedalLocomotion::System::Advanceable&lt; _Input, _Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Advanceable"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="4">
        <label>BipedalLocomotion::System::InputPort&lt; _Input &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1InputPort"/>
      </node>
      <node id="11">
        <label>T</label>
      </node>
      <node id="10">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="11" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>BipedalLocomotion::System::Source&lt; TrajectoryPoint&lt; T &gt; &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Source"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="template-instance">
          <edgelabel>&lt; TrajectoryPoint&lt; T &gt; &gt;</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>BipedalLocomotion::Math::Spline&lt; T &gt;</label>
        <link refid="classBipedalLocomotion_1_1Math_1_1Spline"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>m_polynomials</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>m_knots</edgelabel>
        </childnode>
      </node>
      <node id="12">
        <label>std::vector&lt; BipedalLocomotion::Math::TrajectoryPoint&lt; T &gt; &gt;</label>
        <childnode refid="10" relation="template-instance">
          <edgelabel>&lt; BipedalLocomotion::Math::TrajectoryPoint&lt; T &gt; &gt;</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>std::vector&lt; BipedalLocomotion::Math::Spline::Polynomial &gt;</label>
        <childnode refid="9" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
        <childnode refid="10" relation="template-instance">
          <edgelabel>&lt; BipedalLocomotion::Math::Spline::Polynomial &gt;</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>BipedalLocomotion::System::OutputPort&lt; _Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1OutputPort"/>
      </node>
      <node id="9">
        <label>BipedalLocomotion::Math::Spline&lt; T &gt;::Polynomial</label>
        <link refid="structBipedalLocomotion_1_1Math_1_1Spline_1_1Polynomial"/>
      </node>
      <node id="7">
        <label>BipedalLocomotion::System::Advanceable&lt; EmptySignal, Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Advanceable"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="template-instance">
          <edgelabel>&lt; EmptySignal, Output &gt;</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>BipedalLocomotion::System::Source&lt; Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Source"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>BipedalLocomotion::System::Advanceable&lt; _Input, _Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Advanceable"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="BipedalLocomotion/Math/Spline.h" line="43" column="12" bodyfile="BipedalLocomotion/Math/Spline.h" bodystart="44" bodyend="268"/>
    <listofallmembers>
      <member refid="classBipedalLocomotion_1_1Math_1_1Spline_1a8cf213c9db189bce27a429555f664e60" prot="public" virt="virtual"><scope>BipedalLocomotion::Math::Spline</scope><name>advance</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1a09ee5b41c77c6b626f4d5cb775065325" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Math::Spline</scope><name>Advanceable</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1aaeb3eba3073fbc844dea1eba4c9b68f3" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Math::Spline</scope><name>Advanceable</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1ac1549cb26bd896e27370e97b0795ba3f" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Math::Spline</scope><name>Advanceable</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1a618ab786bb43814b3b3012b843fce93b" prot="public" virt="virtual"><scope>BipedalLocomotion::Math::Spline</scope><name>close</name></member>
      <member refid="classBipedalLocomotion_1_1Math_1_1Spline_1a6338ee07ce172c3112b53716c483f496" prot="private" virt="non-virtual"><scope>BipedalLocomotion::Math::Spline</scope><name>computeCoefficients</name></member>
      <member refid="classBipedalLocomotion_1_1Math_1_1Spline_1af3624bb84475635eeacd16ceccd73604" prot="protected" virt="pure-virtual"><scope>BipedalLocomotion::Math::Spline</scope><name>computeIntermediateQuantities</name></member>
      <member refid="classBipedalLocomotion_1_1Math_1_1Spline_1a517fd4d8d5ad9328fb140705fbb24fc1" prot="protected" virt="non-virtual"><scope>BipedalLocomotion::Math::Spline</scope><name>computePhasesDuration</name></member>
      <member refid="classBipedalLocomotion_1_1Math_1_1Spline_1a2de97d0a599929a5b702317ed4745b64" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Math::Spline</scope><name>evaluateOrderedPoints</name></member>
      <member refid="classBipedalLocomotion_1_1Math_1_1Spline_1a98e97511aed7db9f13007ad55b6d7b5d" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Math::Spline</scope><name>evaluatePoint</name></member>
      <member refid="classBipedalLocomotion_1_1Math_1_1Spline_1a40df1bf5d140a620b2cf365047c60215" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Math::Spline</scope><name>evaluatePoint</name></member>
      <member refid="classBipedalLocomotion_1_1Math_1_1Spline_1a14fcc91da964940098ff0a6f0536f622" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Math::Spline</scope><name>evaluatePoint</name></member>
      <member refid="classBipedalLocomotion_1_1Math_1_1Spline_1a9481d1827dc2abcee390361dc84671ff" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Math::Spline</scope><name>evaluatePoint</name></member>
      <member refid="classBipedalLocomotion_1_1Math_1_1Spline_1a5b22ec55c97bccb788fc7ea18dd9510a" prot="public" virt="virtual"><scope>BipedalLocomotion::Math::Spline</scope><name>getOutput</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1a6db247d3db83217a16e963d01f6bcb77" prot="public" virt="virtual"><scope>BipedalLocomotion::Math::Spline</scope><name>initialize</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1a975a7ecbf38c917c7b72519581fc7dba" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Math::Spline</scope><name>Input</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1InputPort_1a27c614cb30c1e4b78e64791f4919dfa7" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Math::Spline</scope><name>InputPort</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1InputPort_1a74d1418613e89a7f2993ea936228a44a" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Math::Spline</scope><name>InputPort</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1InputPort_1a02ec5c947f1d2d83d2952c3b899cc58f" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Math::Spline</scope><name>InputPort</name></member>
      <member refid="classBipedalLocomotion_1_1Math_1_1Spline_1a016211240b78f71eca3fcbe0db741464" prot="public" virt="virtual"><scope>BipedalLocomotion::Math::Spline</scope><name>isOutputValid</name></member>
      <member refid="classBipedalLocomotion_1_1Math_1_1Spline_1ae489f71f71153c87384222b1915320ae" prot="private" virt="non-virtual"><scope>BipedalLocomotion::Math::Spline</scope><name>m_advanceCurrentTime</name></member>
      <member refid="classBipedalLocomotion_1_1Math_1_1Spline_1a66b1933fa0e91491d66559df47d9d7ad" prot="private" virt="non-virtual"><scope>BipedalLocomotion::Math::Spline</scope><name>m_areCoefficientsComputed</name></member>
      <member refid="classBipedalLocomotion_1_1Math_1_1Spline_1aecdbdde582a1deffdaef21a7da245f70" prot="private" virt="non-virtual"><scope>BipedalLocomotion::Math::Spline</scope><name>m_currentTrajectoryPoint</name></member>
      <member refid="classBipedalLocomotion_1_1Math_1_1Spline_1a809cdbcd81f1905bbb2e90ead08ef8bd" prot="private" virt="non-virtual"><scope>BipedalLocomotion::Math::Spline</scope><name>m_dT</name></member>
      <member refid="classBipedalLocomotion_1_1Math_1_1Spline_1aaa3ab6ae7a525cf56a9720a33ca87595" prot="private" virt="non-virtual"><scope>BipedalLocomotion::Math::Spline</scope><name>m_dummy</name></member>
      <member refid="classBipedalLocomotion_1_1Math_1_1Spline_1a22eb50930806f1f270382d47dee7cb10" prot="private" virt="non-virtual"><scope>BipedalLocomotion::Math::Spline</scope><name>m_finalConditions</name></member>
      <member refid="classBipedalLocomotion_1_1Math_1_1Spline_1a9c5e42bc760e87b2b7605c42f6d749f0" prot="private" virt="non-virtual"><scope>BipedalLocomotion::Math::Spline</scope><name>m_initialConditions</name></member>
      <member refid="classBipedalLocomotion_1_1Math_1_1Spline_1a61f107976f0a2641d9f8bdf1ae75853c" prot="private" virt="non-virtual"><scope>BipedalLocomotion::Math::Spline</scope><name>m_isOutputValid</name></member>
      <member refid="classBipedalLocomotion_1_1Math_1_1Spline_1ac7c3ffafdc2f04a85b8cc2c25d953f64" prot="protected" virt="non-virtual"><scope>BipedalLocomotion::Math::Spline</scope><name>m_knots</name></member>
      <member refid="classBipedalLocomotion_1_1Math_1_1Spline_1acff8ec4aa58769503bc251d8cfc689c7" prot="protected" virt="non-virtual"><scope>BipedalLocomotion::Math::Spline</scope><name>m_polynomials</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Source_1a922e6eec2f74620c49f9fcd1ddf709ae" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Math::Spline</scope><name>operator=</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Source_1ad63e64dcad4c269263ecd20b2c81352b" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Math::Spline</scope><name>operator=</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1ae147cdee9ff9160a9dfe0d3e349a9aad" prot="public" virt="non-virtual" ambiguityscope="BipedalLocomotion::System::Advanceable::"><scope>BipedalLocomotion::Math::Spline</scope><name>operator=</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1adf0d9fc07bab0ec5d4db7f3a35816bf2" prot="public" virt="non-virtual" ambiguityscope="BipedalLocomotion::System::Advanceable::"><scope>BipedalLocomotion::Math::Spline</scope><name>operator=</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1InputPort_1a54f476d3c8d6d003fb714309ea6272aa" prot="public" virt="non-virtual" ambiguityscope="BipedalLocomotion::System::InputPort::"><scope>BipedalLocomotion::Math::Spline</scope><name>operator=</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1InputPort_1adb341b37472241b6da8b552166308d7b" prot="public" virt="non-virtual" ambiguityscope="BipedalLocomotion::System::InputPort::"><scope>BipedalLocomotion::Math::Spline</scope><name>operator=</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1OutputPort_1af5e15f5e4962a5c8e0f0c0a49adb9ca1" prot="public" virt="non-virtual" ambiguityscope="BipedalLocomotion::System::OutputPort::"><scope>BipedalLocomotion::Math::Spline</scope><name>operator=</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1OutputPort_1ad5c6ce3ad7d2a064d7bb512fe0bc489e" prot="public" virt="non-virtual" ambiguityscope="BipedalLocomotion::System::OutputPort::"><scope>BipedalLocomotion::Math::Spline</scope><name>operator=</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1a69603f2c9c608815908425b5b8c2005c" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Math::Spline</scope><name>Output</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1OutputPort_1a7c0d15e677a1935918fc747ba4c25ec1" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Math::Spline</scope><name>OutputPort</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1OutputPort_1a0a39b891749961d34507b4b591886741" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Math::Spline</scope><name>OutputPort</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1OutputPort_1a581340f280eca1890a8a7b2331761b57" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Math::Spline</scope><name>OutputPort</name></member>
      <member refid="classBipedalLocomotion_1_1Math_1_1Spline_1a645584a5318f34174b6ce5174032f4c6" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Math::Spline</scope><name>setAdvanceTimeStep</name></member>
      <member refid="classBipedalLocomotion_1_1Math_1_1Spline_1ab0fac14b4b44aea72744f00c7b56059d" prot="private" virt="non-virtual"><scope>BipedalLocomotion::Math::Spline</scope><name>setBoundaryVelocitiesAndAcceleration</name></member>
      <member refid="classBipedalLocomotion_1_1Math_1_1Spline_1a3a73b41acf09e871b30b8315963c8ca9" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Math::Spline</scope><name>setFinalConditions</name></member>
      <member refid="classBipedalLocomotion_1_1Math_1_1Spline_1a42d9ee9e30261fd741b8344d8fca1832" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Math::Spline</scope><name>setFinalConditions</name></member>
      <member refid="classBipedalLocomotion_1_1Math_1_1Spline_1a3b09d555e4a5d8abfe1d08fbac294ad8" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Math::Spline</scope><name>setInitialConditions</name></member>
      <member refid="classBipedalLocomotion_1_1Math_1_1Spline_1a1bddbcb7b19b36aadbbb5339786036a4" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Math::Spline</scope><name>setInitialConditions</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Source_1a472624c76d5e02e8ae16991cd77016ce" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Math::Spline</scope><name>setInput</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1InputPort_1ad2637be5c9075a2d8f09fedc6a42d808" prot="public" virt="pure-virtual" ambiguityscope="BipedalLocomotion::System::Advanceable::"><scope>BipedalLocomotion::Math::Spline</scope><name>setInput</name></member>
      <member refid="classBipedalLocomotion_1_1Math_1_1Spline_1af11908563fbb5104d97492310a19e29f" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Math::Spline</scope><name>setKnots</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Source_1aa6af70cc2e04e6a7e011af3d968b3b4b" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Math::Spline</scope><name>Source</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Source_1a1c126531af21d485f09f297cb162c30a" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Math::Spline</scope><name>Source</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Source_1af0cf2abdf10e6594372a0b062fe4a8af" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Math::Spline</scope><name>Source</name></member>
      <member refid="classBipedalLocomotion_1_1Math_1_1Spline_1abeb15638f72f826a0b6d68669dfba59a" prot="protected" virt="pure-virtual"><scope>BipedalLocomotion::Math::Spline</scope><name>updatePolynomialCoefficients</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1afae1137cba829874bab4a1d25d559896" prot="public" virt="virtual"><scope>BipedalLocomotion::Math::Spline</scope><name>~Advanceable</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1InputPort_1ac9b58b0d2f6ae8821b873ed6f9817ccb" prot="public" virt="virtual"><scope>BipedalLocomotion::Math::Spline</scope><name>~InputPort</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1OutputPort_1adcc49c38152c9204dcab4f8e87f68977" prot="public" virt="virtual"><scope>BipedalLocomotion::Math::Spline</scope><name>~OutputPort</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Source_1acf12427433027de27b18e6e70ba0cae8" prot="public" virt="virtual"><scope>BipedalLocomotion::Math::Spline</scope><name>~Source</name></member>
      <member refid="classBipedalLocomotion_1_1Math_1_1Spline_1aef6b39b238c112bc74348d1c9d2c66c7" prot="public" virt="virtual"><scope>BipedalLocomotion::Math::Spline</scope><name>~Spline</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
