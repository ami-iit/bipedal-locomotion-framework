<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classBipedalLocomotion_1_1Math_1_1QuadraticBezierCurve" kind="class" language="C++" prot="public">
    <compoundname>BipedalLocomotion::Math::QuadraticBezierCurve</compoundname>
    <includes local="no">BipedalLocomotion/Math/QuadraticBezierCurve.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classBipedalLocomotion_1_1Math_1_1QuadraticBezierCurve_1a2a7d998fd8ae6b3aa0e3f56720988b83" prot="private" static="no" mutable="no">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt;double&gt; BipedalLocomotion::Math::QuadraticBezierCurve::m_knots</definition>
        <argsstring></argsstring>
        <name>m_knots</name>
        <briefdescription>
<para>Knots of the curve generated as linspace. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Math/QuadraticBezierCurve.h" line="61" column="17" bodyfile="BipedalLocomotion/Math/QuadraticBezierCurve.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBipedalLocomotion_1_1Math_1_1QuadraticBezierCurve_1a859aaa1dff2b5ead6eae1ad225944a37" prot="private" static="no" mutable="no">
        <type>Eigen::Matrix2Xd</type>
        <definition>Eigen::Matrix2Xd BipedalLocomotion::Math::QuadraticBezierCurve::m_curve</definition>
        <argsstring></argsstring>
        <name>m_curve</name>
        <briefdescription>
<para>Matrix containing the quadratic Bézier curve. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Math/QuadraticBezierCurve.h" line="62" column="22" bodyfile="BipedalLocomotion/Math/QuadraticBezierCurve.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classBipedalLocomotion_1_1Math_1_1QuadraticBezierCurve_1a7e00d8a843bea55defa3194f76fa7c06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::Math::QuadraticBezierCurve::initialize</definition>
        <argsstring>(std::weak_ptr&lt; const ParametersHandler::IParametersHandler &gt; handler)</argsstring>
        <name>initialize</name>
        <param>
          <type>std::weak_ptr&lt; const <ref refid="classBipedalLocomotion_1_1ParametersHandler_1_1IParametersHandler" kindref="compound">ParametersHandler::IParametersHandler</ref> &gt;</type>
          <declname>handler</declname>
        </param>
        <briefdescription>
<para>Initialize the <ref refid="classBipedalLocomotion_1_1Math_1_1QuadraticBezierCurve" kindref="compound">QuadraticBezierCurve</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handler</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the parameter handler. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The following parameters are optional: <table rows="2" cols="4"><row>
<entry thead="yes" align='center'><para>Parameter Name   </para>
</entry><entry thead="yes" align='center'><para>Type   </para>
</entry><entry thead="yes" align='center'><para>Description   </para>
</entry><entry thead="yes" align='center'><para>Mandatory    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>number_of_knots</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>int</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>Number of knots in the quadratic bézier curve   </para>
</entry><entry thead="no" align='center'><para>Yes   </para>
</entry></row>
</table>
</para>
</simplesect>
<simplesect kind="return"><para>true in case of success/false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Math/QuadraticBezierCurve.h" line="47" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Math_1_1QuadraticBezierCurve_1a43ba85fa385d46588983f591613a63e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Ref&lt; const Eigen::Matrix2Xd &gt;</type>
        <definition>Eigen::Ref&lt;const Eigen::Matrix2Xd&gt; BipedalLocomotion::Math::QuadraticBezierCurve::evaluateCurve</definition>
        <argsstring>(Eigen::Ref&lt; const Eigen::Vector2d &gt; initialPoint, Eigen::Ref&lt; const Eigen::Vector2d &gt; controlPoint, Eigen::Ref&lt; const Eigen::Vector2d &gt; finalPoint)</argsstring>
        <name>evaluateCurve</name>
        <param>
          <type>Eigen::Ref&lt; const Eigen::Vector2d &gt;</type>
          <declname>initialPoint</declname>
        </param>
        <param>
          <type>Eigen::Ref&lt; const Eigen::Vector2d &gt;</type>
          <declname>controlPoint</declname>
        </param>
        <param>
          <type>Eigen::Ref&lt; const Eigen::Vector2d &gt;</type>
          <declname>finalPoint</declname>
        </param>
        <briefdescription>
<para>Evaluate the curve given in initial, control and final points. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>initialPoint</parametername>
</parameternamelist>
<parameterdescription>
<para>initial point of the curve. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>controlPoint</parametername>
</parameternamelist>
<parameterdescription>
<para>control point of the curve. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>finalPoint</parametername>
</parameternamelist>
<parameterdescription>
<para>final point of the curve. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a matrix containing the curve. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Math/QuadraticBezierCurve.h" line="56" column="16"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="classBipedalLocomotion_1_1Math_1_1QuadraticBezierCurve" kindref="compound">QuadraticBezierCurve</ref> implements a quadratic Bézier curve. </para>
    </briefdescription>
    <detaileddescription>
<para>A quadratic Bézier curve is characterized by a group of control points P0 to P2. The initial and final control points consistently represent the endpoints of the curve, while the intermediate control point typically do not lie precisely on the curve. In the subsequent sections, the sums should be interpreted as affine combinations, meaning that the coefficients add up to 1. In detail <ref refid="classBipedalLocomotion_1_1Math_1_1QuadraticBezierCurve" kindref="compound">QuadraticBezierCurve</ref> implements <formula id="198">\[ x(t) = (1 - t)^2 P_0 + 2(1 - t)t P_1 + t^2 P_2 \]</formula> where <formula id="199">$P_0$</formula> <formula id="200">$P_2$</formula> are the initial and final point of the curve, while <formula id="201">$P_1$</formula> is the control point. </para>
    </detaileddescription>
    <location file="BipedalLocomotion/Math/QuadraticBezierCurve.h" line="35" column="1" bodyfile="BipedalLocomotion/Math/QuadraticBezierCurve.h" bodystart="36" bodyend="63"/>
    <listofallmembers>
      <member refid="classBipedalLocomotion_1_1Math_1_1QuadraticBezierCurve_1a43ba85fa385d46588983f591613a63e2" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Math::QuadraticBezierCurve</scope><name>evaluateCurve</name></member>
      <member refid="classBipedalLocomotion_1_1Math_1_1QuadraticBezierCurve_1a7e00d8a843bea55defa3194f76fa7c06" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Math::QuadraticBezierCurve</scope><name>initialize</name></member>
      <member refid="classBipedalLocomotion_1_1Math_1_1QuadraticBezierCurve_1a859aaa1dff2b5ead6eae1ad225944a37" prot="private" virt="non-virtual"><scope>BipedalLocomotion::Math::QuadraticBezierCurve</scope><name>m_curve</name></member>
      <member refid="classBipedalLocomotion_1_1Math_1_1QuadraticBezierCurve_1a2a7d998fd8ae6b3aa0e3f56720988b83" prot="private" virt="non-virtual"><scope>BipedalLocomotion::Math::QuadraticBezierCurve</scope><name>m_knots</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
