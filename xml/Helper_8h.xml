<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="Helper_8h" kind="file" language="C++">
    <compoundname>Helper.h</compoundname>
    <includes local="no">deque</includes>
    <includes local="no">vector</includes>
    <includes local="no">yarp/os/BufferedPort.h</includes>
    <includes local="no">yarp/os/Property.h</includes>
    <includes local="no">yarp/os/Value.h</includes>
    <includes local="no">yarp/sig/Vector.h</includes>
    <includes local="no">iDynTree/VectorDynSize.h</includes>
    <includes local="yes">Helper.tpp</includes>
    <incdepgraph>
      <node id="8">
        <label>iDynTree/VectorDynSize.h</label>
      </node>
      <node id="9">
        <label>Helper.tpp</label>
      </node>
      <node id="4">
        <label>yarp/os/BufferedPort.h</label>
      </node>
      <node id="3">
        <label>vector</label>
      </node>
      <node id="5">
        <label>yarp/os/Property.h</label>
      </node>
      <node id="7">
        <label>yarp/sig/Vector.h</label>
      </node>
      <node id="6">
        <label>yarp/os/Value.h</label>
      </node>
      <node id="1">
        <label>BipedalLocomotion/YarpUtilities/Helper.h</label>
        <link refid="Helper_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>deque</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespaceBipedalLocomotion">BipedalLocomotion</innernamespace>
    <innernamespace refid="namespaceBipedalLocomotion_1_1YarpUtilities">BipedalLocomotion::YarpUtilities</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceBipedalLocomotion_1_1YarpUtilities_1a574238d46c75541efac18d9a98976b23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T BipedalLocomotion::YarpUtilities::convertValue</definition>
        <argsstring>(const yarp::os::Value &amp;value)</argsstring>
        <name>convertValue</name>
        <param>
          <type>const yarp::os::Value &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Convert a value in a element of type T. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>the value that will be converted </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>return type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>an element of type T </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/YarpUtilities/Helper.h" line="38" column="15" declfile="BipedalLocomotion/YarpUtilities/Helper.h" declline="38" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="namespaceBipedalLocomotion_1_1YarpUtilities_1a20b68ac280f66d0c36958f23f38d1616" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>int</type>
        <definition>int BipedalLocomotion::YarpUtilities::convertValue&lt; int &gt;</definition>
        <argsstring>(const yarp::os::Value &amp;value)</argsstring>
        <name>convertValue&lt; int &gt;</name>
        <param>
          <type>const yarp::os::Value &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Convert a value in a element of type int. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>the value that will be converted </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>an integer </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/YarpUtilities/Helper.h" line="45" column="12" declfile="BipedalLocomotion/YarpUtilities/Helper.h" declline="45" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespaceBipedalLocomotion_1_1YarpUtilities_1a7a561eb766144016b6b608ff67421f9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>double</type>
        <definition>double BipedalLocomotion::YarpUtilities::convertValue&lt; double &gt;</definition>
        <argsstring>(const yarp::os::Value &amp;value)</argsstring>
        <name>convertValue&lt; double &gt;</name>
        <param>
          <type>const yarp::os::Value &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Convert a value in a element of type double. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>the value that will be converted </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a double </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/YarpUtilities/Helper.h" line="52" column="12" declfile="BipedalLocomotion/YarpUtilities/Helper.h" declline="52" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespaceBipedalLocomotion_1_1YarpUtilities_1a23dd786f66e376e52a3a1d2eba248d69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string BipedalLocomotion::YarpUtilities::convertValue&lt; std::string &gt;</definition>
        <argsstring>(const yarp::os::Value &amp;value)</argsstring>
        <name>convertValue&lt; std::string &gt;</name>
        <param>
          <type>const yarp::os::Value &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Convert a value in a element of type string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>the value that will be converted </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a string </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/YarpUtilities/Helper.h" line="59" column="12" declfile="BipedalLocomotion/YarpUtilities/Helper.h" declline="59" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespaceBipedalLocomotion_1_1YarpUtilities_1a694bc52a19571ec2a9f02290f1bb8013" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>bool</type>
        <definition>bool BipedalLocomotion::YarpUtilities::convertValue&lt; bool &gt;</definition>
        <argsstring>(const yarp::os::Value &amp;value)</argsstring>
        <name>convertValue&lt; bool &gt;</name>
        <param>
          <type>const yarp::os::Value &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Convert a value in a element of type Boolean. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>the value that will be converted </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a Boolean </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/YarpUtilities/Helper.h" line="66" column="12" declfile="BipedalLocomotion/YarpUtilities/Helper.h" declline="66" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespaceBipedalLocomotion_1_1YarpUtilities_1ae40e1f1de588c491cbaf379f1f5bd90a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::YarpUtilities::addVectorOfStringToProperty</definition>
        <argsstring>(yarp::os::Property &amp;prop, const std::string &amp;key, const std::vector&lt; std::string &gt; &amp;list)</argsstring>
        <name>addVectorOfStringToProperty</name>
        <param>
          <type>yarp::os::Property &amp;</type>
          <declname>prop</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>list</declname>
        </param>
        <briefdescription>
<para>Add a vector of string to a property of a given name. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>prop</parametername>
</parameternamelist>
<parameterdescription>
<para>yarp property; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>is the key; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>is the vector of strings that will be added into the property. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true/false in case of success/failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/YarpUtilities/Helper.h" line="76" column="6" declfile="BipedalLocomotion/YarpUtilities/Helper.h" declline="76" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceBipedalLocomotion_1_1YarpUtilities_1ab39451f762c0bb0fc0dd4e0aa5c1503b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool BipedalLocomotion::YarpUtilities::getElementFromSearchable</definition>
        <argsstring>(const yarp::os::Searchable &amp;config, const std::string &amp;key, T &amp;number)</argsstring>
        <name>getElementFromSearchable</name>
        <param>
          <type>const yarp::os::Searchable &amp;</type>
          <declname>config</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>number</declname>
        </param>
        <briefdescription>
<para>Extract a double from a searchable object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>is the searchable object; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>the name to check for; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>number</parametername>
</parameternamelist>
<parameterdescription>
<para>is the double. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true/false in case of success/failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/YarpUtilities/Helper.h" line="88" column="6" declfile="BipedalLocomotion/YarpUtilities/Helper.h" declline="88" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceBipedalLocomotion_1_1YarpUtilities_1a10b842ee279d3fdeca5833e490fabeb6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool BipedalLocomotion::YarpUtilities::getVectorFromSearchable</definition>
        <argsstring>(const yarp::os::Searchable &amp;config, const std::string &amp;key, T &amp;vector)</argsstring>
        <name>getVectorFromSearchable</name>
        <param>
          <type>const yarp::os::Searchable &amp;</type>
          <declname>config</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>vector</declname>
        </param>
        <briefdescription>
<para>Extract a vector from searchable. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>is the searchable object; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>the name to check for; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vector</parametername>
</parameternamelist>
<parameterdescription>
<para>a vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true/false in case of success/failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/YarpUtilities/Helper.h" line="100" column="6" declfile="BipedalLocomotion/YarpUtilities/Helper.h" declline="100" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceBipedalLocomotion_1_1YarpUtilities_1a319356197d5d389746595e0833ae27da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>bool</type>
        <definition>bool BipedalLocomotion::YarpUtilities::getVectorFromSearchable&lt; std::vector&lt; bool &gt; &gt;</definition>
        <argsstring>(const yarp::os::Searchable &amp;config, const std::string &amp;key, std::vector&lt; bool &gt; &amp;vector)</argsstring>
        <name>getVectorFromSearchable&lt; std::vector&lt; bool &gt; &gt;</name>
        <param>
          <type>const yarp::os::Searchable &amp;</type>
          <declname>config</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>std::vector&lt; bool &gt; &amp;</type>
          <declname>vector</declname>
        </param>
        <briefdescription>
<para>Extract an <computeroutput>std::vector&lt;bool&gt;</computeroutput> from searchable. </para>
        </briefdescription>
        <detaileddescription>
<para>The specialization is required because vector.data() is not defined when vector is an <computeroutput>std::vector&lt;bool&gt;</computeroutput> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>is the searchable object; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>the name to check for; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vector</parametername>
</parameternamelist>
<parameterdescription>
<para>a <computeroutput>std::vector&lt;bool&gt;</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true/false in case of success/failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/YarpUtilities/Helper.h" line="111" column="1" declfile="BipedalLocomotion/YarpUtilities/Helper.h" declline="111" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceBipedalLocomotion_1_1YarpUtilities_1a93353a6fcf35110f266c35ed33f149be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void BipedalLocomotion::YarpUtilities::mergeSigVector</definition>
        <argsstring>(yarp::sig::Vector &amp;vector, const T &amp;t)</argsstring>
        <name>mergeSigVector</name>
        <param>
          <type>yarp::sig::Vector &amp;</type>
          <declname>vector</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Append a scalar to a vector. </para>
        </briefdescription>
        <detaileddescription>
<para>vector = [vector, t] <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vector</parametername>
</parameternamelist>
<parameterdescription>
<para>the original vector. The new elements will be add at the end of this vector; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>is a container or a scalar. If t is a container it has to be an iterable object (the element has the methods <computeroutput>T::begin()</computeroutput> and <computeroutput>T::end()</computeroutput> or the <computeroutput>operator[]</computeroutput> has to be defined </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>If \at does not satisfies the previous assumptions the compilation will fail with a static assertion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/YarpUtilities/Helper.h" line="125" column="6" declfile="BipedalLocomotion/YarpUtilities/Helper.h" declline="125" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceBipedalLocomotion_1_1YarpUtilities_1a8fed6fdcfea023c9054ea330a69e6585" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void BipedalLocomotion::YarpUtilities::mergeSigVector</definition>
        <argsstring>(yarp::sig::Vector &amp;vector, const T &amp;t, const Args &amp;... args)</argsstring>
        <name>mergeSigVector</name>
        <param>
          <type>yarp::sig::Vector &amp;</type>
          <declname>vector</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>const Args &amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Variadic function used to merge several vectors. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vector</parametername>
</parameternamelist>
<parameterdescription>
<para>the original vector. The new elements will be add at the end of this vector; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>is a container or a scalar. If t is a container it has to be an iterable object (the element has the methods <computeroutput>T::begin()</computeroutput> and <computeroutput>T::end()</computeroutput>) or the operator[] has to be defined </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>list containing all the vector that will be merged. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>If <emphasis>t</emphasis> does not satisfies the previous assumptions the compilation will fail with a static assertion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/YarpUtilities/Helper.h" line="138" column="6" declfile="BipedalLocomotion/YarpUtilities/Helper.h" declline="138" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceBipedalLocomotion_1_1YarpUtilities_1a254e07b98bb1e13845b0f9a9476009ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void BipedalLocomotion::YarpUtilities::sendVariadicVector</definition>
        <argsstring>(yarp::os::BufferedPort&lt; yarp::sig::Vector &gt; &amp;port, const Args &amp;... args)</argsstring>
        <name>sendVariadicVector</name>
        <param>
          <type>yarp::os::BufferedPort&lt; yarp::sig::Vector &gt; &amp;</type>
          <declname>port</declname>
        </param>
        <param>
          <type>const Args &amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Send a variadic vector through a yarp buffered port. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>is a Yarp buffered port </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>list containing all the vector that will be send. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/YarpUtilities/Helper.h" line="146" column="6" declfile="BipedalLocomotion/YarpUtilities/Helper.h" declline="146" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceBipedalLocomotion_1_1YarpUtilities_1a5773cfa7434d8a83e3cdc774c86d5607" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BipedalLocomotion::YarpUtilities::populateBottleWithStrings</definition>
        <argsstring>(yarp::os::Bottle &amp;bottle, const std::initializer_list&lt; std::string &gt; &amp;strings)</argsstring>
        <name>populateBottleWithStrings</name>
        <param>
          <type>yarp::os::Bottle &amp;</type>
          <declname>bottle</declname>
        </param>
        <param>
          <type>const std::initializer_list&lt; std::string &gt; &amp;</type>
          <declname>strings</declname>
        </param>
        <briefdescription>
<para>Add strings to a bottle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bottle</parametername>
</parameternamelist>
<parameterdescription>
<para>this bottle will be filled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>strings</parametername>
</parameternamelist>
<parameterdescription>
<para>list containing all the string. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/YarpUtilities/Helper.h" line="153" column="6" declfile="BipedalLocomotion/YarpUtilities/Helper.h" declline="153" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="authors"><para>Giulio Romualdi </para>
</simplesect>
<simplesect kind="copyright"><para>2019 Istituto Italiano di Tecnologia (IIT). This software may be modified and distributed under the terms of the BSD-3-Clause license. </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="BipedalLocomotion/YarpUtilities/Helper.h"/>
  </compounddef>
</doxygen>
