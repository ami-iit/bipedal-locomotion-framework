<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classBipedalLocomotion_1_1Planners_1_1SO3Planner" kind="class" language="C++" prot="public">
    <compoundname>BipedalLocomotion::Planners::SO3Planner</compoundname>
    <basecompoundref refid="classBipedalLocomotion_1_1System_1_1Source" prot="public" virt="non-virtual">BipedalLocomotion::System::Source&lt; SO3PlannerState &gt;</basecompoundref>
    <includes local="no">BipedalLocomotion/Planners/SO3Planner.h</includes>
    <innerclass refid="structBipedalLocomotion_1_1Planners_1_1SO3Planner_1_1BoundaryConditions" prot="private">BipedalLocomotion::Planners::SO3Planner::BoundaryConditions</innerclass>
    <innerclass refid="structBipedalLocomotion_1_1Planners_1_1SO3Planner_1_1Polynomial" prot="private">BipedalLocomotion::Planners::SO3Planner::Polynomial</innerclass>
    <templateparamlist>
      <param>
        <type><ref refid="SO3Planner_8h_1ae114d1c1f94f336e09b0a6b8f9d4ffe7" kindref="member">LieGroupTrivialization</ref></type>
        <declname>trivialization</declname>
        <defname>trivialization</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classBipedalLocomotion_1_1Planners_1_1SO3Planner_1aba756f69b09b277f3746676bfef082a2" prot="private" static="no" mutable="no">
        <type>manif::SO3d</type>
        <definition>manif::SO3d BipedalLocomotion::Planners::SO3Planner&lt; trivialization &gt;::m_initialRotation</definition>
        <argsstring></argsstring>
        <name>m_initialRotation</name>
        <initializer>{manif::SO3d::Identity()}</initializer>
        <briefdescription>
<para>Initial rotation from the inertial frame to the body frame. </para>
        </briefdescription>
        <detaileddescription>
<para>Namely <formula id="255">${}^{\mathcal{I}}R_{\mathcal{B}}$</formula> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Planners/SO3Planner.h" line="68" column="17" bodyfile="BipedalLocomotion/Planners/SO3Planner.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBipedalLocomotion_1_1Planners_1_1SO3Planner_1ad00c3a50b465fc7045b17e300ae04ef4" prot="private" static="no" mutable="no">
        <type>manif::SO3d::Tangent</type>
        <definition>manif::SO3d::Tangent BipedalLocomotion::Planners::SO3Planner&lt; trivialization &gt;::m_distance</definition>
        <argsstring></argsstring>
        <name>m_distance</name>
        <initializer>{manif::SO3d::Tangent::Zero()}</initializer>
        <briefdescription>
<para>Distance bewteen the initial rotation and the final one. </para>
        </briefdescription>
        <detaileddescription>
<para>The definition of the distance depends on the chosen Trivialization </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Planners/SO3Planner.h" line="72" column="26" bodyfile="BipedalLocomotion/Planners/SO3Planner.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBipedalLocomotion_1_1Planners_1_1SO3Planner_1a08c15998f131bd795737ada373ec845f" prot="private" static="no" mutable="no">
        <type>std::chrono::nanoseconds</type>
        <definition>std::chrono::nanoseconds BipedalLocomotion::Planners::SO3Planner&lt; trivialization &gt;::m_T</definition>
        <argsstring></argsstring>
        <name>m_T</name>
        <initializer>{std::chrono::nanoseconds::zero()}</initializer>
        <briefdescription>
<para>Trajectory duration in seconds. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Planners/SO3Planner.h" line="74" column="30" bodyfile="BipedalLocomotion/Planners/SO3Planner.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBipedalLocomotion_1_1Planners_1_1SO3Planner_1a2e4b58f74b2ff01d294c2d87cef11c89" prot="private" static="no" mutable="no">
        <type>std::chrono::nanoseconds</type>
        <definition>std::chrono::nanoseconds BipedalLocomotion::Planners::SO3Planner&lt; trivialization &gt;::m_advanceTimeStep</definition>
        <argsstring></argsstring>
        <name>m_advanceTimeStep</name>
        <initializer>{std::chrono::nanoseconds::zero()}</initializer>
        <briefdescription>
<para>Time step of the advance interface. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Planners/SO3Planner.h" line="78" column="30" bodyfile="BipedalLocomotion/Planners/SO3Planner.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBipedalLocomotion_1_1Planners_1_1SO3Planner_1afe98fdac8adc8f054439a3a3b872e022" prot="private" static="no" mutable="no">
        <type>std::chrono::nanoseconds</type>
        <definition>std::chrono::nanoseconds BipedalLocomotion::Planners::SO3Planner&lt; trivialization &gt;::m_advanceCurrentTime</definition>
        <argsstring></argsstring>
        <name>m_advanceCurrentTime</name>
        <initializer>{std::chrono::nanoseconds::zero()}</initializer>
        <briefdescription>
<para>Current time of the advance object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Planners/SO3Planner.h" line="80" column="30" bodyfile="BipedalLocomotion/Planners/SO3Planner.h" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBipedalLocomotion_1_1Planners_1_1SO3Planner_1a621d5c6139af33f66a232c481f63a921" prot="private" static="no" mutable="no">
        <type><ref refid="structBipedalLocomotion_1_1Planners_1_1SO3PlannerState" kindref="compound">SO3PlannerState</ref></type>
        <definition>SO3PlannerState BipedalLocomotion::Planners::SO3Planner&lt; trivialization &gt;::m_state</definition>
        <argsstring></argsstring>
        <name>m_state</name>
        <briefdescription>
<para>Current state of the planner. </para>
        </briefdescription>
        <detaileddescription>
<para>It is used by the advance capabilities. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Planners/SO3Planner.h" line="82" column="21" bodyfile="BipedalLocomotion/Planners/SO3Planner.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBipedalLocomotion_1_1Planners_1_1SO3Planner_1ab3dd9ec52e540fc7977dd1212cf606be" prot="private" static="no" mutable="no">
        <type>BoundaryConditions</type>
        <definition>BoundaryConditions BipedalLocomotion::Planners::SO3Planner&lt; trivialization &gt;::initialCondition</definition>
        <argsstring></argsstring>
        <name>initialCondition</name>
        <briefdescription>
<para>Initial condition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Planners/SO3Planner.h" line="108" column="24" bodyfile="BipedalLocomotion/Planners/SO3Planner.h" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBipedalLocomotion_1_1Planners_1_1SO3Planner_1a35d2db6ea72892a29469aa78a6abdc6f" prot="private" static="no" mutable="no">
        <type>BoundaryConditions</type>
        <definition>BoundaryConditions BipedalLocomotion::Planners::SO3Planner&lt; trivialization &gt;::finalCondition</definition>
        <argsstring></argsstring>
        <name>finalCondition</name>
        <briefdescription>
<para>Final condition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Planners/SO3Planner.h" line="109" column="24" bodyfile="BipedalLocomotion/Planners/SO3Planner.h" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBipedalLocomotion_1_1Planners_1_1SO3Planner_1af9f2dd6b5374aeea22200e3621f19ebb" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool BipedalLocomotion::Planners::SO3Planner&lt; trivialization &gt;::areCoefficientsComputed</definition>
        <argsstring></argsstring>
        <name>areCoefficientsComputed</name>
        <initializer>{false}</initializer>
        <briefdescription>
<para>If true the coefficients are computed and updated. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Planners/SO3Planner.h" line="110" column="10" bodyfile="BipedalLocomotion/Planners/SO3Planner.h" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBipedalLocomotion_1_1Planners_1_1SO3Planner_1ab23493b6535d6059539e283312b0a2a8" prot="private" static="no" mutable="no">
        <type>Polynomial</type>
        <definition>Polynomial BipedalLocomotion::Planners::SO3Planner&lt; trivialization &gt;::polynomial</definition>
        <argsstring></argsstring>
        <name>polynomial</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Planners/SO3Planner.h" line="111" column="16" bodyfile="BipedalLocomotion/Planners/SO3Planner.h" bodystart="111" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classBipedalLocomotion_1_1Planners_1_1SO3Planner_1af1303b303379cf79d5b43672529f8318" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::Planners::SO3Planner&lt; trivialization &gt;::computeCoefficients</definition>
        <argsstring>()</argsstring>
        <name>computeCoefficients</name>
        <briefdescription>
<para>This function is the entry point to compute the coefficients of the spline. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Planners/SO3Planner.h" line="116" column="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classBipedalLocomotion_1_1Planners_1_1SO3Planner_1a4debb19540e1a541d619357f1b23bc0b" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>manif::SO3d::Tangent</type>
        <definition>static manif::SO3d::Tangent BipedalLocomotion::Planners::SO3Planner&lt; trivialization &gt;::computeDistance</definition>
        <argsstring>(const manif::SO3d &amp;initialRotation, const manif::SO3d &amp;finalRotation)</argsstring>
        <name>computeDistance</name>
        <param>
          <type>const manif::SO3d &amp;</type>
          <declname>initialRotation</declname>
        </param>
        <param>
          <type>const manif::SO3d &amp;</type>
          <declname>finalRotation</declname>
        </param>
        <briefdescription>
<para>Compute the distance given two rotations. </para>
        </briefdescription>
        <detaileddescription>
<para>It depends on the trivialization. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Planners/SO3Planner.h" line="122" column="5"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classBipedalLocomotion_1_1Planners_1_1SO3Planner_1a751ed13ee6ed5e64a8cdda33a3b86e57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::Planners::SO3Planner&lt; trivialization &gt;::setRotations</definition>
        <argsstring>(const manif::SO3d &amp;initialRotation, const manif::SO3d &amp;finalRotation, const std::chrono::nanoseconds &amp;duration)</argsstring>
        <name>setRotations</name>
        <param>
          <type>const manif::SO3d &amp;</type>
          <declname>initialRotation</declname>
        </param>
        <param>
          <type>const manif::SO3d &amp;</type>
          <declname>finalRotation</declname>
        </param>
        <param>
          <type>const std::chrono::nanoseconds &amp;</type>
          <declname>duration</declname>
        </param>
        <briefdescription>
<para>Set the rotation. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>initialRotation</parametername>
</parameternamelist>
<parameterdescription>
<para>initial rotation <formula id="256">${}^{\mathcal{I}}R_{\mathcal{B}_0}$</formula>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>finalRotation</parametername>
</parameternamelist>
<parameterdescription>
<para>final rotation <formula id="257">${}^{\mathcal{I}}R_{\mathcal{B}_T}$</formula>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>duration</parametername>
</parameternamelist>
<parameterdescription>
<para>Trajectory duration in seconds. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True in case of success/false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Planners/SO3Planner.h" line="132" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Planners_1_1SO3Planner_1ae3e6f24567865a4e663d511ab33e036e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::Planners::SO3Planner&lt; trivialization &gt;::evaluatePoint</definition>
        <argsstring>(const std::chrono::nanoseconds &amp;time, SO3PlannerState &amp;state)</argsstring>
        <name>evaluatePoint</name>
        <param>
          <type>const std::chrono::nanoseconds &amp;</type>
          <declname>time</declname>
        </param>
        <param>
          <type><ref refid="structBipedalLocomotion_1_1Planners_1_1SO3PlannerState" kindref="compound">SO3PlannerState</ref> &amp;</type>
          <declname>state</declname>
        </param>
        <briefdescription>
<para>Get the trajectory at a given time. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>time</parametername>
</parameternamelist>
<parameterdescription>
<para>time, in seconds, at which the trajectory should be computed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>state</parametername>
</parameternamelist>
<parameterdescription>
<para>state of the planner. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True in case of success/false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Planners/SO3Planner.h" line="142" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Planners_1_1SO3Planner_1ad04c074445143dbdafacded0a4cf003a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Derived</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool BipedalLocomotion::Planners::SO3Planner&lt; trivialization &gt;::evaluatePoint</definition>
        <argsstring>(const std::chrono::nanoseconds &amp;time, manif::SO3d &amp;rotation, manif::SO3TangentBase&lt; Derived &gt; &amp;velocity, manif::SO3TangentBase&lt; Derived &gt; &amp;acceleration)</argsstring>
        <name>evaluatePoint</name>
        <param>
          <type>const std::chrono::nanoseconds &amp;</type>
          <declname>time</declname>
        </param>
        <param>
          <type>manif::SO3d &amp;</type>
          <declname>rotation</declname>
        </param>
        <param>
          <type>manif::SO3TangentBase&lt; Derived &gt; &amp;</type>
          <declname>velocity</declname>
        </param>
        <param>
          <type>manif::SO3TangentBase&lt; Derived &gt; &amp;</type>
          <declname>acceleration</declname>
        </param>
        <briefdescription>
<para>Get the trajectory at a given time. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>time</parametername>
</parameternamelist>
<parameterdescription>
<para>time, in seconds, at which the trajectory should be computed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rotation</parametername>
</parameternamelist>
<parameterdescription>
<para><formula id="255">${}^{\mathcal{I}}R_{\mathcal{B}}$</formula>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>velocity</parametername>
</parameternamelist>
<parameterdescription>
<para>angular velocity expressed in inertial or body fixed frame (accordingly to the trivialization used). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>acceleration</parametername>
</parameternamelist>
<parameterdescription>
<para>angular acceleration expressed in inertial or body fixed frame (accordingly to the trivialization used). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True in case of success/false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Planners/SO3Planner.h" line="155" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Planners_1_1SO3Planner_1a99076971e06978cd9c12c994bba78b76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::Planners::SO3Planner&lt; trivialization &gt;::setAdvanceTimeStep</definition>
        <argsstring>(const std::chrono::nanoseconds &amp;dt)</argsstring>
        <name>setAdvanceTimeStep</name>
        <param>
          <type>const std::chrono::nanoseconds &amp;</type>
          <declname>dt</declname>
        </param>
        <briefdescription>
<para>Set the time step of the advance interface. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>if the the time step is not set the user cannot use the advance features. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dt</parametername>
</parameternamelist>
<parameterdescription>
<para>the time step of the advance block. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True in case of success, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Planners/SO3Planner.h" line="166" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Planners_1_1SO3Planner_1a7b6c4758bd5e24cf8cf2f2c897c22470" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::Planners::SO3Planner&lt; trivialization &gt;::setInitialConditions</definition>
        <argsstring>(const manif::SO3d::Tangent &amp;velocity, const manif::SO3d::Tangent &amp;acceleration)</argsstring>
        <name>setInitialConditions</name>
        <param>
          <type>const manif::SO3d::Tangent &amp;</type>
          <declname>velocity</declname>
        </param>
        <param>
          <type>const manif::SO3d::Tangent &amp;</type>
          <declname>acceleration</declname>
        </param>
        <briefdescription>
<para>Set the initial condition of the spline. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>velocity</parametername>
</parameternamelist>
<parameterdescription>
<para>initial angular velocity. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>acceleration</parametername>
</parameternamelist>
<parameterdescription>
<para>initial angular acceleration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True in case of success, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Planners/SO3Planner.h" line="174" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Planners_1_1SO3Planner_1a6d52e0f86362c02c0afe09b1b7f9667a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::Planners::SO3Planner&lt; trivialization &gt;::setFinalConditions</definition>
        <argsstring>(const manif::SO3d::Tangent &amp;velocity, const manif::SO3d::Tangent &amp;acceleration)</argsstring>
        <name>setFinalConditions</name>
        <param>
          <type>const manif::SO3d::Tangent &amp;</type>
          <declname>velocity</declname>
        </param>
        <param>
          <type>const manif::SO3d::Tangent &amp;</type>
          <declname>acceleration</declname>
        </param>
        <briefdescription>
<para>Set the final condition of the trajectory generator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>velocity</parametername>
</parameternamelist>
<parameterdescription>
<para>final angular velocity. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>acceleration</parametername>
</parameternamelist>
<parameterdescription>
<para>final angular acceleration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True in case of success, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Planners/SO3Planner.h" line="183" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Planners_1_1SO3Planner_1a9e1bc5e248e0f83cddae20277200ca12" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>const <ref refid="structBipedalLocomotion_1_1Planners_1_1SO3PlannerState" kindref="compound">SO3PlannerState</ref> &amp;</type>
        <definition>const SO3PlannerState&amp; BipedalLocomotion::Planners::SO3Planner&lt; trivialization &gt;::getOutput</definition>
        <argsstring>() const final</argsstring>
        <name>getOutput</name>
        <reimplements refid="classBipedalLocomotion_1_1System_1_1OutputPort_1a8c089ecf2dd8ff0fb2732233994b6cac">getOutput</reimplements>
        <briefdescription>
<para>Get the state of the system. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>if the the time step of the advance is not set the user cannot use the advance features. </para>
</simplesect>
<simplesect kind="return"><para>a const reference of the requested object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Planners/SO3Planner.h" line="192" column="27"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Planners_1_1SO3Planner_1acdf5026823d28b0bec14badad5617599" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::Planners::SO3Planner&lt; trivialization &gt;::isOutputValid</definition>
        <argsstring>() const final</argsstring>
        <name>isOutputValid</name>
        <reimplements refid="classBipedalLocomotion_1_1System_1_1OutputPort_1ac50de29a6160baa2bba195af9d69430a">isOutputValid</reimplements>
        <briefdescription>
<para>Determines the validity of the object retrieved with <ref refid="NamedTuple_8h_1ab70c8bf5efee8eb732d3dfa7d05efa58" kindref="member">get()</ref> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>if the the time step of the advance is not set the user cannot use the advance features. </para>
</simplesect>
<simplesect kind="return"><para>True if the object is valid, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Planners/SO3Planner.h" line="200" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Planners_1_1SO3Planner_1a557793850f4ed78b59238328566f1c57" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::Planners::SO3Planner&lt; trivialization &gt;::advance</definition>
        <argsstring>() final</argsstring>
        <name>advance</name>
        <reimplements refid="classBipedalLocomotion_1_1System_1_1Advanceable_1a67107e46e831d93f572558b541aab6d2">advance</reimplements>
        <briefdescription>
<para>Advance the internal state. </para>
        </briefdescription>
        <detaileddescription>
<para>This may change the value retrievable from <ref refid="NamedTuple_8h_1ab70c8bf5efee8eb732d3dfa7d05efa58" kindref="member">get()</ref>. <simplesect kind="warning"><para>if the the time step of the advance is not set the user cannot use the advance features. </para>
</simplesect>
<simplesect kind="return"><para>True if the advance is successfull. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Planners/SO3Planner.h" line="208" column="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classBipedalLocomotion_1_1Planners_1_1SO3Planner_1a539aabcb65a220f593eeeccfc1c777d5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>manif::SO3d::Tangent</type>
        <definition>static manif::SO3d::Tangent BipedalLocomotion::Planners::SO3Planner&lt; trivialization &gt;::projectTangentVector</definition>
        <argsstring>(const manif::SO3d &amp;initialRotation, const manif::SO3d &amp;finalRotation, const manif::SO3d::Tangent &amp;vector)</argsstring>
        <name>projectTangentVector</name>
        <param>
          <type>const manif::SO3d &amp;</type>
          <declname>initialRotation</declname>
        </param>
        <param>
          <type>const manif::SO3d &amp;</type>
          <declname>finalRotation</declname>
        </param>
        <param>
          <type>const manif::SO3d::Tangent &amp;</type>
          <declname>vector</declname>
        </param>
        <briefdescription>
<para>Project the tangent vector on the vector that represents the distance between the two rotations. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>initialRotation</parametername>
</parameternamelist>
<parameterdescription>
<para>initial rotation <formula id="256">${}^{\mathcal{I}}R_{\mathcal{B}_0}$</formula>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>finalRotation</parametername>
</parameternamelist>
<parameterdescription>
<para>final rotation <formula id="257">${}^{\mathcal{I}}R_{\mathcal{B}_T}$</formula>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vector</parametername>
</parameternamelist>
<parameterdescription>
<para>Tangent vector that needs to be projected. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The projected tangent vector. </para>
</simplesect>
<simplesect kind="warning"><para>If the initial and final rotations coincides the projected tangent vector will be set equal to zero. </para>
</simplesect>
<simplesect kind="note"><para>this method can be used along with setInitialConditions and setFinalConditions. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Planners/SO3Planner.h" line="221" column="33"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="classBipedalLocomotion_1_1Planners_1_1SO3Planner" kindref="compound">SO3Planner</ref> implements a minimum jerk trajectory planner for object belonging to SO(3). </para>
    </briefdescription>
    <detaileddescription>
<para>The planner assumes initial and final angular acceleration and velocity proportional to the error between the initial and final rotation. Where the error formulation depends on the trivialization used. In details, for left trivialized - body frame <formula id="253">\[ \epsilon = \text{log} \left(R_0^\top R_f \right) \]</formula> for right trivialized - inertial frame <formula id="254">\[ \epsilon = \text{log} \left(R_f^\top R_0 \right) \]</formula> <simplesect kind="note"><para>The generated velocity and acceleration are written in the inertial or in body-fixed frame accordingly to the chosen trivialization. </para>
</simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>chosen</parametername>
</parameternamelist>
<parameterdescription>
<para>trivialization:<itemizedlist>
<listitem><para>The right trivialization planner generates a velocity and an acceleration expressed in the inertial frame.</para>
</listitem><listitem><para>The left trivialization planner generates a velocity and an acceleration expressed in the body-fixed frame. </para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="4">
        <label>BipedalLocomotion::System::InputPort&lt; _Input &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1InputPort"/>
      </node>
      <node id="1">
        <label>BipedalLocomotion::Planners::SO3Planner&lt; trivialization &gt;</label>
        <link refid="classBipedalLocomotion_1_1Planners_1_1SO3Planner"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>BipedalLocomotion::System::OutputPort&lt; _Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1OutputPort"/>
      </node>
      <node id="8">
        <label>BipedalLocomotion::Planners::SO3Planner&lt; LieGroupTrivialization::Right &gt;</label>
        <link refid="classBipedalLocomotion_1_1Planners_1_1SO3Planner"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; LieGroupTrivialization::Right &gt;</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>BipedalLocomotion::System::Advanceable&lt; EmptySignal, Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Advanceable"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="template-instance">
          <edgelabel>&lt; EmptySignal, Output &gt;</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>BipedalLocomotion::System::Source&lt; SO3PlannerState &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Source"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="template-instance">
          <edgelabel>&lt; SO3PlannerState &gt;</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>BipedalLocomotion::System::Source&lt; Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Source"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>BipedalLocomotion::System::Advanceable&lt; _Input, _Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Advanceable"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="4">
        <label>BipedalLocomotion::System::InputPort&lt; _Input &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1InputPort"/>
      </node>
      <node id="1">
        <label>BipedalLocomotion::Planners::SO3Planner&lt; trivialization &gt;</label>
        <link refid="classBipedalLocomotion_1_1Planners_1_1SO3Planner"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>BipedalLocomotion::System::OutputPort&lt; _Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1OutputPort"/>
      </node>
      <node id="7">
        <label>BipedalLocomotion::System::Advanceable&lt; EmptySignal, Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Advanceable"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="template-instance">
          <edgelabel>&lt; EmptySignal, Output &gt;</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>BipedalLocomotion::System::Source&lt; SO3PlannerState &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Source"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="template-instance">
          <edgelabel>&lt; SO3PlannerState &gt;</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>BipedalLocomotion::System::Source&lt; Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Source"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>BipedalLocomotion::System::Advanceable&lt; _Input, _Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Advanceable"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="BipedalLocomotion/Planners/SO3Planner.h" line="64" column="1" bodyfile="BipedalLocomotion/Planners/SO3Planner.h" bodystart="65" bodyend="224"/>
    <listofallmembers>
      <member refid="classBipedalLocomotion_1_1Planners_1_1SO3Planner_1a557793850f4ed78b59238328566f1c57" prot="public" virt="virtual"><scope>BipedalLocomotion::Planners::SO3Planner</scope><name>advance</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1a09ee5b41c77c6b626f4d5cb775065325" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Planners::SO3Planner</scope><name>Advanceable</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1aaeb3eba3073fbc844dea1eba4c9b68f3" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Planners::SO3Planner</scope><name>Advanceable</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1ac1549cb26bd896e27370e97b0795ba3f" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Planners::SO3Planner</scope><name>Advanceable</name></member>
      <member refid="classBipedalLocomotion_1_1Planners_1_1SO3Planner_1af9f2dd6b5374aeea22200e3621f19ebb" prot="private" virt="non-virtual"><scope>BipedalLocomotion::Planners::SO3Planner</scope><name>areCoefficientsComputed</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1a618ab786bb43814b3b3012b843fce93b" prot="public" virt="virtual"><scope>BipedalLocomotion::Planners::SO3Planner</scope><name>close</name></member>
      <member refid="classBipedalLocomotion_1_1Planners_1_1SO3Planner_1af1303b303379cf79d5b43672529f8318" prot="private" virt="non-virtual"><scope>BipedalLocomotion::Planners::SO3Planner</scope><name>computeCoefficients</name></member>
      <member refid="classBipedalLocomotion_1_1Planners_1_1SO3Planner_1a4debb19540e1a541d619357f1b23bc0b" prot="private" virt="non-virtual"><scope>BipedalLocomotion::Planners::SO3Planner</scope><name>computeDistance</name></member>
      <member refid="classBipedalLocomotion_1_1Planners_1_1SO3Planner_1ae3e6f24567865a4e663d511ab33e036e" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Planners::SO3Planner</scope><name>evaluatePoint</name></member>
      <member refid="classBipedalLocomotion_1_1Planners_1_1SO3Planner_1ad04c074445143dbdafacded0a4cf003a" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Planners::SO3Planner</scope><name>evaluatePoint</name></member>
      <member refid="classBipedalLocomotion_1_1Planners_1_1SO3Planner_1a35d2db6ea72892a29469aa78a6abdc6f" prot="private" virt="non-virtual"><scope>BipedalLocomotion::Planners::SO3Planner</scope><name>finalCondition</name></member>
      <member refid="classBipedalLocomotion_1_1Planners_1_1SO3Planner_1a9e1bc5e248e0f83cddae20277200ca12" prot="public" virt="virtual"><scope>BipedalLocomotion::Planners::SO3Planner</scope><name>getOutput</name></member>
      <member refid="classBipedalLocomotion_1_1Planners_1_1SO3Planner_1ab3dd9ec52e540fc7977dd1212cf606be" prot="private" virt="non-virtual"><scope>BipedalLocomotion::Planners::SO3Planner</scope><name>initialCondition</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1a6db247d3db83217a16e963d01f6bcb77" prot="public" virt="virtual"><scope>BipedalLocomotion::Planners::SO3Planner</scope><name>initialize</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1a975a7ecbf38c917c7b72519581fc7dba" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Planners::SO3Planner</scope><name>Input</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1InputPort_1a27c614cb30c1e4b78e64791f4919dfa7" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Planners::SO3Planner</scope><name>InputPort</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1InputPort_1a74d1418613e89a7f2993ea936228a44a" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Planners::SO3Planner</scope><name>InputPort</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1InputPort_1a02ec5c947f1d2d83d2952c3b899cc58f" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Planners::SO3Planner</scope><name>InputPort</name></member>
      <member refid="classBipedalLocomotion_1_1Planners_1_1SO3Planner_1acdf5026823d28b0bec14badad5617599" prot="public" virt="virtual"><scope>BipedalLocomotion::Planners::SO3Planner</scope><name>isOutputValid</name></member>
      <member refid="classBipedalLocomotion_1_1Planners_1_1SO3Planner_1afe98fdac8adc8f054439a3a3b872e022" prot="private" virt="non-virtual"><scope>BipedalLocomotion::Planners::SO3Planner</scope><name>m_advanceCurrentTime</name></member>
      <member refid="classBipedalLocomotion_1_1Planners_1_1SO3Planner_1a2e4b58f74b2ff01d294c2d87cef11c89" prot="private" virt="non-virtual"><scope>BipedalLocomotion::Planners::SO3Planner</scope><name>m_advanceTimeStep</name></member>
      <member refid="classBipedalLocomotion_1_1Planners_1_1SO3Planner_1ad00c3a50b465fc7045b17e300ae04ef4" prot="private" virt="non-virtual"><scope>BipedalLocomotion::Planners::SO3Planner</scope><name>m_distance</name></member>
      <member refid="classBipedalLocomotion_1_1Planners_1_1SO3Planner_1aba756f69b09b277f3746676bfef082a2" prot="private" virt="non-virtual"><scope>BipedalLocomotion::Planners::SO3Planner</scope><name>m_initialRotation</name></member>
      <member refid="classBipedalLocomotion_1_1Planners_1_1SO3Planner_1a621d5c6139af33f66a232c481f63a921" prot="private" virt="non-virtual"><scope>BipedalLocomotion::Planners::SO3Planner</scope><name>m_state</name></member>
      <member refid="classBipedalLocomotion_1_1Planners_1_1SO3Planner_1a08c15998f131bd795737ada373ec845f" prot="private" virt="non-virtual"><scope>BipedalLocomotion::Planners::SO3Planner</scope><name>m_T</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Source_1a922e6eec2f74620c49f9fcd1ddf709ae" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Planners::SO3Planner</scope><name>operator=</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Source_1ad63e64dcad4c269263ecd20b2c81352b" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Planners::SO3Planner</scope><name>operator=</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1ae147cdee9ff9160a9dfe0d3e349a9aad" prot="public" virt="non-virtual" ambiguityscope="BipedalLocomotion::System::Advanceable::"><scope>BipedalLocomotion::Planners::SO3Planner</scope><name>operator=</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1adf0d9fc07bab0ec5d4db7f3a35816bf2" prot="public" virt="non-virtual" ambiguityscope="BipedalLocomotion::System::Advanceable::"><scope>BipedalLocomotion::Planners::SO3Planner</scope><name>operator=</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1InputPort_1a54f476d3c8d6d003fb714309ea6272aa" prot="public" virt="non-virtual" ambiguityscope="BipedalLocomotion::System::InputPort::"><scope>BipedalLocomotion::Planners::SO3Planner</scope><name>operator=</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1InputPort_1adb341b37472241b6da8b552166308d7b" prot="public" virt="non-virtual" ambiguityscope="BipedalLocomotion::System::InputPort::"><scope>BipedalLocomotion::Planners::SO3Planner</scope><name>operator=</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1OutputPort_1af5e15f5e4962a5c8e0f0c0a49adb9ca1" prot="public" virt="non-virtual" ambiguityscope="BipedalLocomotion::System::OutputPort::"><scope>BipedalLocomotion::Planners::SO3Planner</scope><name>operator=</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1OutputPort_1ad5c6ce3ad7d2a064d7bb512fe0bc489e" prot="public" virt="non-virtual" ambiguityscope="BipedalLocomotion::System::OutputPort::"><scope>BipedalLocomotion::Planners::SO3Planner</scope><name>operator=</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1a69603f2c9c608815908425b5b8c2005c" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Planners::SO3Planner</scope><name>Output</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1OutputPort_1a7c0d15e677a1935918fc747ba4c25ec1" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Planners::SO3Planner</scope><name>OutputPort</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1OutputPort_1a0a39b891749961d34507b4b591886741" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Planners::SO3Planner</scope><name>OutputPort</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1OutputPort_1a581340f280eca1890a8a7b2331761b57" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Planners::SO3Planner</scope><name>OutputPort</name></member>
      <member refid="classBipedalLocomotion_1_1Planners_1_1SO3Planner_1ab23493b6535d6059539e283312b0a2a8" prot="private" virt="non-virtual"><scope>BipedalLocomotion::Planners::SO3Planner</scope><name>polynomial</name></member>
      <member refid="classBipedalLocomotion_1_1Planners_1_1SO3Planner_1a539aabcb65a220f593eeeccfc1c777d5" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Planners::SO3Planner</scope><name>projectTangentVector</name></member>
      <member refid="classBipedalLocomotion_1_1Planners_1_1SO3Planner_1a99076971e06978cd9c12c994bba78b76" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Planners::SO3Planner</scope><name>setAdvanceTimeStep</name></member>
      <member refid="classBipedalLocomotion_1_1Planners_1_1SO3Planner_1a6d52e0f86362c02c0afe09b1b7f9667a" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Planners::SO3Planner</scope><name>setFinalConditions</name></member>
      <member refid="classBipedalLocomotion_1_1Planners_1_1SO3Planner_1a7b6c4758bd5e24cf8cf2f2c897c22470" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Planners::SO3Planner</scope><name>setInitialConditions</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Source_1a472624c76d5e02e8ae16991cd77016ce" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Planners::SO3Planner</scope><name>setInput</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1InputPort_1ad2637be5c9075a2d8f09fedc6a42d808" prot="public" virt="pure-virtual" ambiguityscope="BipedalLocomotion::System::Advanceable::"><scope>BipedalLocomotion::Planners::SO3Planner</scope><name>setInput</name></member>
      <member refid="classBipedalLocomotion_1_1Planners_1_1SO3Planner_1a751ed13ee6ed5e64a8cdda33a3b86e57" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Planners::SO3Planner</scope><name>setRotations</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Source_1aa6af70cc2e04e6a7e011af3d968b3b4b" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Planners::SO3Planner</scope><name>Source</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Source_1a1c126531af21d485f09f297cb162c30a" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Planners::SO3Planner</scope><name>Source</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Source_1af0cf2abdf10e6594372a0b062fe4a8af" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Planners::SO3Planner</scope><name>Source</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1afae1137cba829874bab4a1d25d559896" prot="public" virt="virtual"><scope>BipedalLocomotion::Planners::SO3Planner</scope><name>~Advanceable</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1InputPort_1ac9b58b0d2f6ae8821b873ed6f9817ccb" prot="public" virt="virtual"><scope>BipedalLocomotion::Planners::SO3Planner</scope><name>~InputPort</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1OutputPort_1adcc49c38152c9204dcab4f8e87f68977" prot="public" virt="virtual"><scope>BipedalLocomotion::Planners::SO3Planner</scope><name>~OutputPort</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Source_1acf12427433027de27b18e6e70ba0cae8" prot="public" virt="virtual"><scope>BipedalLocomotion::Planners::SO3Planner</scope><name>~Source</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
