<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UkfMeasurement" kind="class" language="C++" prot="public">
    <compoundname>BipedalLocomotion::Estimators::RobotDynamicsEstimator::UkfMeasurement</compoundname>
    <basecompoundref prot="public" virt="non-virtual">bfl::AdditiveMeasurementModel</basecompoundref>
    <basecompoundref refid="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UkfModel" prot="private" virt="non-virtual">BipedalLocomotion::Estimators::RobotDynamicsEstimator::UkfModel</basecompoundref>
    <includes local="no">BipedalLocomotion/RobotDynamicsEstimator/UkfMeasurement.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UkfMeasurement_1a526628ef6fea54909181331a96d12b2d" prot="private" static="no" mutable="no">
        <type>bfl::VectorDescription</type>
        <definition>bfl::VectorDescription BipedalLocomotion::Estimators::RobotDynamicsEstimator::UkfMeasurement::m_measurementDescription</definition>
        <argsstring></argsstring>
        <name>m_measurementDescription</name>
        <briefdescription>
<para>Private implementation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotDynamicsEstimator/UkfMeasurement.h" line="47" column="28" bodyfile="BipedalLocomotion/RobotDynamicsEstimator/UkfMeasurement.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UkfMeasurement_1a644932fae91ac54f3deaa8e64fb88f79" prot="private" static="no" mutable="no">
        <type>bfl::VectorDescription</type>
        <definition>bfl::VectorDescription BipedalLocomotion::Estimators::RobotDynamicsEstimator::UkfMeasurement::m_inputDescription</definition>
        <argsstring></argsstring>
        <name>m_inputDescription</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotDynamicsEstimator/UkfMeasurement.h" line="48" column="28" bodyfile="BipedalLocomotion/RobotDynamicsEstimator/UkfMeasurement.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UkfMeasurement_1a3c46c37bd3f4521f66caa645c98fa9f8" prot="private" static="no" mutable="no">
        <type>Eigen::MatrixXd</type>
        <definition>Eigen::MatrixXd BipedalLocomotion::Estimators::RobotDynamicsEstimator::UkfMeasurement::m_covarianceR</definition>
        <argsstring></argsstring>
        <name>m_covarianceR</name>
        <briefdescription>
<para>Covariance matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotDynamicsEstimator/UkfMeasurement.h" line="49" column="21" bodyfile="BipedalLocomotion/RobotDynamicsEstimator/UkfMeasurement.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UkfMeasurement_1a9ffd1ec2b55a2f9958a7389cc585792e" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int BipedalLocomotion::Estimators::RobotDynamicsEstimator::UkfMeasurement::m_measurementSize</definition>
        <argsstring></argsstring>
        <name>m_measurementSize</name>
        <initializer>{0}</initializer>
        <briefdescription>
<para>Length of the measurement vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotDynamicsEstimator/UkfMeasurement.h" line="50" column="9" bodyfile="BipedalLocomotion/RobotDynamicsEstimator/UkfMeasurement.h" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UkfMeasurement_1a5ae2df836a60859167ce7d684dcf6feb" prot="private" static="no" mutable="no">
        <type><ref refid="classBipedalLocomotion_1_1System_1_1VariablesHandler" kindref="compound">System::VariablesHandler</ref></type>
        <definition>System::VariablesHandler BipedalLocomotion::Estimators::RobotDynamicsEstimator::UkfMeasurement::m_measurementVariableHandler</definition>
        <argsstring></argsstring>
        <name>m_measurementVariableHandler</name>
        <briefdescription>
<para>Variable handler describing the measurement vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotDynamicsEstimator/UkfMeasurement.h" line="51" column="30" bodyfile="BipedalLocomotion/RobotDynamicsEstimator/UkfMeasurement.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UkfMeasurement_1a927a61e0b4a86f8aaa4df5e428e608e0" prot="private" static="no" mutable="no">
        <type>Eigen::VectorXd</type>
        <definition>Eigen::VectorXd BipedalLocomotion::Estimators::RobotDynamicsEstimator::UkfMeasurement::m_tempPredictedMeas</definition>
        <argsstring></argsstring>
        <name>m_tempPredictedMeas</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotDynamicsEstimator/UkfMeasurement.h" line="53" column="21" bodyfile="BipedalLocomotion/RobotDynamicsEstimator/UkfMeasurement.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UkfMeasurement_1a09bcb74e194580444b2007f3f6ad2975" prot="private" static="no" mutable="no">
        <type>Eigen::MatrixXd</type>
        <definition>Eigen::MatrixXd BipedalLocomotion::Estimators::RobotDynamicsEstimator::UkfMeasurement::m_predictedMeasurement</definition>
        <argsstring></argsstring>
        <name>m_predictedMeasurement</name>
        <briefdescription>
<para>Vector containing the updated measurement. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotDynamicsEstimator/UkfMeasurement.h" line="54" column="21" bodyfile="BipedalLocomotion/RobotDynamicsEstimator/UkfMeasurement.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UkfMeasurement_1a81f077ee9742da066185196d99de5445" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UkfMeasurement" kindref="compound">UkfMeasurement</ref> &gt;</type>
        <definition>static std::unique_ptr&lt;UkfMeasurement&gt; BipedalLocomotion::Estimators::RobotDynamicsEstimator::UkfMeasurement::build</definition>
        <argsstring>(std::weak_ptr&lt; const ParametersHandler::IParametersHandler &gt; handler, System::VariablesHandler &amp;stateVariableHandler, std::shared_ptr&lt; iDynTree::KinDynComputations &gt; kinDynFullModel, const std::vector&lt; SubModel &gt; &amp;subModelList, const std::vector&lt; std::shared_ptr&lt; KinDynWrapper &gt;&gt; &amp;kinDynWrapperList)</argsstring>
        <name>build</name>
        <param>
          <type>std::weak_ptr&lt; const <ref refid="classBipedalLocomotion_1_1ParametersHandler_1_1IParametersHandler" kindref="compound">ParametersHandler::IParametersHandler</ref> &gt;</type>
          <declname>handler</declname>
        </param>
        <param>
          <type><ref refid="classBipedalLocomotion_1_1System_1_1VariablesHandler" kindref="compound">System::VariablesHandler</ref> &amp;</type>
          <declname>stateVariableHandler</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; iDynTree::KinDynComputations &gt;</type>
          <declname>kinDynFullModel</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1SubModel" kindref="compound">SubModel</ref> &gt; &amp;</type>
          <declname>subModelList</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1KinDynWrapper" kindref="compound">KinDynWrapper</ref> &gt;&gt; &amp;</type>
          <declname>kinDynWrapperList</declname>
        </param>
        <briefdescription>
<para>Build the ukf measurement model. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>kinDyn</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer to an iDynTree::KinDynComputations object that will be shared among all the dynamics. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>subModelList</parametername>
</parameternamelist>
<parameterdescription>
<para>a vector of <ref refid="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1SubModel" kindref="compound">SubModel</ref> objects. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kinDynWrapperList</parametername>
</parameternamelist>
<parameterdescription>
<para>a vector of pointers to <ref refid="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1KinDynWrapper" kindref="compound">KinDynWrapper</ref> objects </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>handler</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the IParametersHandler interface. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stateVariableHandler</parametername>
</parameternamelist>
<parameterdescription>
<para>a variable handler describing the variables in the state vector of the ukf. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>the following parameters are required by the class <table rows="3" cols="4"><row>
<entry thead="yes" align='center'><para>Parameter Name   </para>
</entry><entry thead="yes" align='center'><para>Type   </para>
</entry><entry thead="yes" align='center'><para>Description   </para>
</entry><entry thead="yes" align='center'><para>Mandatory    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>sampling_time</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>double</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>Sampling time.   </para>
</entry><entry thead="no" align='center'><para>Yes    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>dynamics_list</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>vector&lt;string&gt;</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>List of dynamics composing the measurement model.   </para>
</entry><entry thead="no" align='center'><para>Yes   </para>
</entry></row>
</table>
For <bold>each</bold> dynamics listed in the parameter <computeroutput>dynamics_list</computeroutput> the user must specified all the parameters required by the dynamics itself but <computeroutput>dT</computeroutput> since is already specified in the parent group. Moreover the following parameters are required for each dynamics. <table rows="7" cols="5"><row>
<entry thead="yes" align='center'><para>Group   </para>
</entry><entry thead="yes" align='center'><para>Parameter Name   </para>
</entry><entry thead="yes" align='center'><para>Type   </para>
</entry><entry thead="yes" align='center'><para>Description   </para>
</entry><entry thead="yes" align='center'><para>Mandatory    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>DYNAMICS_NAME</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>name</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>string</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>String representing the name of the dynamics.   </para>
</entry><entry thead="no" align='center'><para>Yes    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>DYNAMICS_NAME</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>elements</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>std::vector&lt;string&gt;</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>Vector of strings representing the elements composing the specific dynamics.   </para>
</entry><entry thead="no" align='center'><para>No    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>DYNAMICS_NAME</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>covariance</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>std::vector&lt;double&gt;</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>Vector of double containing the covariance associated to each element.   </para>
</entry><entry thead="no" align='center'><para>Yes    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>DYNAMICS_NAME</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>dynamic_model</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>string</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>String representing the type of dynamics. The string should match the name of the C++ class.   </para>
</entry><entry thead="no" align='center'><para>Yes    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>DYNAMICS_NAME</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>use_bias</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>boolean</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>Boolean saying if an additive bias must be used in the dynamic model.   </para>
</entry><entry thead="no" align='center'><para>No    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>DYNAMICS_NAME</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>use_bias</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>boolean</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>Boolean saying if an additive bias must be used in the dynamic model.   </para>
</entry><entry thead="no" align='center'><para>No   </para>
</entry></row>
</table>
<computeroutput>DYNAMICS_NAME</computeroutput> is a placeholder for the name of the dynamics contained in the <computeroutput>dynamics_list</computeroutput> list. <computeroutput>name</computeroutput> can contain only the following values (&quot;ds&quot;, &quot;i_m&quot;, &quot;*_ft_sensor&quot;, &quot;*_ft_acc&quot;, &quot;*_ft_gyro&quot;). </para>
</simplesect>
<simplesect kind="note"><para>The following <computeroutput>ini</computeroutput> file presents an example of the configuration that can be used to build the <ref refid="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UkfMeasurement" kindref="compound">UkfMeasurement</ref>.</para>
</simplesect>
<programlisting filename=".ini"><codeline><highlight class="normal">#<sp/>UkfMeasurement.ini</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">dynamics_list<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(&quot;JOINT_VELOCITY&quot;,<sp/>&quot;MOTOR_CURRENT&quot;,<sp/>&quot;RIGHT_LEG_FT&quot;,<sp/>&quot;RIGHT_FOOT_REAR_GYRO&quot;)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">[JOINT_VELOCITY]</highlight></codeline>
<codeline><highlight class="normal">name<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;ds&quot;</highlight></codeline>
<codeline><highlight class="normal">elements<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(&quot;r_hip_pitch&quot;,<sp/>&quot;r_hip_roll&quot;,<sp/>&quot;r_hip_yaw&quot;,<sp/>&quot;r_knee&quot;,<sp/>&quot;r_ankle_pitch&quot;,<sp/>&quot;r_ankle_roll&quot;)</highlight></codeline>
<codeline><highlight class="normal">covariance<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1e-3,<sp/>1e-3,<sp/>1e-3,<sp/>1e-3,<sp/>1e-3,<sp/>1e-3)</highlight></codeline>
<codeline><highlight class="normal">dynamic_model<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;JointVelocityDynamics&quot;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">[FRICTION_TORQUE]</highlight></codeline>
<codeline><highlight class="normal">name<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;tau_F&quot;</highlight></codeline>
<codeline><highlight class="normal">elements<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(&quot;r_hip_pitch&quot;,<sp/>&quot;r_hip_roll&quot;,<sp/>&quot;r_hip_yaw&quot;,<sp/>&quot;r_knee&quot;,<sp/>&quot;r_ankle_pitch&quot;,<sp/>&quot;r_ankle_roll&quot;)</highlight></codeline>
<codeline><highlight class="normal">covariance<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1e-2,<sp/>1e-2,<sp/>1e-2,<sp/>1e-2,<sp/>1e-2,<sp/>1e-1)</highlight></codeline>
<codeline><highlight class="normal">dynamic_model<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;FrictionTorqueDynamics&quot;</highlight></codeline>
<codeline><highlight class="normal">friction_k0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(9.106,<sp/>5.03,<sp/>4.93,<sp/>12.88,<sp/>14.34,<sp/>1.12)</highlight></codeline>
<codeline><highlight class="normal">friction_k1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(200.0,<sp/>6.9,<sp/>200.0,<sp/>59.87,<sp/>200.0,<sp/>200.0)</highlight></codeline>
<codeline><highlight class="normal">friction_k2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1.767,<sp/>5.64,<sp/>0.27,<sp/>2.0,<sp/>3.0,<sp/>0.0)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">[RIGHT_LEG_FT]</highlight></codeline>
<codeline><highlight class="normal">name<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;r_leg_ft_sensor&quot;</highlight></codeline>
<codeline><highlight class="normal">elements<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(&quot;fx&quot;,<sp/>&quot;fy&quot;,<sp/>&quot;fz&quot;,<sp/>&quot;mx&quot;,<sp/>&quot;my&quot;,<sp/>&quot;mz&quot;)</highlight></codeline>
<codeline><highlight class="normal">covariance<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1e-3,<sp/>1e-3,<sp/>1e-3,<sp/>1e-4,<sp/>1e-4,<sp/>1e-4)</highlight></codeline>
<codeline><highlight class="normal">dynamic_model<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;ConstantMeasurementModel&quot;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">[RIGHT_FOOT_REAR_GYRO_BIAS]</highlight></codeline>
<codeline><highlight class="normal">name<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;r_foot_rear_ft_gyro_bias&quot;</highlight></codeline>
<codeline><highlight class="normal">elements<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(&quot;x&quot;,<sp/>&quot;y&quot;,<sp/>&quot;z&quot;)</highlight></codeline>
<codeline><highlight class="normal">covariance<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(8.2e-8,<sp/>1e-2,<sp/>9.3e-3)</highlight></codeline>
<codeline><highlight class="normal">dynamic_model<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;ConstantMeasurementModel&quot;</highlight></codeline>
</programlisting> <simplesect kind="return"><para>a std::unique_ptr to the <ref refid="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UkfMeasurement" kindref="compound">UkfMeasurement</ref>. In case of issues, an empty <ref refid="classBipedalLocomotion_1_1System_1_1VariablesHandler" kindref="compound">BipedalLocomotion::System::VariablesHandler</ref> and an invalid pointer will be returned. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotDynamicsEstimator/UkfMeasurement.h" line="123" column="28"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UkfMeasurement_1a277cc5da1090f678b8f76e4e1a1ec02a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::Estimators::RobotDynamicsEstimator::UkfMeasurement::initialize</definition>
        <argsstring>(std::weak_ptr&lt; const ParametersHandler::IParametersHandler &gt; handler)</argsstring>
        <name>initialize</name>
        <param>
          <type>std::weak_ptr&lt; const <ref refid="classBipedalLocomotion_1_1ParametersHandler_1_1IParametersHandler" kindref="compound">ParametersHandler::IParametersHandler</ref> &gt;</type>
          <declname>handler</declname>
        </param>
        <briefdescription>
<para>Initialize the ukf measurement model. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handler</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the IParametersHandler interface. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>the following parameters are required by the class <table rows="2" cols="4"><row>
<entry thead="yes" align='center'><para>Parameter Name   </para>
</entry><entry thead="yes" align='center'><para>Type   </para>
</entry><entry thead="yes" align='center'><para>Description   </para>
</entry><entry thead="yes" align='center'><para>Mandatory    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>sampling_time</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>std::chrono::nanoseconds</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>Sampling time.   </para>
</entry><entry thead="no" align='center'><para>Yes   </para>
</entry></row>
</table>
</para>
</simplesect>
<simplesect kind="return"><para>True in case of success, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotDynamicsEstimator/UkfMeasurement.h" line="138" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UkfMeasurement_1a0bf938a7c212bd3f23f65d4acdb287f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::Estimators::RobotDynamicsEstimator::UkfMeasurement::finalize</definition>
        <argsstring>(const System::VariablesHandler &amp;handler)</argsstring>
        <name>finalize</name>
        <param>
          <type>const <ref refid="classBipedalLocomotion_1_1System_1_1VariablesHandler" kindref="compound">System::VariablesHandler</ref> &amp;</type>
          <declname>handler</declname>
        </param>
        <briefdescription>
<para>Finalize the <ref refid="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UkfMeasurement" kindref="compound">UkfMeasurement</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handler</parametername>
</parameternamelist>
<parameterdescription>
<para>variable handler. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>You should call this method after you initialize the <ref refid="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UkfMeasurement" kindref="compound">UkfMeasurement</ref>. </para>
</simplesect>
<simplesect kind="return"><para>true in case of success, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotDynamicsEstimator/UkfMeasurement.h" line="146" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UkfMeasurement_1af3a294d8de87e63fd5ddb28416454ae6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BipedalLocomotion::Estimators::RobotDynamicsEstimator::UkfMeasurement::setUkfInputProvider</definition>
        <argsstring>(std::shared_ptr&lt; const UkfInputProvider &gt; ukfInputProvider)</argsstring>
        <name>setUkfInputProvider</name>
        <param>
          <type>std::shared_ptr&lt; const <ref refid="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UkfInputProvider" kindref="compound">UkfInputProvider</ref> &gt;</type>
          <declname>ukfInputProvider</declname>
        </param>
        <briefdescription>
<para>setUkfInputProvider set the provider for the ukf input. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ukfInputProvider</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer to a structure containing the joint positions and the robot base pose, velocity and acceleration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotDynamicsEstimator/UkfMeasurement.h" line="152" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UkfMeasurement_1a8b8f1cc6c9b9377a9f2f39d7121e5989" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classBipedalLocomotion_1_1System_1_1VariablesHandler" kindref="compound">System::VariablesHandler</ref> &amp;</type>
        <definition>const System::VariablesHandler&amp; BipedalLocomotion::Estimators::RobotDynamicsEstimator::UkfMeasurement::getMeasurementVariableHandler</definition>
        <argsstring>() const</argsstring>
        <name>getMeasurementVariableHandler</name>
        <briefdescription>
<para>getMeasurementVariableHandler access the <computeroutput><ref refid="classBipedalLocomotion_1_1System_1_1VariablesHandler" kindref="compound">System::VariablesHandler</ref></computeroutput> instance created during the initialization phase. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the measurement variable handler containing all the measurement variables and their sizes and offsets. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotDynamicsEstimator/UkfMeasurement.h" line="158" column="36"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UkfMeasurement_1a0abc9014ca9d64c17d589077b1a8638a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; bool, bfl::Data &gt;</type>
        <definition>std::pair&lt;bool, bfl::Data&gt; BipedalLocomotion::Estimators::RobotDynamicsEstimator::UkfMeasurement::predictedMeasure</definition>
        <argsstring>(const Eigen::Ref&lt; const Eigen::MatrixXd &gt; &amp;currentState) const override</argsstring>
        <name>predictedMeasure</name>
        <param>
          <type>const Eigen::Ref&lt; const Eigen::MatrixXd &gt; &amp;</type>
          <declname>currentState</declname>
        </param>
        <briefdescription>
<para>predictedMeasure predict the new measurement depending on the state computed by the predict step. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cur_states</parametername>
</parameternamelist>
<parameterdescription>
<para>is the state computed by the prediction phase. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a std::pair&lt;bool, bfl::Data&gt; where the bool value says if the measurement prediciton is done correctly and the bfl::Data is the predicted measure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotDynamicsEstimator/UkfMeasurement.h" line="166" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UkfMeasurement_1ac4bc75618d5b26f52d3429fec0eae395" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; bool, Eigen::MatrixXd &gt;</type>
        <definition>std::pair&lt;bool, Eigen::MatrixXd&gt; BipedalLocomotion::Estimators::RobotDynamicsEstimator::UkfMeasurement::getNoiseCovarianceMatrix</definition>
        <argsstring>() const override</argsstring>
        <name>getNoiseCovarianceMatrix</name>
        <briefdescription>
<para>getNoiseCovarianceMatrix access the <computeroutput>Eigen::MatrixXd</computeroutput> representing the process covariance matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a boolean value and the measurement noise covariance matrix. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotDynamicsEstimator/UkfMeasurement.h" line="172" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UkfMeasurement_1a66c317ef0deac940789962933b66a2c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::Estimators::RobotDynamicsEstimator::UkfMeasurement::setProperty</definition>
        <argsstring>(const std::string &amp;property) override</argsstring>
        <name>setProperty</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>property</declname>
        </param>
        <briefdescription>
<para>setProperty is not implemented. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>property</parametername>
</parameternamelist>
<parameterdescription>
<para>is a string. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>false as it is not implemented. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotDynamicsEstimator/UkfMeasurement.h" line="179" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UkfMeasurement_1ac8615aeda5b4e01022bf0c8f6e179127" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bfl::VectorDescription</type>
        <definition>bfl::VectorDescription BipedalLocomotion::Estimators::RobotDynamicsEstimator::UkfMeasurement::getMeasurementDescription</definition>
        <argsstring>() const override</argsstring>
        <name>getMeasurementDescription</name>
        <briefdescription>
<para>getMeasurementDescription access the <computeroutput>bfl::VectorDescription</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the measurement vector description. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotDynamicsEstimator/UkfMeasurement.h" line="185" column="28"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UkfMeasurement_1a3d3aee5448d684f1b62f38cc195af66f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bfl::VectorDescription</type>
        <definition>bfl::VectorDescription BipedalLocomotion::Estimators::RobotDynamicsEstimator::UkfMeasurement::getInputDescription</definition>
        <argsstring>() const override</argsstring>
        <name>getInputDescription</name>
        <briefdescription>
<para>getInputDescription access the <computeroutput>bfl::VectorDescription</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the input vector description. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotDynamicsEstimator/UkfMeasurement.h" line="191" column="28"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UkfMeasurement_1a2eb74316fe079b641912b3e5d3b90e40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t BipedalLocomotion::Estimators::RobotDynamicsEstimator::UkfMeasurement::getMeasurementSize</definition>
        <argsstring>()</argsstring>
        <name>getMeasurementSize</name>
        <briefdescription>
<para>getMeasurementSize access the length of the measurement vector </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the length of measurement vector </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotDynamicsEstimator/UkfMeasurement.h" line="197" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UkfMeasurement_1a1a25144147de896f09cd97792b23d6ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BipedalLocomotion::Estimators::RobotDynamicsEstimator::UkfMeasurement::setStateVariableHandler</definition>
        <argsstring>(System::VariablesHandler stateVariableHandler)</argsstring>
        <name>setStateVariableHandler</name>
        <param>
          <type><ref refid="classBipedalLocomotion_1_1System_1_1VariablesHandler" kindref="compound">System::VariablesHandler</ref></type>
          <declname>stateVariableHandler</declname>
        </param>
        <briefdescription>
<para>Set a <computeroutput>System::VariableHandler</computeroutput> describing the variables composing the state. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stateVariableHandler</parametername>
</parameternamelist>
<parameterdescription>
<para>is the variable handler </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotDynamicsEstimator/UkfMeasurement.h" line="203" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UkfMeasurement_1a42b53b3b8de94477beccc56edbe01aeb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; bool, bfl::Data &gt;</type>
        <definition>std::pair&lt;bool, bfl::Data&gt; BipedalLocomotion::Estimators::RobotDynamicsEstimator::UkfMeasurement::innovation</definition>
        <argsstring>(const bfl::Data &amp;predictedMeasurements, const bfl::Data &amp;measurements) const override</argsstring>
        <name>innovation</name>
        <param>
          <type>const bfl::Data &amp;</type>
          <declname>predictedMeasurements</declname>
        </param>
        <param>
          <type>const bfl::Data &amp;</type>
          <declname>measurements</declname>
        </param>
        <briefdescription>
<para>innovation computes the innovation step of the ukf update as the difference between the predicted_measurement and the measurement. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>predicted_measurements</parametername>
</parameternamelist>
<parameterdescription>
<para>is a <computeroutput>blf::Data</computeroutput> reference representing the measurement predicted in the update step. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>measurements</parametername>
</parameternamelist>
<parameterdescription>
<para>is a <computeroutput>blf::Data</computeroutput> reference representing the measurements coming from the user. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a <computeroutput>std::pair&lt;bool, bfl::Data&gt;</computeroutput> where the boolean value is always true and the <computeroutput>bfl::Data</computeroutput> is the innovation term. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotDynamicsEstimator/UkfMeasurement.h" line="212" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UkfMeasurement_1ab3fa98a920c94461233987a23b544fa2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; bool, bfl::Data &gt;</type>
        <definition>std::pair&lt;bool, bfl::Data&gt; BipedalLocomotion::Estimators::RobotDynamicsEstimator::UkfMeasurement::measure</definition>
        <argsstring>(const bfl::Data &amp;data=bfl::Data()) const override</argsstring>
        <name>measure</name>
        <param>
          <type>const bfl::Data &amp;</type>
          <declname>data</declname>
          <defval>bfl::Data()</defval>
        </param>
        <briefdescription>
<para>measure get the updated measurement. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>is a <computeroutput>const blf::Data</computeroutput> reference and is optional parameter. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a pair of a boolean value which is always true and the measurements. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotDynamicsEstimator/UkfMeasurement.h" line="219" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UkfMeasurement_1a93871ca09f6b3abd89cdc57e83c68c72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::Estimators::RobotDynamicsEstimator::UkfMeasurement::freeze</definition>
        <argsstring>(const bfl::Data &amp;data=bfl::Data()) override</argsstring>
        <name>freeze</name>
        <param>
          <type>const bfl::Data &amp;</type>
          <declname>data</declname>
          <defval>bfl::Data()</defval>
        </param>
        <briefdescription>
<para>freeze update the measurement using data from sensors. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>is a generic object representing data coming from sensors. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true. </para>
</simplesect>
<simplesect kind="note"><para>data in this case must be a <computeroutput>std::map&lt;std::string, Eigen::VectorXd&gt;</computeroutput> where the first element represents the name of each measurement dynamics and the second element is the vector containing the measurement of the sensor associated to that variable. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotDynamicsEstimator/UkfMeasurement.h" line="230" column="10"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UkfMeasurement" kindref="compound">UkfMeasurement</ref> is a concrete class that represents the Measurement of the estimator. </para>
    </briefdescription>
    <detaileddescription>
<para>The user should build the dynamic model of the measurement, setting a variable handler describing the variables composing the measurement vector, the list of the dynamic models associated to each variable, and the matrix of covariances associated to the variable in the measurement vector. The user should set also a ukf input provider which provides the inputs needed to update the ukf measurement dynamics. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>BipedalLocomotion::Estimators::RobotDynamicsEstimator::UkfModel</label>
        <link refid="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UkfModel"/>
      </node>
      <node id="2">
        <label>bfl::AdditiveMeasurementModel</label>
      </node>
      <node id="1">
        <label>BipedalLocomotion::Estimators::RobotDynamicsEstimator::UkfMeasurement</label>
        <link refid="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UkfMeasurement"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="private-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="18">
        <label>K</label>
      </node>
      <node id="7">
        <label>T</label>
      </node>
      <node id="6">
        <label>std::shared_ptr&lt; T &gt;</label>
        <childnode refid="7" relation="usage">
          <edgelabel>ptr</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>BipedalLocomotion::Estimators::RobotDynamicsEstimator::UkfModel</label>
        <link refid="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UkfModel"/>
        <childnode refid="4" relation="usage">
          <edgelabel>m_kinDynWrapperList</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>m_dynamicsList</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>m_ukfInput</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>m_kinDynFullModel</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>m_subModelList</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>m_measurementMap</edgelabel>
        </childnode>
        <childnode refid="19" relation="usage">
          <edgelabel>m_subModelFrictionTorque</edgelabel>
          <edgelabel>m_subModelJointAcc</edgelabel>
          <edgelabel>m_subModelJointMotorTorque</edgelabel>
          <edgelabel>m_subModelJointPos</edgelabel>
          <edgelabel>m_subModelJointVel</edgelabel>
          <edgelabel>m_subModelNuDot</edgelabel>
          <edgelabel>m_totalTorqueFromContacts</edgelabel>
        </childnode>
        <childnode refid="20" relation="usage">
          <edgelabel>m_FTMap</edgelabel>
          <edgelabel>m_extContactMap</edgelabel>
        </childnode>
        <childnode refid="23" relation="usage">
          <edgelabel>m_tempJacobianList</edgelabel>
        </childnode>
        <childnode refid="24" relation="usage">
          <edgelabel>m_stateVariableHandler</edgelabel>
        </childnode>
        <childnode refid="25" relation="usage">
          <edgelabel>m_ukfInputProvider</edgelabel>
        </childnode>
      </node>
      <node id="10">
        <label>BipedalLocomotion::Estimators::RobotDynamicsEstimator::UKFInput</label>
        <link refid="structBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UKFInput"/>
      </node>
      <node id="8">
        <label>std::vector&lt; T &gt;</label>
        <childnode refid="7" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>bfl::AdditiveMeasurementModel</label>
      </node>
      <node id="9">
        <label>std::vector&lt; std::pair&lt; std::string, std::shared_ptr&lt; BipedalLocomotion::Estimators::RobotDynamicsEstimator::Dynamics &gt; &gt; &gt;</label>
        <childnode refid="8" relation="template-instance">
          <edgelabel>&lt; std::pair&lt; std::string, std::shared_ptr&lt; BipedalLocomotion::Estimators::RobotDynamicsEstimator::Dynamics &gt; &gt; &gt;</edgelabel>
        </childnode>
      </node>
      <node id="17">
        <label>std::map&lt; K, T &gt;</label>
        <childnode refid="18" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="20">
        <label>std::map&lt; std::string, BipedalLocomotion::Math::Wrench &gt;</label>
        <childnode refid="21" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
        <childnode refid="15" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="17" relation="template-instance">
          <edgelabel>&lt; std::string, BipedalLocomotion::Math::Wrench &gt;</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>BipedalLocomotion::Estimators::RobotDynamicsEstimator::UkfMeasurement</label>
        <link refid="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UkfMeasurement"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="private-inheritance">
        </childnode>
      </node>
      <node id="16">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="5">
        <label>std::shared_ptr&lt; BipedalLocomotion::Estimators::RobotDynamicsEstimator::KinDynWrapper &gt;</label>
        <childnode refid="6" relation="template-instance">
          <edgelabel>&lt; BipedalLocomotion::Estimators::RobotDynamicsEstimator::KinDynWrapper &gt;</edgelabel>
        </childnode>
      </node>
      <node id="11">
        <label>std::shared_ptr&lt; iDynTree::KinDynComputations &gt;</label>
        <childnode refid="6" relation="template-instance">
          <edgelabel>&lt; iDynTree::KinDynComputations &gt;</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>std::vector&lt; std::shared_ptr&lt; BipedalLocomotion::Estimators::RobotDynamicsEstimator::KinDynWrapper &gt; &gt;</label>
        <childnode refid="5" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
        <childnode refid="8" relation="template-instance">
          <edgelabel>&lt; std::shared_ptr&lt; BipedalLocomotion::Estimators::RobotDynamicsEstimator::KinDynWrapper &gt; &gt;</edgelabel>
        </childnode>
      </node>
      <node id="13">
        <label>BipedalLocomotion::Estimators::RobotDynamicsEstimator::SubModel</label>
        <link refid="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1SubModel"/>
      </node>
      <node id="23">
        <label>std::vector&lt; Eigen::MatrixXd &gt;</label>
        <childnode refid="8" relation="template-instance">
          <edgelabel>&lt; Eigen::MatrixXd &gt;</edgelabel>
        </childnode>
      </node>
      <node id="12">
        <label>std::vector&lt; BipedalLocomotion::Estimators::RobotDynamicsEstimator::SubModel &gt;</label>
        <childnode refid="13" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
        <childnode refid="8" relation="template-instance">
          <edgelabel>&lt; BipedalLocomotion::Estimators::RobotDynamicsEstimator::SubModel &gt;</edgelabel>
        </childnode>
      </node>
      <node id="19">
        <label>std::vector&lt; Eigen::VectorXd &gt;</label>
        <childnode refid="8" relation="template-instance">
          <edgelabel>&lt; Eigen::VectorXd &gt;</edgelabel>
        </childnode>
      </node>
      <node id="21">
        <label>BipedalLocomotion::Math::Wrench&lt; Scalar &gt;</label>
        <link refid="classBipedalLocomotion_1_1Math_1_1Wrench"/>
        <childnode refid="22" relation="public-inheritance">
        </childnode>
      </node>
      <node id="14">
        <label>std::map&lt; std::string, Eigen::VectorXd &gt;</label>
        <childnode refid="15" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="17" relation="template-instance">
          <edgelabel>&lt; std::string, Eigen::VectorXd &gt;</edgelabel>
        </childnode>
      </node>
      <node id="22">
        <label>Eigen::Matrix&lt; Scalar, 6, 1 &gt;</label>
      </node>
      <node id="25">
        <label>std::shared_ptr&lt; const BipedalLocomotion::Estimators::RobotDynamicsEstimator::UkfInputProvider &gt;</label>
        <childnode refid="6" relation="template-instance">
          <edgelabel>&lt; const BipedalLocomotion::Estimators::RobotDynamicsEstimator::UkfInputProvider &gt;</edgelabel>
        </childnode>
      </node>
      <node id="24">
        <label>BipedalLocomotion::System::VariablesHandler</label>
        <link refid="classBipedalLocomotion_1_1System_1_1VariablesHandler"/>
      </node>
      <node id="15">
        <label>std::string</label>
        <childnode refid="16" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="BipedalLocomotion/RobotDynamicsEstimator/UkfMeasurement.h" line="42" column="1" bodyfile="BipedalLocomotion/RobotDynamicsEstimator/UkfMeasurement.h" bodystart="43" bodyend="232"/>
    <listofallmembers>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UkfMeasurement_1a81f077ee9742da066185196d99de5445" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Estimators::RobotDynamicsEstimator::UkfMeasurement</scope><name>build</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UkfMeasurement_1a0bf938a7c212bd3f23f65d4acdb287f1" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Estimators::RobotDynamicsEstimator::UkfMeasurement</scope><name>finalize</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UkfMeasurement_1a93871ca09f6b3abd89cdc57e83c68c72" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Estimators::RobotDynamicsEstimator::UkfMeasurement</scope><name>freeze</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UkfMeasurement_1a3d3aee5448d684f1b62f38cc195af66f" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Estimators::RobotDynamicsEstimator::UkfMeasurement</scope><name>getInputDescription</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UkfMeasurement_1ac8615aeda5b4e01022bf0c8f6e179127" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Estimators::RobotDynamicsEstimator::UkfMeasurement</scope><name>getMeasurementDescription</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UkfMeasurement_1a2eb74316fe079b641912b3e5d3b90e40" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Estimators::RobotDynamicsEstimator::UkfMeasurement</scope><name>getMeasurementSize</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UkfMeasurement_1a8b8f1cc6c9b9377a9f2f39d7121e5989" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Estimators::RobotDynamicsEstimator::UkfMeasurement</scope><name>getMeasurementVariableHandler</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UkfMeasurement_1ac4bc75618d5b26f52d3429fec0eae395" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Estimators::RobotDynamicsEstimator::UkfMeasurement</scope><name>getNoiseCovarianceMatrix</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UkfMeasurement_1a277cc5da1090f678b8f76e4e1a1ec02a" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Estimators::RobotDynamicsEstimator::UkfMeasurement</scope><name>initialize</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UkfMeasurement_1a42b53b3b8de94477beccc56edbe01aeb" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Estimators::RobotDynamicsEstimator::UkfMeasurement</scope><name>innovation</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UkfMeasurement_1a3c46c37bd3f4521f66caa645c98fa9f8" prot="private" virt="non-virtual"><scope>BipedalLocomotion::Estimators::RobotDynamicsEstimator::UkfMeasurement</scope><name>m_covarianceR</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UkfMeasurement_1a644932fae91ac54f3deaa8e64fb88f79" prot="private" virt="non-virtual"><scope>BipedalLocomotion::Estimators::RobotDynamicsEstimator::UkfMeasurement</scope><name>m_inputDescription</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UkfMeasurement_1a526628ef6fea54909181331a96d12b2d" prot="private" virt="non-virtual"><scope>BipedalLocomotion::Estimators::RobotDynamicsEstimator::UkfMeasurement</scope><name>m_measurementDescription</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UkfMeasurement_1a9ffd1ec2b55a2f9958a7389cc585792e" prot="private" virt="non-virtual"><scope>BipedalLocomotion::Estimators::RobotDynamicsEstimator::UkfMeasurement</scope><name>m_measurementSize</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UkfMeasurement_1a5ae2df836a60859167ce7d684dcf6feb" prot="private" virt="non-virtual"><scope>BipedalLocomotion::Estimators::RobotDynamicsEstimator::UkfMeasurement</scope><name>m_measurementVariableHandler</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UkfMeasurement_1a09bcb74e194580444b2007f3f6ad2975" prot="private" virt="non-virtual"><scope>BipedalLocomotion::Estimators::RobotDynamicsEstimator::UkfMeasurement</scope><name>m_predictedMeasurement</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UkfMeasurement_1a927a61e0b4a86f8aaa4df5e428e608e0" prot="private" virt="non-virtual"><scope>BipedalLocomotion::Estimators::RobotDynamicsEstimator::UkfMeasurement</scope><name>m_tempPredictedMeas</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UkfMeasurement_1ab3fa98a920c94461233987a23b544fa2" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Estimators::RobotDynamicsEstimator::UkfMeasurement</scope><name>measure</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UkfMeasurement_1a0abc9014ca9d64c17d589077b1a8638a" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Estimators::RobotDynamicsEstimator::UkfMeasurement</scope><name>predictedMeasure</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UkfMeasurement_1a66c317ef0deac940789962933b66a2c6" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Estimators::RobotDynamicsEstimator::UkfMeasurement</scope><name>setProperty</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UkfMeasurement_1a1a25144147de896f09cd97792b23d6ff" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Estimators::RobotDynamicsEstimator::UkfMeasurement</scope><name>setStateVariableHandler</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1RobotDynamicsEstimator_1_1UkfMeasurement_1af3a294d8de87e63fd5ddb28416454ae6" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Estimators::RobotDynamicsEstimator::UkfMeasurement</scope><name>setUkfInputProvider</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
