<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="matioCppConversions_8h" kind="file" language="C++">
    <compoundname>matioCppConversions.h</compoundname>
    <includes local="no">Eigen/Core</includes>
    <includes local="no">iDynTree/MatrixDynSize.h</includes>
    <includes local="no">iDynTree/EigenHelpers.h</includes>
    <includes local="no">iDynTree/MatrixFixSize.h</includes>
    <includes local="no">matioCpp/matioCpp.h</includes>
    <includes refid="Vector_8h" local="no">BipedalLocomotion/GenericContainer/Vector.h</includes>
    <incdepgraph>
      <node id="6">
        <label>matioCpp/matioCpp.h</label>
      </node>
      <node id="1">
        <label>BipedalLocomotion/Conversions/matioCppConversions.h</label>
        <link refid="matioCppConversions_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>Eigen/Core</label>
      </node>
      <node id="3">
        <label>iDynTree/MatrixDynSize.h</label>
      </node>
      <node id="4">
        <label>iDynTree/EigenHelpers.h</label>
      </node>
      <node id="5">
        <label>iDynTree/MatrixFixSize.h</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespaceBipedalLocomotion">BipedalLocomotion</innernamespace>
    <innernamespace refid="namespaceBipedalLocomotion_1_1Conversions">BipedalLocomotion::Conversions</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="matioCppConversions_8h_1a02e0b795745b9a9a6553bc9bcdcd8da9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename type</type>
          </param>
        </templateparamlist>
        <type>Eigen::Map&lt; Eigen::Matrix&lt; type, Eigen::Dynamic, Eigen::Dynamic &gt; &gt;</type>
        <definition>Eigen::Map&lt;Eigen::Matrix&lt;type, Eigen::Dynamic, Eigen::Dynamic&gt; &gt; BipedalLocomotion::Conversions::toEigen</definition>
        <argsstring>(matioCpp::MultiDimensionalArray&lt; type &gt; &amp;input)</argsstring>
        <name>toEigen</name>
        <param>
          <type>matioCpp::MultiDimensionalArray&lt; type &gt; &amp;</type>
          <declname>input</declname>
        </param>
        <briefdescription>
<para>Conversion from a matioCpp::MultiDimensionalArray to an Eigen matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>The matioCpp::MultiDimensionalArray </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A map from the internal data of the MultiDimensionalArray </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Conversions/matioCppConversions.h" line="27" column="12" bodyfile="BipedalLocomotion/Conversions/matioCppConversions.h" bodystart="27" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="matioCppConversions_8h_1a3f906ee29461e114c48e47503c43e965" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename type</type>
          </param>
        </templateparamlist>
        <type>const Eigen::Map&lt; Eigen::Matrix&lt; type, Eigen::Dynamic, Eigen::Dynamic &gt; &gt;</type>
        <definition>const Eigen::Map&lt;Eigen::Matrix&lt;type, Eigen::Dynamic, Eigen::Dynamic&gt; &gt; BipedalLocomotion::Conversions::toEigen</definition>
        <argsstring>(const matioCpp::MultiDimensionalArray&lt; type &gt; &amp;input)</argsstring>
        <name>toEigen</name>
        <param>
          <type>const matioCpp::MultiDimensionalArray&lt; type &gt; &amp;</type>
          <declname>input</declname>
        </param>
        <briefdescription>
<para>Conversion from a const matioCpp::MultiDimensionalArray to an Eigen matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>The matioCpp::MultiDimensionalArray </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A const map from the internal data of the MultiDimensionalArray </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Conversions/matioCppConversions.h" line="40" column="18" bodyfile="BipedalLocomotion/Conversions/matioCppConversions.h" bodystart="40" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="matioCppConversions_8h_1acfc3f7c49d05947006f079d92f9b8839" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename type</type>
          </param>
        </templateparamlist>
        <type>Eigen::Map&lt; Eigen::Matrix&lt; type, Eigen::Dynamic, 1 &gt; &gt;</type>
        <definition>Eigen::Map&lt;Eigen::Matrix&lt;type, Eigen::Dynamic, 1&gt; &gt; BipedalLocomotion::Conversions::toEigen</definition>
        <argsstring>(matioCpp::Vector&lt; type &gt; &amp;input)</argsstring>
        <name>toEigen</name>
        <param>
          <type>matioCpp::Vector&lt; type &gt; &amp;</type>
          <declname>input</declname>
        </param>
        <briefdescription>
<para>Conversion from a matioCpp::Vector to an Eigen vector. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>The matioCpp::Vector </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A map from the internal data of the Vector </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Conversions/matioCppConversions.h" line="53" column="12" bodyfile="BipedalLocomotion/Conversions/matioCppConversions.h" bodystart="53" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="matioCppConversions_8h_1a585706043cef191172d7d84e32be5f63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename type</type>
          </param>
        </templateparamlist>
        <type>const Eigen::Map&lt; Eigen::Matrix&lt; type, Eigen::Dynamic, 1 &gt; &gt;</type>
        <definition>const Eigen::Map&lt;Eigen::Matrix&lt;type, Eigen::Dynamic, 1&gt; &gt; BipedalLocomotion::Conversions::toEigen</definition>
        <argsstring>(const matioCpp::Vector&lt; type &gt; &amp;input)</argsstring>
        <name>toEigen</name>
        <param>
          <type>const matioCpp::Vector&lt; type &gt; &amp;</type>
          <declname>input</declname>
        </param>
        <briefdescription>
<para>Conversion from a const matioCpp::Vector to an Eigen vector. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>The matioCpp::Vector </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A const map from the internal data of the Vector </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Conversions/matioCppConversions.h" line="65" column="18" bodyfile="BipedalLocomotion/Conversions/matioCppConversions.h" bodystart="65" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="matioCppConversions_8h_1af267c27331ddf097dd1410274ea8bf86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename EigenDerived</type>
          </param>
          <param>
            <type>typename</type>
            <defval>std::enable_if_t&lt;Eigen::MatrixBase&lt;EigenDerived&gt;::RowsAtCompileTime != 1 &amp;&amp;                                                             Eigen::MatrixBase&lt;EigenDerived&gt;::ColsAtCompileTime != 1&gt;</defval>
          </param>
        </templateparamlist>
        <type>matioCpp::MultiDimensionalArray&lt; typename EigenDerived::Scalar &gt;</type>
        <definition>matioCpp::MultiDimensionalArray&lt;typename EigenDerived::Scalar&gt; BipedalLocomotion::Conversions::tomatioCpp</definition>
        <argsstring>(const Eigen::MatrixBase&lt; EigenDerived &gt; &amp;input, const std::string &amp;name)</argsstring>
        <name>tomatioCpp</name>
        <param>
          <type>const Eigen::MatrixBase&lt; EigenDerived &gt; &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Conversion from an Eigen matrix to a matioCpp::MultiDimensionalArray. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>The input matrix. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the resulting matioCpp variable. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A matioCpp::MultiDimensionalArray containing a copy of the input data </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Conversions/matioCppConversions.h" line="79" column="33" bodyfile="BipedalLocomotion/Conversions/matioCppConversions.h" bodystart="79" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="matioCppConversions_8h_1ad70b8b51222d7801852366863c895788" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>matioCpp::MultiDimensionalArray&lt; double &gt;</type>
        <definition>matioCpp::MultiDimensionalArray&lt;double&gt; BipedalLocomotion::Conversions::tomatioCpp</definition>
        <argsstring>(const iDynTree::MatrixDynSize &amp;input, const std::string &amp;name)</argsstring>
        <name>tomatioCpp</name>
        <param>
          <type>const iDynTree::MatrixDynSize &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Conversion from an iDynTree::MatrixDynSize to a matioCpp::MultiDimensionalArray. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>The input matrix. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the resulting matioCpp variable. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A matioCpp::MultiDimensionalArray containing a copy of the input data </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Conversions/matioCppConversions.h" line="92" column="40" bodyfile="BipedalLocomotion/Conversions/matioCppConversions.h" bodystart="92" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="matioCppConversions_8h_1a032525b730552c9af26767c7f2deaacc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned int</type>
            <declname>nRows</declname>
            <defname>nRows</defname>
          </param>
          <param>
            <type>unsigned int</type>
            <declname>nCols</declname>
            <defname>nCols</defname>
          </param>
        </templateparamlist>
        <type>matioCpp::MultiDimensionalArray&lt; double &gt;</type>
        <definition>matioCpp::MultiDimensionalArray&lt;double&gt; BipedalLocomotion::Conversions::tomatioCpp</definition>
        <argsstring>(const iDynTree::MatrixFixSize&lt; nRows, nCols &gt; &amp;input, const std::string &amp;name)</argsstring>
        <name>tomatioCpp</name>
        <param>
          <type>const iDynTree::MatrixFixSize&lt; nRows, nCols &gt; &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Conversion from an iDynTree::MatrixFixSize to a matioCpp::MultiDimensionalArray. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>The input matrix. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the resulting matioCpp variable. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A matioCpp::MultiDimensionalArray containing a copy of the input data </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Conversions/matioCppConversions.h" line="105" column="33" bodyfile="BipedalLocomotion/Conversions/matioCppConversions.h" bodystart="105" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="matioCppConversions_8h_1a47866b78d0385a6d47fb8bd64ed66cfc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Vector</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename std::enable_if_t&lt;<ref refid="structBipedalLocomotion_1_1GenericContainer_1_1is__vector__constructible" kindref="compound">BipedalLocomotion::GenericContainer::is_vector_constructible</ref>&lt;Vector&gt;::value &amp;&amp;                                                             !std::is_same_v&lt;Vector, std::string&gt;&gt;</defval>
          </param>
        </templateparamlist>
        <type>matioCpp::Vector&lt; typename std::remove_cv_t&lt; typename BipedalLocomotion::container_data&lt; Vector &gt;::type &gt; &gt;</type>
        <definition>matioCpp::Vector&lt;typename std::remove_cv_t&lt;typename BipedalLocomotion::container_data&lt;Vector&gt;::type&gt; &gt; BipedalLocomotion::Conversions::tomatioCpp</definition>
        <argsstring>(const Vector &amp;input, const std::string &amp;name)</argsstring>
        <name>tomatioCpp</name>
        <param>
          <type>const Vector &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Conversion from a generic Vector to a matioCpp::Vector. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>The input vector. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the resulting matioCpp variable. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A matioCpp::Vector containing a copy of the input data </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Conversions/matioCppConversions.h" line="119" column="19" bodyfile="BipedalLocomotion/Conversions/matioCppConversions.h" bodystart="119" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="matioCppConversions_8h_1a9bb5a4571c033efda2a8ee47ea78cc5d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>matioCpp::String</type>
        <definition>matioCpp::String BipedalLocomotion::Conversions::tomatioCpp</definition>
        <argsstring>(const std::string &amp;input, const std::string &amp;name)</argsstring>
        <name>tomatioCpp</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Conversion from a std::string to a matioCpp::String. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>The input string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the resulting matioCpp variable. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A matioCpp::String containing a copy of the input data </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Conversions/matioCppConversions.h" line="132" column="25" bodyfile="BipedalLocomotion/Conversions/matioCppConversions.h" bodystart="132" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="matioCppConversions_8h_1acdca681271f326337ba415f2a8917b73" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>matioCpp::Vector&lt; matioCpp::Logical &gt;</type>
        <definition>matioCpp::Vector&lt;matioCpp::Logical&gt; BipedalLocomotion::Conversions::tomatioCpp</definition>
        <argsstring>(const std::vector&lt; bool &gt; &amp;input, const std::string &amp;name)</argsstring>
        <name>tomatioCpp</name>
        <param>
          <type>const std::vector&lt; bool &gt; &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Conversion from a boolean vector to a matioCpp::Vector&lt;matioCpp::Logical&gt; </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>The input vector. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the resulting matioCpp variable. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A matioCpp::Vector&lt;matioCpp::Logical&gt; containing a copy of the input data </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Conversions/matioCppConversions.h" line="143" column="25" bodyfile="BipedalLocomotion/Conversions/matioCppConversions.h" bodystart="143" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="matioCppConversions_8h_1a2b1bbb537e151f9db04920bcafd1ee09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename type</type>
          </param>
          <param>
            <type>typename</type>
            <defval>std::enable_if_t&lt;std::is_fundamental_v&lt;type&gt; &amp;&amp; !std::is_same_v&lt;type, bool&gt;&gt;</defval>
          </param>
        </templateparamlist>
        <type>matioCpp::Element&lt; type &gt;</type>
        <definition>matioCpp::Element&lt;type&gt; BipedalLocomotion::Conversions::tomatioCpp</definition>
        <argsstring>(const type &amp;input, const std::string &amp;name)</argsstring>
        <name>tomatioCpp</name>
        <param>
          <type>const type &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Conversion from a fundamental type to the corresponding matioCpp::Element. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>The input element. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the resulting matioCpp variable. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A matioCpp::Element containing a copy of the input data </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Conversions/matioCppConversions.h" line="155" column="19" bodyfile="BipedalLocomotion/Conversions/matioCppConversions.h" bodystart="155" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="matioCppConversions_8h_1aae6f5c5ef40cef9da3444106f7e0255d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>matioCpp::Element&lt; matioCpp::Logical &gt;</type>
        <definition>matioCpp::Element&lt;matioCpp::Logical&gt; BipedalLocomotion::Conversions::tomatioCpp</definition>
        <argsstring>(bool input, const std::string &amp;name)</argsstring>
        <name>tomatioCpp</name>
        <param>
          <type>bool</type>
          <declname>input</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Conversion from a boolean to a matioCpp::Element&lt;matioCpp::Logical&gt; </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>The input element. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the resulting matioCpp variable. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A matioCpp::Element&lt;matioCpp::Logical&gt; whose value is equal to the input. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Conversions/matioCppConversions.h" line="166" column="26" bodyfile="BipedalLocomotion/Conversions/matioCppConversions.h" bodystart="166" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="matioCppConversions_8h_1a45c2dd5b085948c64f498e667ea1ff7f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>matioCpp::CellArray</type>
        <definition>matioCpp::CellArray BipedalLocomotion::Conversions::tomatioCpp</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;input, const std::string &amp;name)</argsstring>
        <name>tomatioCpp</name>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Conversion from a vector of strings to a matioCpp::CellArray containing the input strings. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>The input vector of strings. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the resulting matioCpp variable. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A matioCpp::CellArray of dimensions nx1 (with n the number of strings) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Conversions/matioCppConversions.h" line="177" column="28" bodyfile="BipedalLocomotion/Conversions/matioCppConversions.h" bodystart="177" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="matioCppConversions_8h_1a4101bbca2961617b67cc7ca464a1def0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class iterator</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename std::enable_if_t&lt;is_pair_iterator_string&lt;iterator&gt;::value&gt;</defval>
          </param>
        </templateparamlist>
        <type>matioCpp::Struct</type>
        <definition>matioCpp::Struct BipedalLocomotion::Conversions::tomatioCppStruct</definition>
        <argsstring>(iterator begin, iterator end, const std::string &amp;name)</argsstring>
        <name>tomatioCppStruct</name>
        <param>
          <type>iterator</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>iterator</type>
          <declname>end</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Create a matioCpp::Struct starting from the begin and end iterators of a map-like container The dereferenced value of the iterator has to be a pair (like with std::maps and std::unordered_map) with the key being a string. </para>
        </briefdescription>
        <detaileddescription>
<para>For each key, there is the corresponding field in the Struct. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>begin</parametername>
</parameternamelist>
<parameterdescription>
<para>The iterator to the first element </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>The iterator to the element after the last. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the struct. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The corresponding matioCpp::Struct </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Conversions/matioCppConversions.h" line="199" column="18" bodyfile="BipedalLocomotion/Conversions/matioCppConversions.h" bodystart="199" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="matioCppConversions_8h_1af3036db9a887e7f936d293c4a9f2c89d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class iterator</type>
          </param>
        </templateparamlist>
        <type>matioCpp::CellArray</type>
        <definition>matioCpp::CellArray BipedalLocomotion::Conversions::toMatioCppCellArray</definition>
        <argsstring>(const iterator &amp;begin, const iterator &amp;end, const std::string &amp;name)</argsstring>
        <name>toMatioCppCellArray</name>
        <param>
          <type>const iterator &amp;</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>const iterator &amp;</type>
          <declname>end</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Create a matioCpp::CellArray starting from the begin and end iterators of a container. </para>
        </briefdescription>
        <detaileddescription>
<para>If dereferenced value of the iterator is a pair (like with std::maps and std::unordered_map), only the &quot;second&quot; element is considered. The name of the imported variable in the CellArray is &quot;imported_element_x&quot;, where &quot;x&quot; is the corresponding raw index. If the iterator is a pair, and &quot;first&quot; is a string, this will be used as a name. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>begin</parametername>
</parameternamelist>
<parameterdescription>
<para>The iterator to the first element </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>The iterator to the element after the last. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the CellArray. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The corresponding matioCpp::CellArray. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Conversions/matioCppConversions.h" line="224" column="21" bodyfile="BipedalLocomotion/Conversions/matioCppConversions.h" bodystart="224" bodyend="255"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="authors"><para>Stefano Dafarra </para>
</simplesect>
<simplesect kind="copyright"><para>2020 Istituto Italiano di Tecnologia (IIT). This software may be modified and distributed under the terms of the BSD-3-Clause license. </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="BipedalLocomotion/Conversions/matioCppConversions.h"/>
  </compounddef>
</doxygen>
