<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classBipedalLocomotion_1_1RobotInterface_1_1IRobotControl" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>BipedalLocomotion::RobotInterface::IRobotControl</compoundname>
    <derivedcompoundref refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpRobotControl" prot="public" virt="non-virtual">BipedalLocomotion::RobotInterface::YarpRobotControl</derivedcompoundref>
    <includes local="no">BipedalLocomotion/RobotInterface/IRobotControl.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="classBipedalLocomotion_1_1RobotInterface_1_1IRobotControl_1a4d0ff64a201bf8ed884da1c41e3497bc" prot="public" static="no" strong="yes">
        <type></type>
        <name>ControlMode</name>
        <enumvalue id="classBipedalLocomotion_1_1RobotInterface_1_1IRobotControl_1a4d0ff64a201bf8ed884da1c41e3497bca52f5e0bc3859bc5f5e25130b6c7e8881" prot="public">
          <name>Position</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classBipedalLocomotion_1_1RobotInterface_1_1IRobotControl_1a4d0ff64a201bf8ed884da1c41e3497bcaa72edba28a392d1e46a021cdc04a4536" prot="public">
          <name>PositionDirect</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classBipedalLocomotion_1_1RobotInterface_1_1IRobotControl_1a4d0ff64a201bf8ed884da1c41e3497bca88156d46910a2d733443c339a9231d12" prot="public">
          <name>Velocity</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classBipedalLocomotion_1_1RobotInterface_1_1IRobotControl_1a4d0ff64a201bf8ed884da1c41e3497bca1aaf5a08dfe16d89a8ca6f8de4cfb0ca" prot="public">
          <name>Torque</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classBipedalLocomotion_1_1RobotInterface_1_1IRobotControl_1a4d0ff64a201bf8ed884da1c41e3497bca8449bc264b69c3a0fe8b60361eaf7aeb" prot="public">
          <name>PWM</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classBipedalLocomotion_1_1RobotInterface_1_1IRobotControl_1a4d0ff64a201bf8ed884da1c41e3497bca222a267cc5778206b253be35ee3ddab5" prot="public">
          <name>Current</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classBipedalLocomotion_1_1RobotInterface_1_1IRobotControl_1a4d0ff64a201bf8ed884da1c41e3497bcae599161956d626eda4cb0a5ffb85271c" prot="public">
          <name>Idle</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classBipedalLocomotion_1_1RobotInterface_1_1IRobotControl_1a4d0ff64a201bf8ed884da1c41e3497bca88183b946cc5f0e8c96b2e66e1c74a7e" prot="public">
          <name>Unknown</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>ControlMode contains the supported control mode. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/IRobotControl.h" line="31" column="5" bodyfile="BipedalLocomotion/RobotInterface/IRobotControl.h" bodystart="32" bodyend="41"/>
      </memberdef>
      <memberdef kind="typedef" id="classBipedalLocomotion_1_1RobotInterface_1_1IRobotControl_1a83a31cc243335220b2c218b8534f6851" prot="public" static="no">
        <type>std::unique_ptr&lt; <ref refid="classBipedalLocomotion_1_1RobotInterface_1_1IRobotControl" kindref="compound">IRobotControl</ref> &gt;</type>
        <definition>using BipedalLocomotion::RobotInterface::IRobotControl::unique_ptr =  std::unique_ptr&lt;IRobotControl&gt;</definition>
        <argsstring></argsstring>
        <name>unique_ptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/IRobotControl.h" line="43" column="5" bodyfile="BipedalLocomotion/RobotInterface/IRobotControl.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classBipedalLocomotion_1_1RobotInterface_1_1IRobotControl_1a5f3690c4c924d5e5fbf590a102bd4234" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="classBipedalLocomotion_1_1RobotInterface_1_1IRobotControl" kindref="compound">IRobotControl</ref> &gt;</type>
        <definition>using BipedalLocomotion::RobotInterface::IRobotControl::shared_ptr =  std::shared_ptr&lt;IRobotControl&gt;</definition>
        <argsstring></argsstring>
        <name>shared_ptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/IRobotControl.h" line="45" column="5" bodyfile="BipedalLocomotion/RobotInterface/IRobotControl.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classBipedalLocomotion_1_1RobotInterface_1_1IRobotControl_1a470535808ebda4b9634455c638a1649c" prot="public" static="no">
        <type>std::weak_ptr&lt; <ref refid="classBipedalLocomotion_1_1RobotInterface_1_1IRobotControl" kindref="compound">IRobotControl</ref> &gt;</type>
        <definition>using BipedalLocomotion::RobotInterface::IRobotControl::weak_ptr =  std::weak_ptr&lt;IRobotControl&gt;</definition>
        <argsstring></argsstring>
        <name>weak_ptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/IRobotControl.h" line="47" column="5" bodyfile="BipedalLocomotion/RobotInterface/IRobotControl.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1IRobotControl_1ae6bb2f00cd191a0cc65c062928b65327" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool BipedalLocomotion::RobotInterface::IRobotControl::initialize</definition>
        <argsstring>(std::weak_ptr&lt; ParametersHandler::IParametersHandler &gt; handler)</argsstring>
        <name>initialize</name>
        <reimplementedby refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpRobotControl_1a85dbd7d4b6312bf184bb03054a0240b5">initialize</reimplementedby>
        <param>
          <type>std::weak_ptr&lt; <ref refid="classBipedalLocomotion_1_1ParametersHandler_1_1IParametersHandler" kindref="compound">ParametersHandler::IParametersHandler</ref> &gt;</type>
          <declname>handler</declname>
        </param>
        <briefdescription>
<para>Initialize the Interface. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handler</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a parameter handler interface </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True/False in case of success/failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/IRobotControl.h" line="54" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1IRobotControl_1a1d8c631649d6111f17a9ba821f550497" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool BipedalLocomotion::RobotInterface::IRobotControl::checkMotionDone</definition>
        <argsstring>(bool &amp;motionDone, bool &amp;isTimerExpired, std::vector&lt; std::pair&lt; std::string, double &gt;&gt; &amp;info)=0</argsstring>
        <name>checkMotionDone</name>
        <reimplementedby refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpRobotControl_1a69d3aac94055729d5fbff666ae1ceb83">checkMotionDone</reimplementedby>
        <param>
          <type>bool &amp;</type>
          <declname>motionDone</declname>
        </param>
        <param>
          <type>bool &amp;</type>
          <declname>isTimerExpired</declname>
        </param>
        <param>
          <type>std::vector&lt; std::pair&lt; std::string, double &gt;&gt; &amp;</type>
          <declname>info</declname>
        </param>
        <briefdescription>
<para>Check if the motion set through the position control mode ended. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">motionDone</parametername>
</parameternamelist>
<parameterdescription>
<para>true if the motion ended. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">isTimerExpired</parametername>
</parameternamelist>
<parameterdescription>
<para>true if the internal timer is expired or not. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">info</parametername>
</parameternamelist>
<parameterdescription>
<para>vector containing the list of the joint whose motion did not finish yet. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True/False in case of success/failure. </para>
</simplesect>
<simplesect kind="note"><para>If the timer is expired and the motion did not finish yet, there may be a problem with the robot. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/IRobotControl.h" line="65" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1IRobotControl_1adbbafcb80056c18f40e25cf4865dfe56" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool BipedalLocomotion::RobotInterface::IRobotControl::setReferences</definition>
        <argsstring>(Eigen::Ref&lt; const Eigen::VectorXd &gt; jointValues, const std::vector&lt; IRobotControl::ControlMode &gt; &amp;controlModes)=0</argsstring>
        <name>setReferences</name>
        <reimplementedby refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpRobotControl_1ab229c5fe700419a24550d89f042e68b1">setReferences</reimplementedby>
        <param>
          <type>Eigen::Ref&lt; const Eigen::VectorXd &gt;</type>
          <declname>jointValues</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="classBipedalLocomotion_1_1RobotInterface_1_1IRobotControl_1a4d0ff64a201bf8ed884da1c41e3497bc" kindref="member">IRobotControl::ControlMode</ref> &gt; &amp;</type>
          <declname>controlModes</declname>
        </param>
        <briefdescription>
<para>Set the desired reference. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>jointValues</parametername>
</parameternamelist>
<parameterdescription>
<para>desired joint values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>controlModes</parametername>
</parameternamelist>
<parameterdescription>
<para>vector containing the control mode for each joint. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True/False in case of success/failure. </para>
</simplesect>
<simplesect kind="note"><para>In case of position control the values has to be expressed in rad, in case of velocity control in rad/s. If the robot is controlled in torques, the desired joint values are expressed in Nm. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/IRobotControl.h" line="78" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1IRobotControl_1abaeb6208365c23fe845893b6e59e84ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool BipedalLocomotion::RobotInterface::IRobotControl::setReferences</definition>
        <argsstring>(Eigen::Ref&lt; const Eigen::VectorXd &gt; desiredJointValues, const IRobotControl::ControlMode &amp;controlMode)=0</argsstring>
        <name>setReferences</name>
        <reimplementedby refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpRobotControl_1a94bc2f427bffa43aa1bd4da7ff0a9ad8">setReferences</reimplementedby>
        <param>
          <type>Eigen::Ref&lt; const Eigen::VectorXd &gt;</type>
          <declname>desiredJointValues</declname>
        </param>
        <param>
          <type>const <ref refid="classBipedalLocomotion_1_1RobotInterface_1_1IRobotControl_1a4d0ff64a201bf8ed884da1c41e3497bc" kindref="member">IRobotControl::ControlMode</ref> &amp;</type>
          <declname>controlMode</declname>
        </param>
        <briefdescription>
<para>Set the desired reference. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>jointValues</parametername>
</parameternamelist>
<parameterdescription>
<para>desired joint values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>controlMode</parametername>
</parameternamelist>
<parameterdescription>
<para>a control mode for all the joints. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True/False in case of success/failure. </para>
</simplesect>
<simplesect kind="note"><para>In case of position control the values has to be expressed in rad, in case of velocity control in rad/s. If the robot is controlled in torques, the desired joint values are expressed in Nm. @warining Call this function if you want to control all the joint with the same control mode. Otherwise call setReferences(Eigen::Ref&lt;const Eigen::VectorXd&gt;, const std::vector&lt;IRobotControl::ControlMode&gt;&amp;). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/IRobotControl.h" line="93" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1IRobotControl_1a1510d2b72ba39e075a078b2275c7a988" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool BipedalLocomotion::RobotInterface::IRobotControl::setControlMode</definition>
        <argsstring>(const std::vector&lt; IRobotControl::ControlMode &gt; &amp;controlModes)=0</argsstring>
        <name>setControlMode</name>
        <reimplementedby refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpRobotControl_1afe135a4312087eb0b666ddbbe3dc25bf">setControlMode</reimplementedby>
        <param>
          <type>const std::vector&lt; <ref refid="classBipedalLocomotion_1_1RobotInterface_1_1IRobotControl_1a4d0ff64a201bf8ed884da1c41e3497bc" kindref="member">IRobotControl::ControlMode</ref> &gt; &amp;</type>
          <declname>controlModes</declname>
        </param>
        <briefdescription>
<para>Set the control mode. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>controlModes</parametername>
</parameternamelist>
<parameterdescription>
<para>vector containing the control mode for each joint. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True/False in case of success/failure. </para>
</simplesect>
<simplesect kind="warning"><para>At the current stage only revolute joints are supported. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/IRobotControl.h" line="102" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1IRobotControl_1a5ae1dad766c79a234c67b53823bbd77a" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool BipedalLocomotion::RobotInterface::IRobotControl::setControlMode</definition>
        <argsstring>(const IRobotControl::ControlMode &amp;mode)=0</argsstring>
        <name>setControlMode</name>
        <reimplementedby refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpRobotControl_1acdbfb92bd7a2a6bc31ba156600a4ffc9">setControlMode</reimplementedby>
        <param>
          <type>const <ref refid="classBipedalLocomotion_1_1RobotInterface_1_1IRobotControl_1a4d0ff64a201bf8ed884da1c41e3497bc" kindref="member">IRobotControl::ControlMode</ref> &amp;</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Set the desired control mode. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>controlMode</parametername>
</parameternamelist>
<parameterdescription>
<para>a control mode for all the joints. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True/False in case of success/failure. </para>
</simplesect>
<simplesect kind="warning"><para>Call this function if you want to control all the joint with the same control mode. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/IRobotControl.h" line="110" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1IRobotControl_1a039679ebcb7f4317aebdc1218410639c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>virtual std::vector&lt;std::string&gt; BipedalLocomotion::RobotInterface::IRobotControl::getJointList</definition>
        <argsstring>() const =0</argsstring>
        <name>getJointList</name>
        <reimplementedby refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpRobotControl_1a4968e571c4433e54b89a7c83fdfeace2">getJointList</reimplementedby>
        <briefdescription>
<para>Get the list of the controlled joints. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A vector containing the name of the controlled joints. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/IRobotControl.h" line="116" column="25"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1IRobotControl_1af76dce642b0d3e6a2e54c5a82da8061b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool BipedalLocomotion::RobotInterface::IRobotControl::isValid</definition>
        <argsstring>() const =0</argsstring>
        <name>isValid</name>
        <reimplementedby refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpRobotControl_1a3aa8d45bff0791af4143ab65f0cbd75c">isValid</reimplementedby>
        <briefdescription>
<para>Check if the class is valid. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>If it is valid you can directly control the robot </para>
</simplesect>
<simplesect kind="return"><para>True if it is valid, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/IRobotControl.h" line="123" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1RobotInterface_1_1IRobotControl_1a137aaccf768f40582b2df587e55657eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual BipedalLocomotion::RobotInterface::IRobotControl::~IRobotControl</definition>
        <argsstring>()=default</argsstring>
        <name>~IRobotControl</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/RobotInterface/IRobotControl.h" line="128" column="13"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Robot control interface. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>BipedalLocomotion::RobotInterface::YarpRobotControl</label>
        <link refid="classBipedalLocomotion_1_1RobotInterface_1_1YarpRobotControl"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>BipedalLocomotion::RobotInterface::IRobotControl</label>
        <link refid="classBipedalLocomotion_1_1RobotInterface_1_1IRobotControl"/>
      </node>
    </inheritancegraph>
    <location file="BipedalLocomotion/RobotInterface/IRobotControl.h" line="25" column="1" bodyfile="BipedalLocomotion/RobotInterface/IRobotControl.h" bodystart="26" bodyend="130"/>
    <listofallmembers>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1IRobotControl_1a1d8c631649d6111f17a9ba821f550497" prot="public" virt="pure-virtual"><scope>BipedalLocomotion::RobotInterface::IRobotControl</scope><name>checkMotionDone</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1IRobotControl_1a4d0ff64a201bf8ed884da1c41e3497bc" prot="public" virt="non-virtual"><scope>BipedalLocomotion::RobotInterface::IRobotControl</scope><name>ControlMode</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1IRobotControl_1a039679ebcb7f4317aebdc1218410639c" prot="public" virt="pure-virtual"><scope>BipedalLocomotion::RobotInterface::IRobotControl</scope><name>getJointList</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1IRobotControl_1ae6bb2f00cd191a0cc65c062928b65327" prot="public" virt="virtual"><scope>BipedalLocomotion::RobotInterface::IRobotControl</scope><name>initialize</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1IRobotControl_1af76dce642b0d3e6a2e54c5a82da8061b" prot="public" virt="pure-virtual"><scope>BipedalLocomotion::RobotInterface::IRobotControl</scope><name>isValid</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1IRobotControl_1a1510d2b72ba39e075a078b2275c7a988" prot="public" virt="pure-virtual"><scope>BipedalLocomotion::RobotInterface::IRobotControl</scope><name>setControlMode</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1IRobotControl_1a5ae1dad766c79a234c67b53823bbd77a" prot="public" virt="pure-virtual"><scope>BipedalLocomotion::RobotInterface::IRobotControl</scope><name>setControlMode</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1IRobotControl_1adbbafcb80056c18f40e25cf4865dfe56" prot="public" virt="pure-virtual"><scope>BipedalLocomotion::RobotInterface::IRobotControl</scope><name>setReferences</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1IRobotControl_1abaeb6208365c23fe845893b6e59e84ac" prot="public" virt="pure-virtual"><scope>BipedalLocomotion::RobotInterface::IRobotControl</scope><name>setReferences</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1IRobotControl_1a5f3690c4c924d5e5fbf590a102bd4234" prot="public" virt="non-virtual"><scope>BipedalLocomotion::RobotInterface::IRobotControl</scope><name>shared_ptr</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1IRobotControl_1a83a31cc243335220b2c218b8534f6851" prot="public" virt="non-virtual"><scope>BipedalLocomotion::RobotInterface::IRobotControl</scope><name>unique_ptr</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1IRobotControl_1a470535808ebda4b9634455c638a1649c" prot="public" virt="non-virtual"><scope>BipedalLocomotion::RobotInterface::IRobotControl</scope><name>weak_ptr</name></member>
      <member refid="classBipedalLocomotion_1_1RobotInterface_1_1IRobotControl_1a137aaccf768f40582b2df587e55657eb" prot="public" virt="virtual"><scope>BipedalLocomotion::RobotInterface::IRobotControl</scope><name>~IRobotControl</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
