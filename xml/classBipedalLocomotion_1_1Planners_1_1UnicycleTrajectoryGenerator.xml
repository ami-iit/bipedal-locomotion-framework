<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classBipedalLocomotion_1_1Planners_1_1UnicycleTrajectoryGenerator" kind="class" language="C++" prot="public" final="yes">
    <compoundname>BipedalLocomotion::Planners::UnicycleTrajectoryGenerator</compoundname>
    <basecompoundref refid="classBipedalLocomotion_1_1System_1_1Advanceable" prot="public" virt="non-virtual">BipedalLocomotion::System::Advanceable&lt; UnicycleTrajectoryGeneratorInput, UnicycleTrajectoryGeneratorOutput &gt;</basecompoundref>
    <includes local="no">BipedalLocomotion/Planners/UnicycleTrajectoryGenerator.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classBipedalLocomotion_1_1Planners_1_1UnicycleTrajectoryGenerator_1aa3c25d33d67b23ad38dff7b8827572a6" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; Impl &gt;</type>
        <definition>std::unique_ptr&lt;Impl&gt; BipedalLocomotion::Planners::UnicycleTrajectoryGenerator::m_pImpl</definition>
        <argsstring></argsstring>
        <name>m_pImpl</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Planners/UnicycleTrajectoryGenerator.h" line="152" column="21" bodyfile="BipedalLocomotion/Planners/UnicycleTrajectoryGenerator.h" bodystart="151" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classBipedalLocomotion_1_1Planners_1_1UnicycleTrajectoryGenerator_1ac2e8ca8004b753ffa1faf1d9fef13df6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BipedalLocomotion::Planners::UnicycleTrajectoryGenerator::UnicycleTrajectoryGenerator</definition>
        <argsstring>()</argsstring>
        <name>UnicycleTrajectoryGenerator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Planners/UnicycleTrajectoryGenerator.h" line="85" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Planners_1_1UnicycleTrajectoryGenerator_1a5408c84ed80e17a7a1454db72dedebb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual BipedalLocomotion::Planners::UnicycleTrajectoryGenerator::~UnicycleTrajectoryGenerator</definition>
        <argsstring>()</argsstring>
        <name>~UnicycleTrajectoryGenerator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Planners/UnicycleTrajectoryGenerator.h" line="87" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Planners_1_1UnicycleTrajectoryGenerator_1aa2a54bbac689ae5b626ac85d4dd853cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::Planners::UnicycleTrajectoryGenerator::setRobotContactFrames</definition>
        <argsstring>(const iDynTree::Model &amp;model)</argsstring>
        <name>setRobotContactFrames</name>
        <param>
          <type>const iDynTree::Model &amp;</type>
          <declname>model</declname>
        </param>
        <briefdescription>
<para>Set the robot contact frames. </para>
        </briefdescription>
        <detaileddescription>
<para>It should be called after the <ref refid="classBipedalLocomotion_1_1Planners_1_1UnicycleTrajectoryGenerator_1a24d305e02243069ba96e1cd24d5ada87" kindref="member">initialize()</ref> function. It checks if the contact frames names parsed by the <ref refid="classBipedalLocomotion_1_1Planners_1_1UnicycleTrajectoryGenerator_1a24d305e02243069ba96e1cd24d5ada87" kindref="member">initialize()</ref> function exist. If yes, it sets the related contact frames indexes and returns true. Otherwise, it sets the Impl::FSM::State back to NotInitialized and returns false. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>model</parametername>
</parameternamelist>
<parameterdescription>
<para>iDynTree::Model of the robot considered. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Planners/UnicycleTrajectoryGenerator.h" line="97" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Planners_1_1UnicycleTrajectoryGenerator_1a24d305e02243069ba96e1cd24d5ada87" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::Planners::UnicycleTrajectoryGenerator::initialize</definition>
        <argsstring>(std::weak_ptr&lt; const ParametersHandler::IParametersHandler &gt; handler) override</argsstring>
        <name>initialize</name>
        <reimplements refid="classBipedalLocomotion_1_1System_1_1Advanceable_1a6db247d3db83217a16e963d01f6bcb77">initialize</reimplements>
        <param>
          <type>std::weak_ptr&lt; const <ref refid="classBipedalLocomotion_1_1ParametersHandler_1_1IParametersHandler" kindref="compound">ParametersHandler::IParametersHandler</ref> &gt;</type>
          <declname>handler</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>   Initialize the planner.

   @note The following parameters are required by the class:
   |           Name              |      Type      |      Default      |     Example     |                     Description                           |
   | :-------------------------: | :------------: | :---------------: | :-------------: | :-------------------------------------------------------: |
   | `planner_advance_time_in_s` |     double     |       0.08        |       -         |     The time in advance at which the planner is called    |
   |           `dt`              |     double     |      0.002        |       -         |     The sampling time of the trajectory generator         |
   | `leftContactFrameName`      |     string     |         -         |    &quot;l_sole&quot;     |     Name of the left foot contact frame                   |
   | `rightContactFrameName`     |     string     |         -         |    &quot;r_sole&quot;     |     Name of the right foot contact frame                  |

   Implicitely, the class needs also all the parameters required by the Bipedalocotion::Planner::UnicyclePlanner class.
</verbatim> clang-format on <verbatim>   @param handler Pointer to the parameter handler.
   @return True in case of success, false otherwise.
</verbatim> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Planners/UnicycleTrajectoryGenerator.h" line="117" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Planners_1_1UnicycleTrajectoryGenerator_1a202108d0e2ee16f73e15ad1c63986555" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>const <ref refid="structBipedalLocomotion_1_1Planners_1_1UnicycleTrajectoryGeneratorOutput" kindref="compound">UnicycleTrajectoryGeneratorOutput</ref> &amp;</type>
        <definition>const UnicycleTrajectoryGeneratorOutput&amp; BipedalLocomotion::Planners::UnicycleTrajectoryGenerator::getOutput</definition>
        <argsstring>() const override</argsstring>
        <name>getOutput</name>
        <reimplements refid="classBipedalLocomotion_1_1System_1_1OutputPort_1a8c089ecf2dd8ff0fb2732233994b6cac">getOutput</reimplements>
        <briefdescription>
<para>Get the output of the planner. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Output of the planner. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Planners/UnicycleTrajectoryGenerator.h" line="123" column="45"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Planners_1_1UnicycleTrajectoryGenerator_1adac1c1f922fb7d852d2e35d7205b5654" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::Planners::UnicycleTrajectoryGenerator::isOutputValid</definition>
        <argsstring>() const override</argsstring>
        <name>isOutputValid</name>
        <reimplements refid="classBipedalLocomotion_1_1System_1_1OutputPort_1ac50de29a6160baa2bba195af9d69430a">isOutputValid</reimplements>
        <briefdescription>
<para>Check if the output is valid. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if the output is valid, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Planners/UnicycleTrajectoryGenerator.h" line="129" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Planners_1_1UnicycleTrajectoryGenerator_1a15e8f9e43ed8e797cee17ba2addbeb3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::Planners::UnicycleTrajectoryGenerator::setInput</definition>
        <argsstring>(const UnicycleTrajectoryGeneratorInput &amp;input) override</argsstring>
        <name>setInput</name>
        <param>
          <type>const <ref refid="structBipedalLocomotion_1_1Planners_1_1UnicycleTrajectoryGeneratorInput" kindref="compound">UnicycleTrajectoryGeneratorInput</ref> &amp;</type>
          <declname>input</declname>
        </param>
        <briefdescription>
<para>Set the input of the planner. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>Input of the planner. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True in case of success, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Planners/UnicycleTrajectoryGenerator.h" line="136" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Planners_1_1UnicycleTrajectoryGenerator_1ae65275f2302a65dc13e69c816d2bcec8" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::Planners::UnicycleTrajectoryGenerator::advance</definition>
        <argsstring>() override</argsstring>
        <name>advance</name>
        <reimplements refid="classBipedalLocomotion_1_1System_1_1Advanceable_1a67107e46e831d93f572558b541aab6d2">advance</reimplements>
        <briefdescription>
<para>Advance the planner. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True in case of success, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Planners/UnicycleTrajectoryGenerator.h" line="142" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Planners_1_1UnicycleTrajectoryGenerator_1a72c0083cb500f98a28b9b80f7ae647cf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::chrono::nanoseconds</type>
        <definition>std::chrono::nanoseconds BipedalLocomotion::Planners::UnicycleTrajectoryGenerator::getSamplingTime</definition>
        <argsstring>() const</argsstring>
        <name>getSamplingTime</name>
        <briefdescription>
<para>Get the sampling time of the planner. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Sampling time of the planner. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Planners/UnicycleTrajectoryGenerator.h" line="148" column="30"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classBipedalLocomotion_1_1Planners_1_1UnicycleTrajectoryGenerator_1a12358804d81681aaaacc4fd3e71c2359" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::Planners::UnicycleTrajectoryGenerator::generateFirstTrajectory</definition>
        <argsstring>()</argsstring>
        <name>generateFirstTrajectory</name>
        <briefdescription>
<para>Generate the first trajectory at initialization phase. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True in case of success, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Planners/UnicycleTrajectoryGenerator.h" line="158" column="10"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="classBipedalLocomotion_1_1Planners_1_1UnicycleTrajectoryGenerator" kindref="compound">UnicycleTrajectoryGenerator</ref> is a class that generates reference trajectories for humanoid robots. </para>
    </briefdescription>
    <detaileddescription>
<para>Every time that the <ref refid="classBipedalLocomotion_1_1Planners_1_1UnicycleTrajectoryGenerator_1ae65275f2302a65dc13e69c816d2bcec8" kindref="member">advance()</ref> member function is called, the Generator:<orderedlist>
<listitem><para>First checks if it is time to generate a new trajectory. In this case, it deploys the <ref refid="classBipedalLocomotion_1_1Planners_1_1UnicycleTrajectoryPlanner" kindref="compound">BipedalLocomotion::Planners::UnicycleTrajectoryPlanner</ref> to plan this new trajectory.</para>
</listitem><listitem><para>Then, it checks if it is time to merge the current trajectory with the last one computed by the <ref refid="classBipedalLocomotion_1_1Planners_1_1UnicycleTrajectoryPlanner" kindref="compound">UnicycleTrajectoryPlanner</ref>. In this case, it merges the two trajectories, which become the current one.</para>
</listitem><listitem><para>Finally, it unrolls the current trajectory (i.e., it advances it over time). The <ref refid="classBipedalLocomotion_1_1Planners_1_1UnicycleTrajectoryGenerator_1a202108d0e2ee16f73e15ad1c63986555" kindref="member">getOutput()</ref> member function returns the current trajectory, which includes the CoM, DCM, and footstep ones. The Generator requires the user to set the robot model using the setRobotModel() member function, before invoking the <ref refid="classBipedalLocomotion_1_1Planners_1_1UnicycleTrajectoryGenerator_1a24d305e02243069ba96e1cd24d5ada87" kindref="member">initialize()</ref> member function, which configures the Generator. As input, which is set by the <ref refid="classBipedalLocomotion_1_1Planners_1_1UnicycleTrajectoryGenerator_1a15e8f9e43ed8e797cee17ba2addbeb3c" kindref="member">setInput()</ref> member function, the Generator requires an instance of the <ref refid="structBipedalLocomotion_1_1Planners_1_1UnicycleTrajectoryGeneratorInput" kindref="compound">UnicycleTrajectoryGeneratorInput</ref> struct. </para>
</listitem></orderedlist>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>BipedalLocomotion::System::InputPort&lt; _Input &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1InputPort"/>
      </node>
      <node id="2">
        <label>BipedalLocomotion::System::Advanceable&lt; UnicycleTrajectoryGeneratorInput, UnicycleTrajectoryGeneratorOutput &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Advanceable"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="template-instance">
          <edgelabel>&lt; UnicycleTrajectoryGeneratorInput, UnicycleTrajectoryGeneratorOutput &gt;</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>BipedalLocomotion::System::OutputPort&lt; _Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1OutputPort"/>
      </node>
      <node id="1">
        <label>BipedalLocomotion::Planners::UnicycleTrajectoryGenerator</label>
        <link refid="classBipedalLocomotion_1_1Planners_1_1UnicycleTrajectoryGenerator"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>BipedalLocomotion::System::Advanceable&lt; _Input, _Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Advanceable"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>BipedalLocomotion::System::InputPort&lt; _Input &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1InputPort"/>
      </node>
      <node id="2">
        <label>BipedalLocomotion::System::Advanceable&lt; UnicycleTrajectoryGeneratorInput, UnicycleTrajectoryGeneratorOutput &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Advanceable"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="template-instance">
          <edgelabel>&lt; UnicycleTrajectoryGeneratorInput, UnicycleTrajectoryGeneratorOutput &gt;</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>BipedalLocomotion::System::OutputPort&lt; _Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1OutputPort"/>
      </node>
      <node id="1">
        <label>BipedalLocomotion::Planners::UnicycleTrajectoryGenerator</label>
        <link refid="classBipedalLocomotion_1_1Planners_1_1UnicycleTrajectoryGenerator"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>BipedalLocomotion::System::Advanceable&lt; _Input, _Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Advanceable"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="BipedalLocomotion/Planners/UnicycleTrajectoryGenerator.h" line="81" column="1" bodyfile="BipedalLocomotion/Planners/UnicycleTrajectoryGenerator.h" bodystart="83" bodyend="159"/>
    <listofallmembers>
      <member refid="classBipedalLocomotion_1_1Planners_1_1UnicycleTrajectoryGenerator_1ae65275f2302a65dc13e69c816d2bcec8" prot="public" virt="virtual"><scope>BipedalLocomotion::Planners::UnicycleTrajectoryGenerator</scope><name>advance</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1a09ee5b41c77c6b626f4d5cb775065325" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Planners::UnicycleTrajectoryGenerator</scope><name>Advanceable</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1aaeb3eba3073fbc844dea1eba4c9b68f3" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Planners::UnicycleTrajectoryGenerator</scope><name>Advanceable</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1ac1549cb26bd896e27370e97b0795ba3f" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Planners::UnicycleTrajectoryGenerator</scope><name>Advanceable</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1a618ab786bb43814b3b3012b843fce93b" prot="public" virt="virtual"><scope>BipedalLocomotion::Planners::UnicycleTrajectoryGenerator</scope><name>close</name></member>
      <member refid="classBipedalLocomotion_1_1Planners_1_1UnicycleTrajectoryGenerator_1a12358804d81681aaaacc4fd3e71c2359" prot="private" virt="non-virtual"><scope>BipedalLocomotion::Planners::UnicycleTrajectoryGenerator</scope><name>generateFirstTrajectory</name></member>
      <member refid="classBipedalLocomotion_1_1Planners_1_1UnicycleTrajectoryGenerator_1a202108d0e2ee16f73e15ad1c63986555" prot="public" virt="virtual"><scope>BipedalLocomotion::Planners::UnicycleTrajectoryGenerator</scope><name>getOutput</name></member>
      <member refid="classBipedalLocomotion_1_1Planners_1_1UnicycleTrajectoryGenerator_1a72c0083cb500f98a28b9b80f7ae647cf" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Planners::UnicycleTrajectoryGenerator</scope><name>getSamplingTime</name></member>
      <member refid="classBipedalLocomotion_1_1Planners_1_1UnicycleTrajectoryGenerator_1a24d305e02243069ba96e1cd24d5ada87" prot="public" virt="virtual"><scope>BipedalLocomotion::Planners::UnicycleTrajectoryGenerator</scope><name>initialize</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1a975a7ecbf38c917c7b72519581fc7dba" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Planners::UnicycleTrajectoryGenerator</scope><name>Input</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1InputPort_1a27c614cb30c1e4b78e64791f4919dfa7" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Planners::UnicycleTrajectoryGenerator</scope><name>InputPort</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1InputPort_1a74d1418613e89a7f2993ea936228a44a" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Planners::UnicycleTrajectoryGenerator</scope><name>InputPort</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1InputPort_1a02ec5c947f1d2d83d2952c3b899cc58f" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Planners::UnicycleTrajectoryGenerator</scope><name>InputPort</name></member>
      <member refid="classBipedalLocomotion_1_1Planners_1_1UnicycleTrajectoryGenerator_1adac1c1f922fb7d852d2e35d7205b5654" prot="public" virt="virtual"><scope>BipedalLocomotion::Planners::UnicycleTrajectoryGenerator</scope><name>isOutputValid</name></member>
      <member refid="classBipedalLocomotion_1_1Planners_1_1UnicycleTrajectoryGenerator_1aa3c25d33d67b23ad38dff7b8827572a6" prot="private" virt="non-virtual"><scope>BipedalLocomotion::Planners::UnicycleTrajectoryGenerator</scope><name>m_pImpl</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1ae147cdee9ff9160a9dfe0d3e349a9aad" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Planners::UnicycleTrajectoryGenerator</scope><name>operator=</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1adf0d9fc07bab0ec5d4db7f3a35816bf2" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Planners::UnicycleTrajectoryGenerator</scope><name>operator=</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1InputPort_1a54f476d3c8d6d003fb714309ea6272aa" prot="public" virt="non-virtual" ambiguityscope="BipedalLocomotion::System::InputPort::"><scope>BipedalLocomotion::Planners::UnicycleTrajectoryGenerator</scope><name>operator=</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1InputPort_1adb341b37472241b6da8b552166308d7b" prot="public" virt="non-virtual" ambiguityscope="BipedalLocomotion::System::InputPort::"><scope>BipedalLocomotion::Planners::UnicycleTrajectoryGenerator</scope><name>operator=</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1OutputPort_1af5e15f5e4962a5c8e0f0c0a49adb9ca1" prot="public" virt="non-virtual" ambiguityscope="BipedalLocomotion::System::OutputPort::"><scope>BipedalLocomotion::Planners::UnicycleTrajectoryGenerator</scope><name>operator=</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1OutputPort_1ad5c6ce3ad7d2a064d7bb512fe0bc489e" prot="public" virt="non-virtual" ambiguityscope="BipedalLocomotion::System::OutputPort::"><scope>BipedalLocomotion::Planners::UnicycleTrajectoryGenerator</scope><name>operator=</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1a69603f2c9c608815908425b5b8c2005c" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Planners::UnicycleTrajectoryGenerator</scope><name>Output</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1OutputPort_1a7c0d15e677a1935918fc747ba4c25ec1" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Planners::UnicycleTrajectoryGenerator</scope><name>OutputPort</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1OutputPort_1a0a39b891749961d34507b4b591886741" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Planners::UnicycleTrajectoryGenerator</scope><name>OutputPort</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1OutputPort_1a581340f280eca1890a8a7b2331761b57" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Planners::UnicycleTrajectoryGenerator</scope><name>OutputPort</name></member>
      <member refid="classBipedalLocomotion_1_1Planners_1_1UnicycleTrajectoryGenerator_1a15e8f9e43ed8e797cee17ba2addbeb3c" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Planners::UnicycleTrajectoryGenerator</scope><name>setInput</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1InputPort_1ad2637be5c9075a2d8f09fedc6a42d808" prot="public" virt="pure-virtual" ambiguityscope="Advanceable&lt; UnicycleTrajectoryGeneratorInput, UnicycleTrajectoryGeneratorOutput &gt;::"><scope>BipedalLocomotion::Planners::UnicycleTrajectoryGenerator</scope><name>setInput</name></member>
      <member refid="classBipedalLocomotion_1_1Planners_1_1UnicycleTrajectoryGenerator_1aa2a54bbac689ae5b626ac85d4dd853cd" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Planners::UnicycleTrajectoryGenerator</scope><name>setRobotContactFrames</name></member>
      <member refid="classBipedalLocomotion_1_1Planners_1_1UnicycleTrajectoryGenerator_1ac2e8ca8004b753ffa1faf1d9fef13df6" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Planners::UnicycleTrajectoryGenerator</scope><name>UnicycleTrajectoryGenerator</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1afae1137cba829874bab4a1d25d559896" prot="public" virt="virtual"><scope>BipedalLocomotion::Planners::UnicycleTrajectoryGenerator</scope><name>~Advanceable</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1InputPort_1ac9b58b0d2f6ae8821b873ed6f9817ccb" prot="public" virt="virtual"><scope>BipedalLocomotion::Planners::UnicycleTrajectoryGenerator</scope><name>~InputPort</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1OutputPort_1adcc49c38152c9204dcab4f8e87f68977" prot="public" virt="virtual"><scope>BipedalLocomotion::Planners::UnicycleTrajectoryGenerator</scope><name>~OutputPort</name></member>
      <member refid="classBipedalLocomotion_1_1Planners_1_1UnicycleTrajectoryGenerator_1a5408c84ed80e17a7a1454db72dedebb0" prot="public" virt="virtual"><scope>BipedalLocomotion::Planners::UnicycleTrajectoryGenerator</scope><name>~UnicycleTrajectoryGenerator</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
