<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classBipedalLocomotion_1_1IK_1_1AngularMomentumTask" kind="class" language="C++" prot="public">
    <compoundname>BipedalLocomotion::IK::AngularMomentumTask</compoundname>
    <basecompoundref refid="structBipedalLocomotion_1_1IK_1_1IKLinearTask" prot="public" virt="non-virtual">BipedalLocomotion::IK::IKLinearTask</basecompoundref>
    <includes local="no">BipedalLocomotion/IK/AngularMomentumTask.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classBipedalLocomotion_1_1IK_1_1AngularMomentumTask_1a2ce4d8535c571c6874b3d37497e2848b" prot="private" static="no" mutable="no">
        <type><ref refid="classBipedalLocomotion_1_1System_1_1VariablesHandler_1_1VariableDescription" kindref="compound">System::VariablesHandler::VariableDescription</ref></type>
        <definition>System::VariablesHandler::VariableDescription BipedalLocomotion::IK::AngularMomentumTask::m_robotVelocityVariable</definition>
        <argsstring></argsstring>
        <name>m_robotVelocityVariable</name>
        <briefdescription>
<para>Variable describing the robot velocity (base + joint) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/IK/AngularMomentumTask.h" line="38" column="51" bodyfile="BipedalLocomotion/IK/AngularMomentumTask.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBipedalLocomotion_1_1IK_1_1AngularMomentumTask_1aad2b89ff3fb2078cfa78b20440d48996" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool BipedalLocomotion::IK::AngularMomentumTask::m_isInitialized</definition>
        <argsstring></argsstring>
        <name>m_isInitialized</name>
        <initializer>{false}</initializer>
        <briefdescription>
<para>True if the task has been initialized. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/IK/AngularMomentumTask.h" line="48" column="10" bodyfile="BipedalLocomotion/IK/AngularMomentumTask.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBipedalLocomotion_1_1IK_1_1AngularMomentumTask_1a0e2873044e9bf67462aff4aafe691125" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool BipedalLocomotion::IK::AngularMomentumTask::m_isValid</definition>
        <argsstring></argsstring>
        <name>m_isValid</name>
        <initializer>{false}</initializer>
        <briefdescription>
<para>True if the task is valid. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/IK/AngularMomentumTask.h" line="49" column="10" bodyfile="BipedalLocomotion/IK/AngularMomentumTask.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBipedalLocomotion_1_1IK_1_1AngularMomentumTask_1ad0b8d4f0a403d2eecdcae48d7e723a0d" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; iDynTree::KinDynComputations &gt;</type>
        <definition>std::shared_ptr&lt;iDynTree::KinDynComputations&gt; BipedalLocomotion::IK::AngularMomentumTask::m_kinDyn</definition>
        <argsstring></argsstring>
        <name>m_kinDyn</name>
        <briefdescription>
<para>Pointer to a KinDynComputations object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/IK/AngularMomentumTask.h" line="51" column="21" bodyfile="BipedalLocomotion/IK/AngularMomentumTask.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBipedalLocomotion_1_1IK_1_1AngularMomentumTask_1a6451d98ed40aefbde444043128631217" prot="private" static="no" mutable="no">
        <type>Eigen::MatrixXd</type>
        <definition>Eigen::MatrixXd BipedalLocomotion::IK::AngularMomentumTask::m_centroidalMomentumMatrix</definition>
        <argsstring></argsstring>
        <name>m_centroidalMomentumMatrix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/IK/AngularMomentumTask.h" line="54" column="21" bodyfile="BipedalLocomotion/IK/AngularMomentumTask.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBipedalLocomotion_1_1IK_1_1AngularMomentumTask_1a7fbfa4b51522e80fc070081975eb92ff" prot="private" static="no" mutable="no">
        <type>std::size_t</type>
        <definition>std::size_t BipedalLocomotion::IK::AngularMomentumTask::m_angularMomentumTaskSize</definition>
        <argsstring></argsstring>
        <name>m_angularMomentumTaskSize</name>
        <initializer>{m_angularVelocitySize}</initializer>
        <briefdescription>
<para>DoFs associated to the linear task. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/IK/AngularMomentumTask.h" line="55" column="17" bodyfile="BipedalLocomotion/IK/AngularMomentumTask.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBipedalLocomotion_1_1IK_1_1AngularMomentumTask_1a07b0580e9032bfcd45d92c14be36db3a" prot="private" static="no" mutable="no">
        <type>std::array&lt; bool, m_angularVelocitySize &gt;</type>
        <definition>std::array&lt;bool, m_angularVelocitySize&gt; BipedalLocomotion::IK::AngularMomentumTask::m_mask</definition>
        <argsstring></argsstring>
        <name>m_mask</name>
        <initializer>{true, true, true}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/IK/AngularMomentumTask.h" line="56" column="16" bodyfile="BipedalLocomotion/IK/AngularMomentumTask.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classBipedalLocomotion_1_1IK_1_1AngularMomentumTask_1a2b6f7b2b28942fce6ec572d2b6ff2a33" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>constexpr std::size_t</type>
        <definition>constexpr std::size_t BipedalLocomotion::IK::AngularMomentumTask::m_angularVelocitySize</definition>
        <argsstring></argsstring>
        <name>m_angularVelocitySize</name>
        <initializer>{3}</initializer>
        <briefdescription>
<para>Size of the angular velocity vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/IK/AngularMomentumTask.h" line="43" column="34" bodyfile="BipedalLocomotion/IK/AngularMomentumTask.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBipedalLocomotion_1_1IK_1_1AngularMomentumTask_1a78886d9ffcb02bc7ac0ee5921dfd3d14" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>constexpr std::size_t</type>
        <definition>constexpr std::size_t BipedalLocomotion::IK::AngularMomentumTask::m_spatialVelocitySize</definition>
        <argsstring></argsstring>
        <name>m_spatialVelocitySize</name>
        <initializer>{6}</initializer>
        <briefdescription>
<para>Size of the spatial velocity vector. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/IK/AngularMomentumTask.h" line="45" column="34" bodyfile="BipedalLocomotion/IK/AngularMomentumTask.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classBipedalLocomotion_1_1IK_1_1AngularMomentumTask_1a0d554820cfaf291fa05a18309d7e9219" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::IK::AngularMomentumTask::initialize</definition>
        <argsstring>(std::weak_ptr&lt; const ParametersHandler::IParametersHandler &gt; paramHandler) override</argsstring>
        <name>initialize</name>
        <reimplements refid="classBipedalLocomotion_1_1System_1_1LinearTask_1ae8bd038ace5d8bccda37b62c5712f22b">initialize</reimplements>
        <param>
          <type>std::weak_ptr&lt; const <ref refid="classBipedalLocomotion_1_1ParametersHandler_1_1IParametersHandler" kindref="compound">ParametersHandler::IParametersHandler</ref> &gt;</type>
          <declname>paramHandler</declname>
        </param>
        <briefdescription>
<para>Initialize the task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>paramHandler</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the parameters handler. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>the following parameters are required by the class <table rows="3" cols="4"><row>
<entry thead="yes" align='center'><para>Parameter Name   </para>
</entry><entry thead="yes" align='center'><para>Type   </para>
</entry><entry thead="yes" align='center'><para>Description   </para>
</entry><entry thead="yes" align='center'><para>Mandatory    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>robot_velocity_variable_name</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>string</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>Name of the variable contained in <computeroutput>VariablesHandler</computeroutput> describing the robot velocity   </para>
</entry><entry thead="no" align='center'><para>Yes    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>mask</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>vector&lt;bool&gt;</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>Mask representing the angular momentum coordinates controlled. E.g. [1,0,1] will enable the control on the x and z coordinates only and the angular part. (Default value, [1,1,1])   </para>
</entry><entry thead="no" align='center'><para>No   </para>
</entry></row>
</table>
Where the generalized robot velocity is a vector containing the base spatial-velocity (expressed in mixed representation) and the joint velocities. </para>
</simplesect>
<simplesect kind="return"><para>True in case of success, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/IK/AngularMomentumTask.h" line="71" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1IK_1_1AngularMomentumTask_1ae1f400e1aa466e2edf8ecaaf5de0e106" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::IK::AngularMomentumTask::setKinDyn</definition>
        <argsstring>(std::shared_ptr&lt; iDynTree::KinDynComputations &gt; kinDyn) override</argsstring>
        <name>setKinDyn</name>
        <reimplements refid="structBipedalLocomotion_1_1IK_1_1IKLinearTask_1acbafe7a440ba7e7fbd0d174dc994accf">setKinDyn</reimplements>
        <param>
          <type>std::shared_ptr&lt; iDynTree::KinDynComputations &gt;</type>
          <declname>kinDyn</declname>
        </param>
        <briefdescription>
<para>Set the kinDynComputations object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>kinDyn</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a kinDynComputations object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True in case of success, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/IK/AngularMomentumTask.h" line="78" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1IK_1_1AngularMomentumTask_1a2a854f6c6ba7a7795a272cc77b6c21fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::IK::AngularMomentumTask::setVariablesHandler</definition>
        <argsstring>(const System::VariablesHandler &amp;variablesHandler) override</argsstring>
        <name>setVariablesHandler</name>
        <reimplements refid="classBipedalLocomotion_1_1System_1_1LinearTask_1a898c2f93e48aeeb41e29d17c17b95437">setVariablesHandler</reimplements>
        <param>
          <type>const <ref refid="classBipedalLocomotion_1_1System_1_1VariablesHandler" kindref="compound">System::VariablesHandler</ref> &amp;</type>
          <declname>variablesHandler</declname>
        </param>
        <briefdescription>
<para>Set the set of variables required by the task. </para>
        </briefdescription>
        <detaileddescription>
<para>The variables are stored in the <ref refid="classBipedalLocomotion_1_1System_1_1VariablesHandler" kindref="compound">System::VariablesHandler</ref>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>variablesHandler</parametername>
</parameternamelist>
<parameterdescription>
<para>reference to a variables handler. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The handler must contain a variable named as the parameter <computeroutput>robot_velocity_variable_name</computeroutput> stored in the parameter handler. The variable represents the generalized velocity of the robot. Where the generalized robot velocity is a vector containing the base spatial-velocity (expressed in mixed representation) and the joints velocity. </para>
</simplesect>
<simplesect kind="return"><para>True in case of success, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/IK/AngularMomentumTask.h" line="91" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1IK_1_1AngularMomentumTask_1a7b318269698acb82846c5d913530f11e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::IK::AngularMomentumTask::update</definition>
        <argsstring>() override</argsstring>
        <name>update</name>
        <reimplements refid="classBipedalLocomotion_1_1System_1_1LinearTask_1accd4ab19a7e8738abe53b485d8acbf1c">update</reimplements>
        <briefdescription>
<para>Update the content of the element. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True in case of success, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/IK/AngularMomentumTask.h" line="97" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1IK_1_1AngularMomentumTask_1a1c076d716aafc77e1a4eadf69406177c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::IK::AngularMomentumTask::setSetPoint</definition>
        <argsstring>(Eigen::Ref&lt; const Eigen::Vector3d &gt; desiredAngularMomentumComponents)</argsstring>
        <name>setSetPoint</name>
        <param>
          <type>Eigen::Ref&lt; const Eigen::Vector3d &gt;</type>
          <declname>desiredAngularMomentumComponents</declname>
        </param>
        <briefdescription>
<para>Set the desired reference trajectory. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>desired</parametername>
</parameternamelist>
<parameterdescription>
<para>angular momentum </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True in case of success, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/IK/AngularMomentumTask.h" line="104" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1IK_1_1AngularMomentumTask_1affc1f83bf94e354fbc926195935d1b9d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::size_t</type>
        <definition>std::size_t BipedalLocomotion::IK::AngularMomentumTask::size</definition>
        <argsstring>() const override</argsstring>
        <name>size</name>
        <reimplements refid="classBipedalLocomotion_1_1System_1_1LinearTask_1a34621cd88c6d60909f09e95226f2cd67">size</reimplements>
        <briefdescription>
<para>Get the size of the task. </para>
        </briefdescription>
        <detaileddescription>
<para>(I.e the number of rows of the vector b) <simplesect kind="return"><para>the size of the task. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/IK/AngularMomentumTask.h" line="110" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1IK_1_1AngularMomentumTask_1af196740947b398a49294690227b2054b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classBipedalLocomotion_1_1System_1_1LinearTask_1a2f9d37ec58342f227021c12a4a539748" kindref="member">Type</ref></type>
        <definition>Type BipedalLocomotion::IK::AngularMomentumTask::type</definition>
        <argsstring>() const override</argsstring>
        <name>type</name>
        <reimplements refid="classBipedalLocomotion_1_1System_1_1LinearTask_1ac20d8e993c66663b61f587d9642f3e8a">type</reimplements>
        <briefdescription>
<para>The <ref refid="classBipedalLocomotion_1_1IK_1_1AngularMomentumTask" kindref="compound">AngularMomentumTask</ref> is an equality task. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the size of the task. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/IK/AngularMomentumTask.h" line="116" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1IK_1_1AngularMomentumTask_1aa265b0bcd4834336c574d5472880b35e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::IK::AngularMomentumTask::isValid</definition>
        <argsstring>() const override</argsstring>
        <name>isValid</name>
        <reimplements refid="classBipedalLocomotion_1_1System_1_1LinearTask_1a2566bae7a097d11b420b89cdd3f2002f">isValid</reimplements>
        <briefdescription>
<para>Determines the validity of the objects retrieved with <ref refid="classBipedalLocomotion_1_1System_1_1LinearTask_1ad510fff46eb9cbbc65775b1a9490e297" kindref="member">getA()</ref> and <ref refid="classBipedalLocomotion_1_1System_1_1LinearTask_1a8c65780b85d3927038c3320d3cfca730" kindref="member">getB()</ref> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if the objects are valid, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/IK/AngularMomentumTask.h" line="122" column="10"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="classBipedalLocomotion_1_1IK_1_1AngularMomentumTask" kindref="compound">AngularMomentumTask</ref> is a concrete implementation of the Task. </para>
    </briefdescription>
    <detaileddescription>
<para>Please use this element if you want to control robot centroidal angular momentum. The task assumes perfect control of the robot velocity <formula id="212">$\nu$</formula> that contains the base linear and angular velocity expressed in mixed representation and the joint velocities. The task represents the following equation <formula id="213">\[ A_{cmm_\omega} \nu = {}^{G[A]} h_\omega ^* \]</formula> where <formula id="214">$A_{cmm_\omega}$</formula> is the angular part of the robot centroidal momentum matrix <formula id="215">${}^{G[A]} h_\omega ^*$</formula> is the desired centroidal angular momentum. <simplesect kind="note"><para><ref refid="classBipedalLocomotion_1_1IK_1_1AngularMomentumTask" kindref="compound">AngularMomentumTask</ref> can be used to control also a subset of element of the AngularMomentum. Please refer to <computeroutput>mask</computeroutput> parameter in <ref refid="classBipedalLocomotion_1_1IK_1_1AngularMomentumTask_1a0d554820cfaf291fa05a18309d7e9219" kindref="member">IK::AngularMomentumTask::initialize</ref> method. </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>BipedalLocomotion::IK::AngularMomentumTask</label>
        <link refid="classBipedalLocomotion_1_1IK_1_1AngularMomentumTask"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>BipedalLocomotion::IK::IKLinearTask</label>
        <link refid="structBipedalLocomotion_1_1IK_1_1IKLinearTask"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>BipedalLocomotion::System::LinearTask</label>
        <link refid="classBipedalLocomotion_1_1System_1_1LinearTask"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>BipedalLocomotion::IK::AngularMomentumTask</label>
        <link refid="classBipedalLocomotion_1_1IK_1_1AngularMomentumTask"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="2">
        <label>BipedalLocomotion::IK::IKLinearTask</label>
        <link refid="structBipedalLocomotion_1_1IK_1_1IKLinearTask"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>BipedalLocomotion::System::LinearTask</label>
        <link refid="classBipedalLocomotion_1_1System_1_1LinearTask"/>
        <childnode refid="4" relation="usage">
          <edgelabel>m_description</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>std::string</label>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="BipedalLocomotion/IK/AngularMomentumTask.h" line="36" column="1" bodyfile="BipedalLocomotion/IK/AngularMomentumTask.h" bodystart="37" bodyend="123"/>
    <listofallmembers>
      <member refid="classBipedalLocomotion_1_1System_1_1LinearTask_1ad510fff46eb9cbbc65775b1a9490e297" prot="public" virt="non-virtual"><scope>BipedalLocomotion::IK::AngularMomentumTask</scope><name>getA</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1LinearTask_1a8c65780b85d3927038c3320d3cfca730" prot="public" virt="non-virtual"><scope>BipedalLocomotion::IK::AngularMomentumTask</scope><name>getB</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1LinearTask_1a1d152be26f750d933bc07baf1344e97d" prot="public" virt="non-virtual"><scope>BipedalLocomotion::IK::AngularMomentumTask</scope><name>getDescription</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1LinearTask_1a591be3a0f92c9e1c40ccadf85c21f739" prot="public" virt="non-virtual"><scope>BipedalLocomotion::IK::AngularMomentumTask</scope><name>getResidual</name></member>
      <member refid="classBipedalLocomotion_1_1IK_1_1AngularMomentumTask_1a0d554820cfaf291fa05a18309d7e9219" prot="public" virt="virtual"><scope>BipedalLocomotion::IK::AngularMomentumTask</scope><name>initialize</name></member>
      <member refid="classBipedalLocomotion_1_1IK_1_1AngularMomentumTask_1aa265b0bcd4834336c574d5472880b35e" prot="public" virt="virtual"><scope>BipedalLocomotion::IK::AngularMomentumTask</scope><name>isValid</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1LinearTask_1aa95f6768b7cd98aab6727e2eb729a308" prot="protected" virt="non-virtual"><scope>BipedalLocomotion::IK::AngularMomentumTask</scope><name>m_A</name></member>
      <member refid="classBipedalLocomotion_1_1IK_1_1AngularMomentumTask_1a7fbfa4b51522e80fc070081975eb92ff" prot="private" virt="non-virtual"><scope>BipedalLocomotion::IK::AngularMomentumTask</scope><name>m_angularMomentumTaskSize</name></member>
      <member refid="classBipedalLocomotion_1_1IK_1_1AngularMomentumTask_1a2b6f7b2b28942fce6ec572d2b6ff2a33" prot="private" virt="non-virtual"><scope>BipedalLocomotion::IK::AngularMomentumTask</scope><name>m_angularVelocitySize</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1LinearTask_1a0e86b8ecde78a0d6e87fcb2c373b2151" prot="protected" virt="non-virtual"><scope>BipedalLocomotion::IK::AngularMomentumTask</scope><name>m_b</name></member>
      <member refid="classBipedalLocomotion_1_1IK_1_1AngularMomentumTask_1a6451d98ed40aefbde444043128631217" prot="private" virt="non-virtual"><scope>BipedalLocomotion::IK::AngularMomentumTask</scope><name>m_centroidalMomentumMatrix</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1LinearTask_1a5efff74f1d43a59376a9c93a0400120a" prot="protected" virt="non-virtual"><scope>BipedalLocomotion::IK::AngularMomentumTask</scope><name>m_description</name></member>
      <member refid="classBipedalLocomotion_1_1IK_1_1AngularMomentumTask_1aad2b89ff3fb2078cfa78b20440d48996" prot="private" virt="non-virtual"><scope>BipedalLocomotion::IK::AngularMomentumTask</scope><name>m_isInitialized</name></member>
      <member refid="classBipedalLocomotion_1_1IK_1_1AngularMomentumTask_1a0e2873044e9bf67462aff4aafe691125" prot="private" virt="non-virtual"><scope>BipedalLocomotion::IK::AngularMomentumTask</scope><name>m_isValid</name></member>
      <member refid="classBipedalLocomotion_1_1IK_1_1AngularMomentumTask_1ad0b8d4f0a403d2eecdcae48d7e723a0d" prot="private" virt="non-virtual"><scope>BipedalLocomotion::IK::AngularMomentumTask</scope><name>m_kinDyn</name></member>
      <member refid="classBipedalLocomotion_1_1IK_1_1AngularMomentumTask_1a07b0580e9032bfcd45d92c14be36db3a" prot="private" virt="non-virtual"><scope>BipedalLocomotion::IK::AngularMomentumTask</scope><name>m_mask</name></member>
      <member refid="classBipedalLocomotion_1_1IK_1_1AngularMomentumTask_1a2ce4d8535c571c6874b3d37497e2848b" prot="private" virt="non-virtual"><scope>BipedalLocomotion::IK::AngularMomentumTask</scope><name>m_robotVelocityVariable</name></member>
      <member refid="classBipedalLocomotion_1_1IK_1_1AngularMomentumTask_1a78886d9ffcb02bc7ac0ee5921dfd3d14" prot="private" virt="non-virtual"><scope>BipedalLocomotion::IK::AngularMomentumTask</scope><name>m_spatialVelocitySize</name></member>
      <member refid="classBipedalLocomotion_1_1IK_1_1AngularMomentumTask_1ae1f400e1aa466e2edf8ecaaf5de0e106" prot="public" virt="virtual"><scope>BipedalLocomotion::IK::AngularMomentumTask</scope><name>setKinDyn</name></member>
      <member refid="classBipedalLocomotion_1_1IK_1_1AngularMomentumTask_1a1c076d716aafc77e1a4eadf69406177c" prot="public" virt="non-virtual"><scope>BipedalLocomotion::IK::AngularMomentumTask</scope><name>setSetPoint</name></member>
      <member refid="classBipedalLocomotion_1_1IK_1_1AngularMomentumTask_1a2a854f6c6ba7a7795a272cc77b6c21fa" prot="public" virt="virtual"><scope>BipedalLocomotion::IK::AngularMomentumTask</scope><name>setVariablesHandler</name></member>
      <member refid="classBipedalLocomotion_1_1IK_1_1AngularMomentumTask_1affc1f83bf94e354fbc926195935d1b9d" prot="public" virt="virtual"><scope>BipedalLocomotion::IK::AngularMomentumTask</scope><name>size</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1LinearTask_1a06fab6bb77dd556a74c76b6e57dc0ba1" prot="protected" virt="non-virtual"><scope>BipedalLocomotion::IK::AngularMomentumTask</scope><name>subA</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1LinearTask_1ad6a0743b7902e539d634358b269741b4" prot="protected" virt="non-virtual"><scope>BipedalLocomotion::IK::AngularMomentumTask</scope><name>subA</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1LinearTask_1a2f9d37ec58342f227021c12a4a539748" prot="public" virt="non-virtual"><scope>BipedalLocomotion::IK::AngularMomentumTask</scope><name>Type</name></member>
      <member refid="classBipedalLocomotion_1_1IK_1_1AngularMomentumTask_1af196740947b398a49294690227b2054b" prot="public" virt="virtual"><scope>BipedalLocomotion::IK::AngularMomentumTask</scope><name>type</name></member>
      <member refid="classBipedalLocomotion_1_1IK_1_1AngularMomentumTask_1a7b318269698acb82846c5d913530f11e" prot="public" virt="virtual"><scope>BipedalLocomotion::IK::AngularMomentumTask</scope><name>update</name></member>
      <member refid="structBipedalLocomotion_1_1IK_1_1IKLinearTask_1ae1ea36d22880e1068c77661eef76ecf0" prot="public" virt="virtual"><scope>BipedalLocomotion::IK::AngularMomentumTask</scope><name>~IKLinearTask</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1LinearTask_1a22edf322e7504d1a197b687d265445d7" prot="public" virt="virtual"><scope>BipedalLocomotion::IK::AngularMomentumTask</scope><name>~LinearTask</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
