<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classBipedalLocomotion_1_1Estimators_1_1LeggedOdometry" kind="class" language="C++" prot="public">
    <compoundname>BipedalLocomotion::Estimators::LeggedOdometry</compoundname>
    <basecompoundref refid="classBipedalLocomotion_1_1Estimators_1_1FloatingBaseEstimator" prot="public" virt="non-virtual">BipedalLocomotion::Estimators::FloatingBaseEstimator</basecompoundref>
    <includes local="no">BipedalLocomotion/FloatingBaseEstimators/LeggedOdometry.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classBipedalLocomotion_1_1Estimators_1_1LeggedOdometry_1a0787382d79eb932e4182dbcdb3828afe" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; Impl &gt;</type>
        <definition>std::unique_ptr&lt;Impl&gt; BipedalLocomotion::Estimators::LeggedOdometry::m_pimpl</definition>
        <argsstring></argsstring>
        <name>m_pimpl</name>
        <briefdescription>
<para>Pointer to implementation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/FloatingBaseEstimators/LeggedOdometry.h" line="134" column="21" bodyfile="BipedalLocomotion/FloatingBaseEstimators/LeggedOdometry.h" bodystart="133" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classBipedalLocomotion_1_1Estimators_1_1LeggedOdometry_1ad382e28d11a12dadc7a957d7b8ea312f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BipedalLocomotion::Estimators::LeggedOdometry::LeggedOdometry</definition>
        <argsstring>()</argsstring>
        <name>LeggedOdometry</name>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/FloatingBaseEstimators/LeggedOdometry.h" line="43" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Estimators_1_1LeggedOdometry_1aa55f03f2372f5cfb7bc9da1b8ebbb5be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BipedalLocomotion::Estimators::LeggedOdometry::~LeggedOdometry</definition>
        <argsstring>()</argsstring>
        <name>~LeggedOdometry</name>
        <briefdescription>
<para>Destructor (necessary for PIMPL idiom) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/FloatingBaseEstimators/LeggedOdometry.h" line="48" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Estimators_1_1LeggedOdometry_1a3e2b8f537e7b55bef6144bac8bd0aea3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::Estimators::LeggedOdometry::resetEstimator</definition>
        <argsstring>()</argsstring>
        <name>resetEstimator</name>
        <briefdescription>
<para>Reset the internal state of the estimator using the initialized parameters. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True in case of success, false otherwise.</para>
</simplesect>
<simplesect kind="note"><para>reset and advance estimator to get updated estimator output </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/FloatingBaseEstimators/LeggedOdometry.h" line="61" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Estimators_1_1LeggedOdometry_1a85792e42834a47505612f568866b4a1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::Estimators::LeggedOdometry::resetEstimator</definition>
        <argsstring>(const std::string &amp;refFramForWorld, const Eigen::Quaterniond &amp;worldOrientationInRefFrame, const Eigen::Vector3d &amp;worldPositionInRefFrame)</argsstring>
        <name>resetEstimator</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>refFramForWorld</declname>
        </param>
        <param>
          <type>const Eigen::Quaterniond &amp;</type>
          <declname>worldOrientationInRefFrame</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>worldPositionInRefFrame</declname>
        </param>
        <briefdescription>
<para>Reset the internal state of the estimator by setting a new reference for the inertial frame. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">refFramForWorld</parametername>
</parameternamelist>
<parameterdescription>
<para>frame from the model as a reference to set the new inertial frame </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">worldOrientationInRefFrame</parametername>
</parameternamelist>
<parameterdescription>
<para>orientation of the inertial frame wrt to the reference frame </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">worldPositionInRefFrame</parametername>
</parameternamelist>
<parameterdescription>
<para>position of the inertial frame wrt to the reference frame </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True in case of success, false otherwise.</para>
</simplesect>
<simplesect kind="note"><para>reset and advance estimator to get updated estimator output </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/FloatingBaseEstimators/LeggedOdometry.h" line="72" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Estimators_1_1LeggedOdometry_1ac46a1432cf6e1d35dbf82c1473df6d0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::Estimators::LeggedOdometry::changeFixedFrame</definition>
        <argsstring>(const std::ptrdiff_t &amp;frameIndex)</argsstring>
        <name>changeFixedFrame</name>
        <param>
          <type>const std::ptrdiff_t &amp;</type>
          <declname>frameIndex</declname>
        </param>
        <briefdescription>
<para>Change fixed frame externally. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">frameIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>valid frame index from the model </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/FloatingBaseEstimators/LeggedOdometry.h" line="80" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Estimators_1_1LeggedOdometry_1a9b511a34575999941438520f4b4df828" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::Estimators::LeggedOdometry::changeFixedFrame</definition>
        <argsstring>(const std::string &amp;frameName)</argsstring>
        <name>changeFixedFrame</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>frameName</declname>
        </param>
        <briefdescription>
<para>Change fixed frame externally. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">frameIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>valid frame name from the model </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/FloatingBaseEstimators/LeggedOdometry.h" line="86" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Estimators_1_1LeggedOdometry_1a4b5ddc4e91a757b0ef4176db28db678d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::Estimators::LeggedOdometry::changeFixedFrame</definition>
        <argsstring>(const std::ptrdiff_t &amp;frameIndex, const Eigen::Quaterniond &amp;frameOrientationInWorld, const Eigen::Vector3d &amp;framePositionInWorld)</argsstring>
        <name>changeFixedFrame</name>
        <param>
          <type>const std::ptrdiff_t &amp;</type>
          <declname>frameIndex</declname>
        </param>
        <param>
          <type>const Eigen::Quaterniond &amp;</type>
          <declname>frameOrientationInWorld</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>framePositionInWorld</declname>
        </param>
        <briefdescription>
<para>Change fixed frame externally by mentioning the world_H_frame transform. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">frameIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>valid frame from the model </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">frameOrientationInWorld</parametername>
</parameternamelist>
<parameterdescription>
<para>orientation of the fixed frame wrt the inertial frame </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">framePositionInWorld</parametername>
</parameternamelist>
<parameterdescription>
<para>position of the fixed frame wrt the inertial frame </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>ensure to pass unit quaternion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/FloatingBaseEstimators/LeggedOdometry.h" line="95" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Estimators_1_1LeggedOdometry_1a2d4cb9c9c22c4bbe545da34d55eb74d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BipedalLocomotion::Estimators::LeggedOdometry::getFixedFrameIdx</definition>
        <argsstring>()</argsstring>
        <name>getFixedFrameIdx</name>
        <briefdescription>
<para>Get the index of the frame currently in contact used for the legged odometry computations. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Index of the frame in contact, invalid frame index if no contact. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/FloatingBaseEstimators/LeggedOdometry.h" line="103" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Estimators_1_1LeggedOdometry_1aa0e5b518365609f11198cff351a5f563" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>manif::SE3d &amp;</type>
        <definition>manif::SE3d&amp; BipedalLocomotion::Estimators::LeggedOdometry::getFixedFramePose</definition>
        <argsstring>() const</argsstring>
        <name>getFixedFramePose</name>
        <briefdescription>
<para>Get the psoe of the current fixed frame in the inertial frame. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>const ref of pose of the fixed frame </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/FloatingBaseEstimators/LeggedOdometry.h" line="109" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Estimators_1_1LeggedOdometry_1afaa96d18ba685b1cb5cb9a56f4d862cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>virtual bool BipedalLocomotion::Estimators::FloatingBaseEstimator::resetEstimator</definition>
        <argsstring>(const FloatingBaseEstimators::InternalState &amp;newState)</argsstring>
        <name>resetEstimator</name>
        <param>
          <type>const <ref refid="structBipedalLocomotion_1_1Estimators_1_1FloatingBaseEstimators_1_1InternalState" kindref="compound">FloatingBaseEstimators::InternalState</ref> &amp;</type>
          <declname>newState</declname>
        </param>
        <briefdescription>
<para>To prevent function hiding due to overloading of virtual methods. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/FloatingBaseEstimators/LeggedOdometry.h" line="53" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Estimators_1_1LeggedOdometry_1a3b6896ce5674651e673761bbce201154" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>virtual bool BipedalLocomotion::Estimators::FloatingBaseEstimator::resetEstimator</definition>
        <argsstring>(const Eigen::Quaterniond &amp;newBaseOrientation, const Eigen::Vector3d &amp;newBasePosition)</argsstring>
        <name>resetEstimator</name>
        <param>
          <type>const Eigen::Quaterniond &amp;</type>
          <declname>newBaseOrientation</declname>
        </param>
        <param>
          <type>const Eigen::Vector3d &amp;</type>
          <declname>newBasePosition</declname>
        </param>
        <briefdescription>
<para>To prevent function hiding due to overloading of virtual methods. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/FloatingBaseEstimators/LeggedOdometry.h" line="53" column="5"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classBipedalLocomotion_1_1Estimators_1_1LeggedOdometry_1a3e622dbc8c0559b2ed5cb5048fc620f9" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool BipedalLocomotion::Estimators::LeggedOdometry::customInitialization</definition>
        <argsstring>(std::weak_ptr&lt; BipedalLocomotion::ParametersHandler::IParametersHandler &gt; handler) override</argsstring>
        <name>customInitialization</name>
        <reimplements refid="classBipedalLocomotion_1_1Estimators_1_1FloatingBaseEstimator_1a462a1ca838fc97062d93395f2ecb52e9">customInitialization</reimplements>
        <param>
          <type>std::weak_ptr&lt; <ref refid="classBipedalLocomotion_1_1ParametersHandler_1_1IParametersHandler" kindref="compound">BipedalLocomotion::ParametersHandler::IParametersHandler</ref> &gt;</type>
          <declname>handler</declname>
        </param>
        <briefdescription>
<para>These custom parameter specifications should be specified by the derived class. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handler</parametername>
</parameternamelist>
<parameterdescription>
<para>configure the custom parameters for the estimator </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/FloatingBaseEstimators/LeggedOdometry.h" line="117" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Estimators_1_1LeggedOdometry_1a1a123da1d1e7a8bf3401dbcaa44fa93b" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool BipedalLocomotion::Estimators::LeggedOdometry::updateKinematics</definition>
        <argsstring>(FloatingBaseEstimators::Measurements &amp;meas, const double &amp;dt) override</argsstring>
        <name>updateKinematics</name>
        <reimplements refid="classBipedalLocomotion_1_1Estimators_1_1FloatingBaseEstimator_1a22dfe34e6bba688d4e00f6c97c47bd0c">updateKinematics</reimplements>
        <param>
          <type><ref refid="structBipedalLocomotion_1_1Estimators_1_1FloatingBaseEstimators_1_1Measurements" kindref="compound">FloatingBaseEstimators::Measurements</ref> &amp;</type>
          <declname>meas</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>dt</declname>
        </param>
        <briefdescription>
<para>Update the base state estimate using kinematics and contact measurements. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">meas</parametername>
</parameternamelist>
<parameterdescription>
<para>measurements to update states </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dt</parametername>
</parameternamelist>
<parameterdescription>
<para>sampling period in seconds </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True in case of success, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/FloatingBaseEstimators/LeggedOdometry.h" line="125" column="18"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Floating base estimation algorithm using only kinematic measurements by assuming atleast one frame on the robot is in contact with the environment. </para>
    </briefdescription>
    <detaileddescription>
<para>Configuration parameters,</para>
<para><table rows="12" cols="5"><row>
<entry thead="yes" align='center'><para>Group   </para>
</entry><entry thead="yes" align='center'><para>Parameter   </para>
</entry><entry thead="yes" align='center'><para>Type   </para>
</entry><entry thead="yes" align='center'><para>Required   </para>
</entry><entry thead="yes" align='center'><para>Description    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para>LeggedOdom   </para>
</entry><entry thead="no" align='center'><para>-   </para>
</entry><entry thead="no" align='center'><para>group   </para>
</entry><entry thead="no" align='center'><para>Yes   </para>
</entry><entry thead="no" align='center'><para>Configuration group for initializing the legged odometry block    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para></para>
</entry><entry thead="no" align='center'><para>initial_fixed_frame   </para>
</entry><entry thead="no" align='center'><para>string   </para>
</entry><entry thead="no" align='center'><para>Yes   </para>
</entry><entry thead="no" align='center'><para>Frame on the URDF model of the robot assumed to be fixed (in contact) during the initialization phase    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para></para>
</entry><entry thead="no" align='center'><para>initial_ref_frame_for_world   </para>
</entry><entry thead="no" align='center'><para>string   </para>
</entry><entry thead="no" align='center'><para>No   </para>
</entry><entry thead="no" align='center'><para>Frame on the URDF model of the robot to be used as a reference to initialize the inertial frame for the estimation. If not present, the initial fixed frame is assumed as the reference    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para></para>
</entry><entry thead="no" align='center'><para>initial_world_orientation_in_ref_frame   </para>
</entry><entry thead="no" align='center'><para>vector of 4 doubles   </para>
</entry><entry thead="no" align='center'><para>No   </para>
</entry><entry thead="no" align='center'><para>Orientation of the inertial frame wrt the the reference frame as quaternion wxyz. If not present, assumed to be unit quaternion.    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para></para>
</entry><entry thead="no" align='center'><para>initial_world_position_in_ref_frame   </para>
</entry><entry thead="no" align='center'><para>vector of 3 doubles   </para>
</entry><entry thead="no" align='center'><para>No   </para>
</entry><entry thead="no" align='center'><para>Position of the inertial frame wrt the reference frame as xyz. If not present,assumed to be zero position    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para></para>
</entry><entry thead="no" align='center'><para>switching_pattern   </para>
</entry><entry thead="no" align='center'><para>string   </para>
</entry><entry thead="no" align='center'><para>No   </para>
</entry><entry thead="no" align='center'><para>Options: latest, lastActive, useExternal. Switching pattern to decide the fixed frame from the set of all frames in contact. latest chooses the recently switched contact frame, lastActive chooses the earliest switched contact frame. Default is latest    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para></para>
</entry><entry thead="no" align='center'><para>vel_computation_method   </para>
</entry><entry thead="no" align='center'><para>string   </para>
</entry><entry thead="no" align='center'><para>No   </para>
</entry><entry thead="no" align='center'><para>Options: single, multiAvg, multiLS, multLSJvel. Method used for computing the floating base velocity using the fixed frame constraints. single uses only the fixed frame, multiAvg computes a simple average from all the contact frames, multLS uses a least square solution and multLSJVel regualrizes the least square solution by augmenting joint velocities in the computation. Default is multiLS.    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para></para>
</entry><entry thead="no" align='center'><para>wLin   </para>
</entry><entry thead="no" align='center'><para>double   </para>
</entry><entry thead="no" align='center'><para>No   </para>
</entry><entry thead="no" align='center'><para>weight used for linear velocity in the least square computation of base velocity. If not present, set to 1.0    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para></para>
</entry><entry thead="no" align='center'><para>wAng   </para>
</entry><entry thead="no" align='center'><para>double   </para>
</entry><entry thead="no" align='center'><para>No   </para>
</entry><entry thead="no" align='center'><para>weight used for angular velocity in the least square computation of base velocity. If not present, set to 0.5    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para></para>
</entry><entry thead="no" align='center'><para>wJVel   </para>
</entry><entry thead="no" align='center'><para>double   </para>
</entry><entry thead="no" align='center'><para>No   </para>
</entry><entry thead="no" align='center'><para>weight used for linear velocity in the least square (with joint velocities) computation of base velocity. If not present, set to 10.0    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para></para>
</entry><entry thead="no" align='center'><para>reg   </para>
</entry><entry thead="no" align='center'><para>double   </para>
</entry><entry thead="no" align='center'><para>No   </para>
</entry><entry thead="no" align='center'><para>regularization used for matrix inversion operation in least square. If not present, set to 1e-6   </para>
</entry></row>
</table>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="5">
        <label>BipedalLocomotion::System::InputPort&lt; _Input &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1InputPort"/>
      </node>
      <node id="2">
        <label>BipedalLocomotion::Estimators::FloatingBaseEstimator</label>
        <link refid="classBipedalLocomotion_1_1Estimators_1_1FloatingBaseEstimator"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>BipedalLocomotion::System::Source&lt; FloatingBaseEstimators::Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Source"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="7" relation="template-instance">
          <edgelabel>&lt; FloatingBaseEstimators::Output &gt;</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>BipedalLocomotion::Estimators::LeggedOdometry</label>
        <link refid="classBipedalLocomotion_1_1Estimators_1_1LeggedOdometry"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>BipedalLocomotion::System::OutputPort&lt; _Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1OutputPort"/>
      </node>
      <node id="8">
        <label>BipedalLocomotion::System::Advanceable&lt; EmptySignal, Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Advanceable"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="template-instance">
          <edgelabel>&lt; EmptySignal, Output &gt;</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>BipedalLocomotion::System::Source&lt; Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Source"/>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>BipedalLocomotion::System::Advanceable&lt; _Input, _Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Advanceable"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="24">
        <label>BipedalLocomotion::Estimators::FloatingBaseEstimators::Options</label>
        <link refid="structBipedalLocomotion_1_1Estimators_1_1FloatingBaseEstimators_1_1Options"/>
      </node>
      <node id="12">
        <label>BipedalLocomotion::Contacts::EstimatedContact</label>
        <link refid="structBipedalLocomotion_1_1Contacts_1_1EstimatedContact"/>
        <childnode refid="13" relation="public-inheritance">
        </childnode>
      </node>
      <node id="17">
        <label>K</label>
      </node>
      <node id="5">
        <label>BipedalLocomotion::System::InputPort&lt; _Input &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1InputPort"/>
      </node>
      <node id="18">
        <label>T</label>
      </node>
      <node id="2">
        <label>BipedalLocomotion::Estimators::FloatingBaseEstimator</label>
        <link refid="classBipedalLocomotion_1_1Estimators_1_1FloatingBaseEstimator"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>m_modelComp</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>m_meas</edgelabel>
          <edgelabel>m_measPrev</edgelabel>
        </childnode>
        <childnode refid="19" relation="usage">
          <edgelabel>m_priors</edgelabel>
          <edgelabel>m_stateStdDev</edgelabel>
        </childnode>
        <childnode refid="21" relation="usage">
          <edgelabel>m_estimatorOut</edgelabel>
        </childnode>
        <childnode refid="23" relation="usage">
          <edgelabel>m_sensorsDev</edgelabel>
        </childnode>
        <childnode refid="22" relation="usage">
          <edgelabel>m_state</edgelabel>
          <edgelabel>m_statePrev</edgelabel>
        </childnode>
        <childnode refid="24" relation="usage">
          <edgelabel>m_options</edgelabel>
        </childnode>
      </node>
      <node id="20">
        <label>std::map&lt; int, Eigen::Matrix&lt; double, 6, 1 &gt;, std::less&lt; int &gt;, Eigen::aligned_allocator&lt; std::pair&lt; const int, Eigen::Matrix&lt; double, 6, 1 &gt; &gt; &gt; &gt;</label>
        <childnode refid="16" relation="template-instance">
          <edgelabel>&lt; int, Eigen::Matrix&lt; double, 6, 1 &gt;, std::less&lt; int &gt;, Eigen::aligned_allocator&lt; std::pair&lt; const int, Eigen::Matrix&lt; double, 6, 1 &gt; &gt; &gt; &gt;</edgelabel>
        </childnode>
      </node>
      <node id="16">
        <label>std::map&lt; K, T &gt;</label>
        <childnode refid="17" relation="usage">
          <edgelabel>keys</edgelabel>
        </childnode>
        <childnode refid="18" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>BipedalLocomotion::System::Source&lt; FloatingBaseEstimators::Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Source"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="7" relation="template-instance">
          <edgelabel>&lt; FloatingBaseEstimators::Output &gt;</edgelabel>
        </childnode>
      </node>
      <node id="15">
        <label>std::basic_string&lt; Char &gt;</label>
      </node>
      <node id="19">
        <label>BipedalLocomotion::Estimators::FloatingBaseEstimators::StateStdDev</label>
        <link refid="structBipedalLocomotion_1_1Estimators_1_1FloatingBaseEstimators_1_1StateStdDev"/>
        <childnode refid="20" relation="usage">
          <edgelabel>landmarkPose</edgelabel>
          <edgelabel>supportFramePose</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>BipedalLocomotion::Estimators::LeggedOdometry</label>
        <link refid="classBipedalLocomotion_1_1Estimators_1_1LeggedOdometry"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>BipedalLocomotion::System::OutputPort&lt; _Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1OutputPort"/>
      </node>
      <node id="11">
        <label>std::map&lt; int, BipedalLocomotion::Contacts::EstimatedContact &gt;</label>
        <childnode refid="12" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
        <childnode refid="16" relation="template-instance">
          <edgelabel>&lt; int, BipedalLocomotion::Contacts::EstimatedContact &gt;</edgelabel>
        </childnode>
      </node>
      <node id="22">
        <label>BipedalLocomotion::Estimators::FloatingBaseEstimators::InternalState</label>
        <link refid="structBipedalLocomotion_1_1Estimators_1_1FloatingBaseEstimators_1_1InternalState"/>
        <childnode refid="11" relation="usage">
          <edgelabel>landmarkData</edgelabel>
          <edgelabel>supportFrameData</edgelabel>
        </childnode>
      </node>
      <node id="10">
        <label>BipedalLocomotion::Estimators::FloatingBaseEstimators::Measurements</label>
        <link refid="structBipedalLocomotion_1_1Estimators_1_1FloatingBaseEstimators_1_1Measurements"/>
        <childnode refid="11" relation="usage">
          <edgelabel>stampedContactsStatus</edgelabel>
          <edgelabel>stampedRelLandmarkPoses</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>BipedalLocomotion::System::Advanceable&lt; EmptySignal, Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Advanceable"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="template-instance">
          <edgelabel>&lt; EmptySignal, Output &gt;</edgelabel>
        </childnode>
      </node>
      <node id="23">
        <label>BipedalLocomotion::Estimators::FloatingBaseEstimators::SensorsStdDev</label>
        <link refid="structBipedalLocomotion_1_1Estimators_1_1FloatingBaseEstimators_1_1SensorsStdDev"/>
      </node>
      <node id="13">
        <label>BipedalLocomotion::Contacts::ContactBase</label>
        <link refid="structBipedalLocomotion_1_1Contacts_1_1ContactBase"/>
        <childnode refid="14" relation="usage">
          <edgelabel>name</edgelabel>
        </childnode>
      </node>
      <node id="21">
        <label>BipedalLocomotion::Estimators::FloatingBaseEstimators::Output</label>
        <link refid="structBipedalLocomotion_1_1Estimators_1_1FloatingBaseEstimators_1_1Output"/>
        <childnode refid="19" relation="usage">
          <edgelabel>stateStdDev</edgelabel>
        </childnode>
        <childnode refid="22" relation="usage">
          <edgelabel>state</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>BipedalLocomotion::System::Source&lt; Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Source"/>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>BipedalLocomotion::Estimators::FloatingBaseEstimator::ModelComputations</label>
        <link refid="classBipedalLocomotion_1_1Estimators_1_1FloatingBaseEstimator_1_1ModelComputations"/>
      </node>
      <node id="4">
        <label>BipedalLocomotion::System::Advanceable&lt; _Input, _Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Advanceable"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="14">
        <label>std::string</label>
        <childnode refid="15" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="BipedalLocomotion/FloatingBaseEstimators/LeggedOdometry.h" line="37" column="1" bodyfile="BipedalLocomotion/FloatingBaseEstimators/LeggedOdometry.h" bodystart="38" bodyend="135"/>
    <listofallmembers>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1FloatingBaseEstimator_1a8deaab0e4940165c59f15355d47ddc79" prot="public" virt="virtual"><scope>BipedalLocomotion::Estimators::LeggedOdometry</scope><name>advance</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1a09ee5b41c77c6b626f4d5cb775065325" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Estimators::LeggedOdometry</scope><name>Advanceable</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1aaeb3eba3073fbc844dea1eba4c9b68f3" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Estimators::LeggedOdometry</scope><name>Advanceable</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1ac1549cb26bd896e27370e97b0795ba3f" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Estimators::LeggedOdometry</scope><name>Advanceable</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1LeggedOdometry_1ac46a1432cf6e1d35dbf82c1473df6d0b" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Estimators::LeggedOdometry</scope><name>changeFixedFrame</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1LeggedOdometry_1a9b511a34575999941438520f4b4df828" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Estimators::LeggedOdometry</scope><name>changeFixedFrame</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1LeggedOdometry_1a4b5ddc4e91a757b0ef4176db28db678d" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Estimators::LeggedOdometry</scope><name>changeFixedFrame</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1a618ab786bb43814b3b3012b843fce93b" prot="public" virt="virtual"><scope>BipedalLocomotion::Estimators::LeggedOdometry</scope><name>close</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1LeggedOdometry_1a3e622dbc8c0559b2ed5cb5048fc620f9" prot="protected" virt="virtual"><scope>BipedalLocomotion::Estimators::LeggedOdometry</scope><name>customInitialization</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1FloatingBaseEstimator_1ad7fae2ee9adde778ab2c1c3b468ea6ac" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Estimators::LeggedOdometry</scope><name>FloatingBaseEstimator</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1LeggedOdometry_1a2d4cb9c9c22c4bbe545da34d55eb74d5" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Estimators::LeggedOdometry</scope><name>getFixedFrameIdx</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1LeggedOdometry_1aa0e5b518365609f11198cff351a5f563" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Estimators::LeggedOdometry</scope><name>getFixedFramePose</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1FloatingBaseEstimator_1aecc991f84626ed5114483a3e7c0fd78c" prot="public" virt="virtual"><scope>BipedalLocomotion::Estimators::LeggedOdometry</scope><name>getOutput</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1FloatingBaseEstimator_1a6effc5655b1fa1bdcad345f2ea420047" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Estimators::LeggedOdometry</scope><name>initialize</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1FloatingBaseEstimator_1a30b2e0f940d73c15239d4842f141a37e" prot="public" virt="virtual"><scope>BipedalLocomotion::Estimators::LeggedOdometry</scope><name>initialize</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1a975a7ecbf38c917c7b72519581fc7dba" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Estimators::LeggedOdometry</scope><name>Input</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1InputPort_1a27c614cb30c1e4b78e64791f4919dfa7" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Estimators::LeggedOdometry</scope><name>InputPort</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1InputPort_1a74d1418613e89a7f2993ea936228a44a" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Estimators::LeggedOdometry</scope><name>InputPort</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1InputPort_1a02ec5c947f1d2d83d2952c3b899cc58f" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Estimators::LeggedOdometry</scope><name>InputPort</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1FloatingBaseEstimator_1a0baf4a4877c4c790c35be575f63ea2d2" prot="public" virt="virtual"><scope>BipedalLocomotion::Estimators::LeggedOdometry</scope><name>isOutputValid</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1LeggedOdometry_1ad382e28d11a12dadc7a957d7b8ea312f" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Estimators::LeggedOdometry</scope><name>LeggedOdometry</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1FloatingBaseEstimator_1a73f6c5a571246a976c534dbf0c8485c9" prot="protected" virt="non-virtual"><scope>BipedalLocomotion::Estimators::LeggedOdometry</scope><name>m_dt</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1FloatingBaseEstimator_1a7a69586c1a993d3abc61c786d25b88c1" prot="protected" virt="non-virtual"><scope>BipedalLocomotion::Estimators::LeggedOdometry</scope><name>m_estimatorOut</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1FloatingBaseEstimator_1a67d83d2880b0c9e7e279410081138bd7" prot="protected" virt="non-virtual"><scope>BipedalLocomotion::Estimators::LeggedOdometry</scope><name>m_estimatorState</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1FloatingBaseEstimator_1a25aecb934450c5584c292b0573880efc" prot="protected" virt="non-virtual"><scope>BipedalLocomotion::Estimators::LeggedOdometry</scope><name>m_isInvEKF</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1FloatingBaseEstimator_1a39e4591671b56359f28884caa4a0a5cf" prot="protected" virt="non-virtual"><scope>BipedalLocomotion::Estimators::LeggedOdometry</scope><name>m_meas</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1FloatingBaseEstimator_1a17e146652bf36d8a62bae4f217a26294" prot="protected" virt="non-virtual"><scope>BipedalLocomotion::Estimators::LeggedOdometry</scope><name>m_measPrev</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1FloatingBaseEstimator_1a1e23695506ec5bd1b3bccc32fe2ac75a" prot="protected" virt="non-virtual"><scope>BipedalLocomotion::Estimators::LeggedOdometry</scope><name>m_modelComp</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1FloatingBaseEstimator_1a620d1da852a07960e55a6dd8a53fd1a5" prot="protected" virt="non-virtual"><scope>BipedalLocomotion::Estimators::LeggedOdometry</scope><name>m_options</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1LeggedOdometry_1a0787382d79eb932e4182dbcdb3828afe" prot="private" virt="non-virtual"><scope>BipedalLocomotion::Estimators::LeggedOdometry</scope><name>m_pimpl</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1FloatingBaseEstimator_1a4a9a0355d4b8a11e747d2180c55cba64" prot="protected" virt="non-virtual"><scope>BipedalLocomotion::Estimators::LeggedOdometry</scope><name>m_priors</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1FloatingBaseEstimator_1a4a762098fd8fe1158f163209402db0d1" prot="protected" virt="non-virtual"><scope>BipedalLocomotion::Estimators::LeggedOdometry</scope><name>m_sensorsDev</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1FloatingBaseEstimator_1a6c98bb1f972363c0f1b795bdcd50f5fd" prot="protected" virt="non-virtual"><scope>BipedalLocomotion::Estimators::LeggedOdometry</scope><name>m_state</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1FloatingBaseEstimator_1ac13379b400e3a5448370d62a60495c48" prot="protected" virt="non-virtual"><scope>BipedalLocomotion::Estimators::LeggedOdometry</scope><name>m_statePrev</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1FloatingBaseEstimator_1ad3c4555ded287bb1450dd9b664705c7c" prot="protected" virt="non-virtual"><scope>BipedalLocomotion::Estimators::LeggedOdometry</scope><name>m_stateStdDev</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1FloatingBaseEstimator_1a85d6ac77a6ccc37ef659e3378593fd07" prot="protected" virt="non-virtual"><scope>BipedalLocomotion::Estimators::LeggedOdometry</scope><name>m_useIMUForAngVelEstimate</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1FloatingBaseEstimator_1a5e5751df76b701e6d0ef3d54fba70e0c" prot="protected" virt="non-virtual"><scope>BipedalLocomotion::Estimators::LeggedOdometry</scope><name>m_useIMUVelForBaseVelComputation</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1FloatingBaseEstimator_1ad58879a3431ccf1a250419f79c54377c" prot="protected" virt="non-virtual"><scope>BipedalLocomotion::Estimators::LeggedOdometry</scope><name>m_useModelInfo</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1FloatingBaseEstimator_1aad3b0c5d6736bdc39e501833d6fd7dcf" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Estimators::LeggedOdometry</scope><name>modelComputations</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Source_1a922e6eec2f74620c49f9fcd1ddf709ae" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Estimators::LeggedOdometry</scope><name>operator=</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Source_1ad63e64dcad4c269263ecd20b2c81352b" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Estimators::LeggedOdometry</scope><name>operator=</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1ae147cdee9ff9160a9dfe0d3e349a9aad" prot="public" virt="non-virtual" ambiguityscope="BipedalLocomotion::System::Advanceable::"><scope>BipedalLocomotion::Estimators::LeggedOdometry</scope><name>operator=</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1adf0d9fc07bab0ec5d4db7f3a35816bf2" prot="public" virt="non-virtual" ambiguityscope="BipedalLocomotion::System::Advanceable::"><scope>BipedalLocomotion::Estimators::LeggedOdometry</scope><name>operator=</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1InputPort_1a54f476d3c8d6d003fb714309ea6272aa" prot="public" virt="non-virtual" ambiguityscope="BipedalLocomotion::System::InputPort::"><scope>BipedalLocomotion::Estimators::LeggedOdometry</scope><name>operator=</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1InputPort_1adb341b37472241b6da8b552166308d7b" prot="public" virt="non-virtual" ambiguityscope="BipedalLocomotion::System::InputPort::"><scope>BipedalLocomotion::Estimators::LeggedOdometry</scope><name>operator=</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1OutputPort_1af5e15f5e4962a5c8e0f0c0a49adb9ca1" prot="public" virt="non-virtual" ambiguityscope="BipedalLocomotion::System::OutputPort::"><scope>BipedalLocomotion::Estimators::LeggedOdometry</scope><name>operator=</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1OutputPort_1ad5c6ce3ad7d2a064d7bb512fe0bc489e" prot="public" virt="non-virtual" ambiguityscope="BipedalLocomotion::System::OutputPort::"><scope>BipedalLocomotion::Estimators::LeggedOdometry</scope><name>operator=</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1a69603f2c9c608815908425b5b8c2005c" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Estimators::LeggedOdometry</scope><name>Output</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1OutputPort_1a7c0d15e677a1935918fc747ba4c25ec1" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Estimators::LeggedOdometry</scope><name>OutputPort</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1OutputPort_1a0a39b891749961d34507b4b591886741" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Estimators::LeggedOdometry</scope><name>OutputPort</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1OutputPort_1a581340f280eca1890a8a7b2331761b57" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Estimators::LeggedOdometry</scope><name>OutputPort</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1FloatingBaseEstimator_1a26c64914587b18e5eaa2f8b8df321446" prot="protected" virt="virtual"><scope>BipedalLocomotion::Estimators::LeggedOdometry</scope><name>predictState</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1LeggedOdometry_1a3e2b8f537e7b55bef6144bac8bd0aea3" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Estimators::LeggedOdometry</scope><name>resetEstimator</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1LeggedOdometry_1a85792e42834a47505612f568866b4a1c" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Estimators::LeggedOdometry</scope><name>resetEstimator</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1LeggedOdometry_1afaa96d18ba685b1cb5cb9a56f4d862cb" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Estimators::LeggedOdometry</scope><name>resetEstimator</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1LeggedOdometry_1a3b6896ce5674651e673761bbce201154" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Estimators::LeggedOdometry</scope><name>resetEstimator</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1FloatingBaseEstimator_1afaa96d18ba685b1cb5cb9a56f4d862cb" prot="public" virt="virtual" ambiguityscope="BipedalLocomotion::Estimators::FloatingBaseEstimator::"><scope>BipedalLocomotion::Estimators::LeggedOdometry</scope><name>resetEstimator</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1FloatingBaseEstimator_1a3b6896ce5674651e673761bbce201154" prot="public" virt="virtual" ambiguityscope="BipedalLocomotion::Estimators::FloatingBaseEstimator::"><scope>BipedalLocomotion::Estimators::LeggedOdometry</scope><name>resetEstimator</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1FloatingBaseEstimator_1a776353b9fda2354f3f7eb0c80940ca49" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Estimators::LeggedOdometry</scope><name>setContacts</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1FloatingBaseEstimator_1a83bfbba8171ebfc98b016c7449e7faf6" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Estimators::LeggedOdometry</scope><name>setContactStatus</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1FloatingBaseEstimator_1a2ccbfaf83d8eed0fe3b0b5ca46017ef4" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Estimators::LeggedOdometry</scope><name>setIMUMeasurement</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Source_1a472624c76d5e02e8ae16991cd77016ce" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Estimators::LeggedOdometry</scope><name>setInput</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1InputPort_1ad2637be5c9075a2d8f09fedc6a42d808" prot="public" virt="pure-virtual" ambiguityscope="BipedalLocomotion::System::Advanceable::"><scope>BipedalLocomotion::Estimators::LeggedOdometry</scope><name>setInput</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1FloatingBaseEstimator_1ad203e691ae8d7d8b41da86b2e081267b" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Estimators::LeggedOdometry</scope><name>setKinematics</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1FloatingBaseEstimator_1a1beebdcb036ccc21700690d291ac59e3" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Estimators::LeggedOdometry</scope><name>setLandmarkRelativePose</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1FloatingBaseEstimator_1ad8bf6b1b6356c909fb930b0346610551" prot="protected" virt="non-virtual"><scope>BipedalLocomotion::Estimators::LeggedOdometry</scope><name>setupInitialStates</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1FloatingBaseEstimator_1a47e47d6dc44f160b520b673901db3abc" prot="protected" virt="non-virtual"><scope>BipedalLocomotion::Estimators::LeggedOdometry</scope><name>setupOptions</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1FloatingBaseEstimator_1abaaacf9df3cc68efdae1ec21ed55a90e" prot="protected" virt="non-virtual"><scope>BipedalLocomotion::Estimators::LeggedOdometry</scope><name>setupPriorDevs</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1FloatingBaseEstimator_1a9ceef906a3dadd188f590dc21d0b5fd3" prot="protected" virt="non-virtual"><scope>BipedalLocomotion::Estimators::LeggedOdometry</scope><name>setupSensorDevs</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Source_1aa6af70cc2e04e6a7e011af3d968b3b4b" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Estimators::LeggedOdometry</scope><name>Source</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Source_1a1c126531af21d485f09f297cb162c30a" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Estimators::LeggedOdometry</scope><name>Source</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Source_1af0cf2abdf10e6594372a0b062fe4a8af" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Estimators::LeggedOdometry</scope><name>Source</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1FloatingBaseEstimator_1ac94d11332538be5c0ae96761645b74f1" prot="protected" virt="non-virtual"><scope>BipedalLocomotion::Estimators::LeggedOdometry</scope><name>State</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1FloatingBaseEstimator_1ac256d05311483c6bd380fc1a29cc7163" prot="protected" virt="non-virtual"><scope>BipedalLocomotion::Estimators::LeggedOdometry</scope><name>updateBaseStateFromIMUState</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1LeggedOdometry_1a1a123da1d1e7a8bf3401dbcaa44fa93b" prot="protected" virt="virtual"><scope>BipedalLocomotion::Estimators::LeggedOdometry</scope><name>updateKinematics</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1FloatingBaseEstimator_1acca7d1580a8085caedfdecbe08e89d9f" prot="protected" virt="virtual"><scope>BipedalLocomotion::Estimators::LeggedOdometry</scope><name>updateLandmarkRelativePoses</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1afae1137cba829874bab4a1d25d559896" prot="public" virt="virtual"><scope>BipedalLocomotion::Estimators::LeggedOdometry</scope><name>~Advanceable</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1FloatingBaseEstimator_1ab24dc4ee5a3afb031812df139a3dbd09" prot="public" virt="virtual"><scope>BipedalLocomotion::Estimators::LeggedOdometry</scope><name>~FloatingBaseEstimator</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1InputPort_1ac9b58b0d2f6ae8821b873ed6f9817ccb" prot="public" virt="virtual"><scope>BipedalLocomotion::Estimators::LeggedOdometry</scope><name>~InputPort</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1LeggedOdometry_1aa55f03f2372f5cfb7bc9da1b8ebbb5be" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Estimators::LeggedOdometry</scope><name>~LeggedOdometry</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1OutputPort_1adcc49c38152c9204dcab4f8e87f68977" prot="public" virt="virtual"><scope>BipedalLocomotion::Estimators::LeggedOdometry</scope><name>~OutputPort</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Source_1acf12427433027de27b18e6e70ba0cae8" prot="public" virt="virtual"><scope>BipedalLocomotion::Estimators::LeggedOdometry</scope><name>~Source</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
