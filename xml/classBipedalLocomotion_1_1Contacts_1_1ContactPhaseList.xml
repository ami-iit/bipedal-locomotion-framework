<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classBipedalLocomotion_1_1Contacts_1_1ContactPhaseList" kind="class" language="C++" prot="public">
    <compoundname>BipedalLocomotion::Contacts::ContactPhaseList</compoundname>
    <includes local="no">BipedalLocomotion/Contacts/ContactPhaseList.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classBipedalLocomotion_1_1Contacts_1_1ContactPhaseList_1a1c8c80ad2e16c659a230db8fe3d33b29" prot="public" static="no">
        <type>std::vector&lt; <ref refid="structBipedalLocomotion_1_1Contacts_1_1ContactPhase" kindref="compound">ContactPhase</ref> &gt;::<ref refid="classBipedalLocomotion_1_1Contacts_1_1ContactPhaseList_1a1c8c80ad2e16c659a230db8fe3d33b29" kindref="member">const_iterator</ref></type>
        <definition>using BipedalLocomotion::Contacts::ContactPhaseList::const_iterator =  std::vector&lt;ContactPhase&gt;::const_iterator</definition>
        <argsstring></argsstring>
        <name>const_iterator</name>
        <briefdescription>
<para>Internal method to compute the phases. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Contacts/ContactPhaseList.h" line="39" column="5" bodyfile="BipedalLocomotion/Contacts/ContactPhaseList.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classBipedalLocomotion_1_1Contacts_1_1ContactPhaseList_1aac2bab300df6b4e4b443b63ba3fdc6ab" prot="public" static="no">
        <type>std::vector&lt; <ref refid="structBipedalLocomotion_1_1Contacts_1_1ContactPhase" kindref="compound">ContactPhase</ref> &gt;::const_reverse_iterator</type>
        <definition>using BipedalLocomotion::Contacts::ContactPhaseList::const_reverse_iterator =  std::vector&lt;ContactPhase&gt;::const_reverse_iterator</definition>
        <argsstring></argsstring>
        <name>const_reverse_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Contacts/ContactPhaseList.h" line="40" column="5" bodyfile="BipedalLocomotion/Contacts/ContactPhaseList.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classBipedalLocomotion_1_1Contacts_1_1ContactPhaseList_1ad6ba5cecf5cae6f1835283dd017f5e7c" prot="private" static="no" mutable="no">
        <type><ref refid="ContactList_8h_1a6d1a0a8ca118c9933d2c4f7a8c799b0e" kindref="member">ContactListMap</ref></type>
        <definition>ContactListMap BipedalLocomotion::Contacts::ContactPhaseList::m_contactLists</definition>
        <argsstring></argsstring>
        <name>m_contactLists</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Contacts/ContactPhaseList.h" line="32" column="20" bodyfile="BipedalLocomotion/Contacts/ContactPhaseList.h" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBipedalLocomotion_1_1Contacts_1_1ContactPhaseList_1ac8eb371f498eb83d05a396c4bca557e3" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="structBipedalLocomotion_1_1Contacts_1_1ContactPhase" kindref="compound">ContactPhase</ref> &gt;</type>
        <definition>std::vector&lt;ContactPhase&gt; BipedalLocomotion::Contacts::ContactPhaseList::m_phases</definition>
        <argsstring></argsstring>
        <name>m_phases</name>
        <briefdescription>
<para>The input contact lists. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Contacts/ContactPhaseList.h" line="34" column="17" bodyfile="BipedalLocomotion/Contacts/ContactPhaseList.h" bodystart="34" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classBipedalLocomotion_1_1Contacts_1_1ContactPhaseList_1ae23770746e8ac78b4338b0aab6907cd6" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BipedalLocomotion::Contacts::ContactPhaseList::createPhases</definition>
        <argsstring>()</argsstring>
        <name>createPhases</name>
        <briefdescription>
<para>The computed phases. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Contacts/ContactPhaseList.h" line="36" column="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classBipedalLocomotion_1_1Contacts_1_1ContactPhaseList_1ab099c874d1150bbbb881d4a188102c2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BipedalLocomotion::Contacts::ContactPhaseList::ContactPhaseList</definition>
        <argsstring>()=default</argsstring>
        <name>ContactPhaseList</name>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This definition is necessary because the Copy constructor and the Move constructor are manually defined. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Contacts/ContactPhaseList.h" line="47" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Contacts_1_1ContactPhaseList_1a7a5de78563fbb1b9d624faa82700d5d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BipedalLocomotion::Contacts::ContactPhaseList::~ContactPhaseList</definition>
        <argsstring>()=default</argsstring>
        <name>~ContactPhaseList</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This definition is necessary to satisfy the rule of five. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Contacts/ContactPhaseList.h" line="53" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Contacts_1_1ContactPhaseList_1a927dd3f29af712ccbdf946922ed28875" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BipedalLocomotion::Contacts::ContactPhaseList::ContactPhaseList</definition>
        <argsstring>(const ContactPhaseList &amp;other)</argsstring>
        <name>ContactPhaseList</name>
        <param>
          <type>const <ref refid="classBipedalLocomotion_1_1Contacts_1_1ContactPhaseList" kindref="compound">ContactPhaseList</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Copy constructor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>another <ref refid="classBipedalLocomotion_1_1Contacts_1_1ContactPhaseList" kindref="compound">ContactPhaseList</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>When the copy constructor operator is called the content of <computeroutput>other.m_contactList</computeroutput> will be copied in <computeroutput>this-&gt;m_contactList</computeroutput>, while <computeroutput>this-&gt;m_phases</computeroutput> will be regenerated using the content of <computeroutput>this-&gt;m_contactList</computeroutput>. Notice that <ref refid="structBipedalLocomotion_1_1Contacts_1_1ContactPhase" kindref="compound">Contacts::ContactPhase</ref> class stores an std::unordered_map&lt;std::string, ContactList::const_iterator&gt; called <ref refid="structBipedalLocomotion_1_1Contacts_1_1ContactPhase_1adfd2902578bc798418a6434829c0f979" kindref="member">Contacts::ContactPhase::activeContacts</ref>. So copying the content of <computeroutput>other.m_phases</computeroutput> into <computeroutput>this-&gt;m_phases</computeroutput> is wrong since all the iterators stored inside the contact phases should refer to the lists stored within this class, not the original input lists. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Contacts/ContactPhaseList.h" line="66" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Contacts_1_1ContactPhaseList_1a03dc492d042b4db736bdabb919419e12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BipedalLocomotion::Contacts::ContactPhaseList::ContactPhaseList</definition>
        <argsstring>(ContactPhaseList &amp;&amp;other)=default</argsstring>
        <name>ContactPhaseList</name>
        <param>
          <type><ref refid="classBipedalLocomotion_1_1Contacts_1_1ContactPhaseList" kindref="compound">ContactPhaseList</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Move constructor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>another <ref refid="classBipedalLocomotion_1_1Contacts_1_1ContactPhaseList" kindref="compound">ContactPhaseList</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>This definition is necessary to satisfy the rule of five. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Contacts/ContactPhaseList.h" line="73" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Contacts_1_1ContactPhaseList_1a7800bb00fce152500e0838d5c980ff71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBipedalLocomotion_1_1Contacts_1_1ContactPhaseList" kindref="compound">ContactPhaseList</ref> &amp;</type>
        <definition>ContactPhaseList&amp; BipedalLocomotion::Contacts::ContactPhaseList::operator=</definition>
        <argsstring>(const ContactPhaseList &amp;other)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classBipedalLocomotion_1_1Contacts_1_1ContactPhaseList" kindref="compound">ContactPhaseList</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Copy assignment operator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>another <ref refid="classBipedalLocomotion_1_1Contacts_1_1ContactPhaseList" kindref="compound">ContactPhaseList</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>When the copy assignment operator is called the content of <computeroutput>other.m_contactList</computeroutput> will be copied in <computeroutput>this-&gt;m_contactList</computeroutput>, while <computeroutput>this-&gt;m_phases</computeroutput> will be regenerated using the content of <computeroutput>this-&gt;m_contactList</computeroutput>. Notice that <ref refid="structBipedalLocomotion_1_1Contacts_1_1ContactPhase" kindref="compound">Contacts::ContactPhase</ref> class stores an std::unordered_map&lt;std::string, ContactList::const_iterator&gt; called <ref refid="structBipedalLocomotion_1_1Contacts_1_1ContactPhase_1adfd2902578bc798418a6434829c0f979" kindref="member">Contacts::ContactPhase::activeContacts</ref>. So copying the content of <computeroutput>other.m_phases</computeroutput> into <computeroutput>this-&gt;m_phases</computeroutput> is wrong since all the iterators stored inside the contact phases should refer to the lists stored within this class, not the original input lists. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Contacts/ContactPhaseList.h" line="86" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Contacts_1_1ContactPhaseList_1ab304c552436d9dcd7a4fdd54276e6248" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBipedalLocomotion_1_1Contacts_1_1ContactPhaseList" kindref="compound">ContactPhaseList</ref> &amp;</type>
        <definition>ContactPhaseList&amp; BipedalLocomotion::Contacts::ContactPhaseList::operator=</definition>
        <argsstring>(ContactPhaseList &amp;&amp;other)=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classBipedalLocomotion_1_1Contacts_1_1ContactPhaseList" kindref="compound">ContactPhaseList</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Move assignment operator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>another <ref refid="classBipedalLocomotion_1_1Contacts_1_1ContactPhaseList" kindref="compound">ContactPhaseList</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>This definition is necessary to satisfy the rule of five. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Contacts/ContactPhaseList.h" line="93" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Contacts_1_1ContactPhaseList_1a33083dbf15170a9c48e3a97459caa978" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BipedalLocomotion::Contacts::ContactPhaseList::setLists</definition>
        <argsstring>(const ContactListMap &amp;contactLists)</argsstring>
        <name>setLists</name>
        <param>
          <type>const <ref refid="ContactList_8h_1a6d1a0a8ca118c9933d2c4f7a8c799b0e" kindref="member">ContactListMap</ref> &amp;</type>
          <declname>contactLists</declname>
        </param>
        <briefdescription>
<para>Set the input lists. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>contactLists</parametername>
</parameternamelist>
<parameterdescription>
<para>The set of lists to be used for computing the phases. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Contacts/ContactPhaseList.h" line="99" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Contacts_1_1ContactPhaseList_1a6176b67dc70fec29ab5cc742d1a060cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::Contacts::ContactPhaseList::setLists</definition>
        <argsstring>(const std::initializer_list&lt; ContactList &gt; &amp;contactLists)</argsstring>
        <name>setLists</name>
        <param>
          <type>const std::initializer_list&lt; <ref refid="classBipedalLocomotion_1_1Contacts_1_1ContactList" kindref="compound">ContactList</ref> &gt; &amp;</type>
          <declname>contactLists</declname>
        </param>
        <briefdescription>
<para>Set the input lists. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>An</parametername>
</parameternamelist>
<parameterdescription>
<para>initializer list (use as {list1, list2, ...,listN}) to the lists to be used for computing the phases. A ContactListMap will be created with the provided list, using the defaultName as a key. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>False if some lists have the same defaultName. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Contacts/ContactPhaseList.h" line="108" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Contacts_1_1ContactPhaseList_1ae552581c9eb8499f36bf2e51965b7d3a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBipedalLocomotion_1_1Contacts_1_1ContactPhaseList_1a1c8c80ad2e16c659a230db8fe3d33b29" kindref="member">const_iterator</ref></type>
        <definition>const_iterator BipedalLocomotion::Contacts::ContactPhaseList::getPresentPhase</definition>
        <argsstring>(const std::chrono::nanoseconds &amp;time) const</argsstring>
        <name>getPresentPhase</name>
        <param>
          <type>const std::chrono::nanoseconds &amp;</type>
          <declname>time</declname>
        </param>
        <briefdescription>
<para>Get the phase given the time. </para>
        </briefdescription>
        <detaileddescription>
<para>It returns the contact phase with the highest begin time lower than time. If no contacts phase has a begin time lower than time, it returns an iterator to the end. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>time</parametername>
</parameternamelist>
<parameterdescription>
<para>The present time. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>an iterator to the last phase having an activation time lower than time. If no phase satisfies this condition, it returns a pointer to the end. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Contacts/ContactPhaseList.h" line="119" column="20"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Contacts_1_1ContactPhaseList_1a234bc1c2bb84a74dbf2dcffd91b4071b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="ContactList_8h_1a6d1a0a8ca118c9933d2c4f7a8c799b0e" kindref="member">ContactListMap</ref> &amp;</type>
        <definition>const ContactListMap&amp; BipedalLocomotion::Contacts::ContactPhaseList::lists</definition>
        <argsstring>() const</argsstring>
        <name>lists</name>
        <briefdescription>
<para>A reference to the lists stored in this class. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>All the iterators stored inside the contact phases refer to the lists viewable via this method. </para>
</simplesect>
<simplesect kind="return"><para>A const reference to the input lists. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Contacts/ContactPhaseList.h" line="127" column="26"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Contacts_1_1ContactPhaseList_1abbb3bd45fd3ff558168c5d9c49cafeef" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBipedalLocomotion_1_1Contacts_1_1ContactPhaseList_1a1c8c80ad2e16c659a230db8fe3d33b29" kindref="member">const_iterator</ref></type>
        <definition>const_iterator BipedalLocomotion::Contacts::ContactPhaseList::begin</definition>
        <argsstring>() const</argsstring>
        <name>begin</name>
        <briefdescription>
<para>Const iterator to the begin of the phases. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Contacts/ContactPhaseList.h" line="132" column="20"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Contacts_1_1ContactPhaseList_1adfde0404d477160fc5887c1254f59a50" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBipedalLocomotion_1_1Contacts_1_1ContactPhaseList_1a1c8c80ad2e16c659a230db8fe3d33b29" kindref="member">const_iterator</ref></type>
        <definition>const_iterator BipedalLocomotion::Contacts::ContactPhaseList::cbegin</definition>
        <argsstring>() const</argsstring>
        <name>cbegin</name>
        <briefdescription>
<para>Const iterator to the begin of the phases. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Contacts/ContactPhaseList.h" line="137" column="20"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Contacts_1_1ContactPhaseList_1ae861ead814c9cc43dc808fe6a9affda0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const_reverse_iterator</type>
        <definition>const_reverse_iterator BipedalLocomotion::Contacts::ContactPhaseList::rbegin</definition>
        <argsstring>() const</argsstring>
        <name>rbegin</name>
        <briefdescription>
<para>Const reverse iterator to the the phases (basically starting from the last phase, going backward). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Contacts/ContactPhaseList.h" line="143" column="28"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Contacts_1_1ContactPhaseList_1a36e5ba075591e514d9fb22f78c263749" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const_reverse_iterator</type>
        <definition>const_reverse_iterator BipedalLocomotion::Contacts::ContactPhaseList::crbegin</definition>
        <argsstring>() const</argsstring>
        <name>crbegin</name>
        <briefdescription>
<para>Const reverse iterator to the the phases (basically starting from the last phase, going backward). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Contacts/ContactPhaseList.h" line="149" column="28"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Contacts_1_1ContactPhaseList_1a04f61a33b31cf66aa43ba97b2c0d1d35" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBipedalLocomotion_1_1Contacts_1_1ContactPhaseList_1a1c8c80ad2e16c659a230db8fe3d33b29" kindref="member">const_iterator</ref></type>
        <definition>const_iterator BipedalLocomotion::Contacts::ContactPhaseList::end</definition>
        <argsstring>() const</argsstring>
        <name>end</name>
        <briefdescription>
<para>Return a const iterator to the end of the list. </para>
        </briefdescription>
        <detaileddescription>
<para>This is only a placeholder, it does not reference any phase. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Contacts/ContactPhaseList.h" line="156" column="20"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Contacts_1_1ContactPhaseList_1abccd9b8f43fb1d171cd43430865c5f54" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBipedalLocomotion_1_1Contacts_1_1ContactPhaseList_1a1c8c80ad2e16c659a230db8fe3d33b29" kindref="member">const_iterator</ref></type>
        <definition>const_iterator BipedalLocomotion::Contacts::ContactPhaseList::cend</definition>
        <argsstring>() const</argsstring>
        <name>cend</name>
        <briefdescription>
<para>Return a const iterator to the end of the list. </para>
        </briefdescription>
        <detaileddescription>
<para>This is only a placeholder, it does not reference any phase. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Contacts/ContactPhaseList.h" line="163" column="20"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Contacts_1_1ContactPhaseList_1a5a12596f3c413271a369de0f23408766" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const_reverse_iterator</type>
        <definition>const_reverse_iterator BipedalLocomotion::Contacts::ContactPhaseList::rend</definition>
        <argsstring>() const</argsstring>
        <name>rend</name>
        <briefdescription>
<para>Return a const reverse iterator to the end of the list. </para>
        </briefdescription>
        <detaileddescription>
<para>This is only a placeholder, it does not reference any phase. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Contacts/ContactPhaseList.h" line="170" column="28"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Contacts_1_1ContactPhaseList_1a34c2f4b8c6103bc20205243f2ffa2bc2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const_reverse_iterator</type>
        <definition>const_reverse_iterator BipedalLocomotion::Contacts::ContactPhaseList::crend</definition>
        <argsstring>() const</argsstring>
        <name>crend</name>
        <briefdescription>
<para>Return a const reverse iterator to the end of the list. </para>
        </briefdescription>
        <detaileddescription>
<para>This is only a placeholder, it does not reference any phase. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Contacts/ContactPhaseList.h" line="177" column="28"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Contacts_1_1ContactPhaseList_1a1444cad654a7aeaf0236e7d59a99dc29" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structBipedalLocomotion_1_1Contacts_1_1ContactPhase" kindref="compound">ContactPhase</ref> &amp;</type>
        <definition>const ContactPhase&amp; BipedalLocomotion::Contacts::ContactPhaseList::operator[]</definition>
        <argsstring>(size_t index) const</argsstring>
        <name>operator[]</name>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Access phases by index. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>of the phase to be accessed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A const reference to the desired phase. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Contacts/ContactPhaseList.h" line="184" column="24"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Contacts_1_1ContactPhaseList_1a354a7747b22eef33e6cd940735ee0174" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBipedalLocomotion_1_1Contacts_1_1ContactPhaseList_1a1c8c80ad2e16c659a230db8fe3d33b29" kindref="member">const_iterator</ref></type>
        <definition>const_iterator BipedalLocomotion::Contacts::ContactPhaseList::firstPhase</definition>
        <argsstring>() const</argsstring>
        <name>firstPhase</name>
        <briefdescription>
<para>A const iterator to the first phase. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Contacts/ContactPhaseList.h" line="189" column="20"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Contacts_1_1ContactPhaseList_1a8856d230ef79dfb2f20d7e21c93f304d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classBipedalLocomotion_1_1Contacts_1_1ContactPhaseList_1a1c8c80ad2e16c659a230db8fe3d33b29" kindref="member">const_iterator</ref></type>
        <definition>const_iterator BipedalLocomotion::Contacts::ContactPhaseList::lastPhase</definition>
        <argsstring>() const</argsstring>
        <name>lastPhase</name>
        <briefdescription>
<para>A const iterator to the last phase. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Contacts/ContactPhaseList.h" line="194" column="20"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Contacts_1_1ContactPhaseList_1a05b8bd34c07272097f0899354bd9e804" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t BipedalLocomotion::Contacts::ContactPhaseList::size</definition>
        <argsstring>() const</argsstring>
        <name>size</name>
        <briefdescription>
<para>Get the number of phases. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Contacts/ContactPhaseList.h" line="199" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Contacts_1_1ContactPhaseList_1ada9e66b073d78df17b0225a65ff499dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BipedalLocomotion::Contacts::ContactPhaseList::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <briefdescription>
<para>Clear the phases and the stored lists. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Contacts/ContactPhaseList.h" line="204" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Contacts_1_1ContactPhaseList_1a952bcc3c6df82382ebba7285ef10de32" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string BipedalLocomotion::Contacts::ContactPhaseList::toString</definition>
        <argsstring>() const</argsstring>
        <name>toString</name>
        <briefdescription>
<para>Convert the contact phase list to a string. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A string containing the information of the contact phase list. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Contacts/ContactPhaseList.h" line="211" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Contacts_1_1ContactPhaseList_1a6526bb764abbb066c46f2dfe7e9cb28d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::Contacts::ContactPhaseList::forceSampleTime</definition>
        <argsstring>(const std::chrono::nanoseconds &amp;dt)</argsstring>
        <name>forceSampleTime</name>
        <param>
          <type>const std::chrono::nanoseconds &amp;</type>
          <declname>dt</declname>
        </param>
        <briefdescription>
<para>Force the sample time of the contact list stored in the contact phase list. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dt</parametername>
</parameternamelist>
<parameterdescription>
<para>The new sample time. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the contact lists has been correctly resampled. </para>
</simplesect>
<simplesect kind="note"><para>the activation time is rounded down to the nearest multiple of dt, while the deactivation time is rounded up to the nearest multiple of dt. </para>
</simplesect>
<simplesect kind="note"><para>If the deactivation time of a contact in the lists is equal to <computeroutput>std::chrono::nanoseconds::max()</computeroutput> it will not be rounded up. </para>
</simplesect>
<simplesect kind="note"><para>The phases are recomputed after the resampling. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Contacts/ContactPhaseList.h" line="223" column="10"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The <ref refid="classBipedalLocomotion_1_1Contacts_1_1ContactPhaseList" kindref="compound">ContactPhaseList</ref> class computes the contact phases according to a bunch of input contact lists. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="warning"><para>All the iterators stored inside the contact phases refer to the lists stored within this class, not the original input lists. </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="BipedalLocomotion/Contacts/ContactPhaseList.h" line="29" column="1" bodyfile="BipedalLocomotion/Contacts/ContactPhaseList.h" bodystart="30" bodyend="224"/>
    <listofallmembers>
      <member refid="classBipedalLocomotion_1_1Contacts_1_1ContactPhaseList_1abbb3bd45fd3ff558168c5d9c49cafeef" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Contacts::ContactPhaseList</scope><name>begin</name></member>
      <member refid="classBipedalLocomotion_1_1Contacts_1_1ContactPhaseList_1adfde0404d477160fc5887c1254f59a50" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Contacts::ContactPhaseList</scope><name>cbegin</name></member>
      <member refid="classBipedalLocomotion_1_1Contacts_1_1ContactPhaseList_1abccd9b8f43fb1d171cd43430865c5f54" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Contacts::ContactPhaseList</scope><name>cend</name></member>
      <member refid="classBipedalLocomotion_1_1Contacts_1_1ContactPhaseList_1ada9e66b073d78df17b0225a65ff499dc" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Contacts::ContactPhaseList</scope><name>clear</name></member>
      <member refid="classBipedalLocomotion_1_1Contacts_1_1ContactPhaseList_1a1c8c80ad2e16c659a230db8fe3d33b29" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Contacts::ContactPhaseList</scope><name>const_iterator</name></member>
      <member refid="classBipedalLocomotion_1_1Contacts_1_1ContactPhaseList_1aac2bab300df6b4e4b443b63ba3fdc6ab" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Contacts::ContactPhaseList</scope><name>const_reverse_iterator</name></member>
      <member refid="classBipedalLocomotion_1_1Contacts_1_1ContactPhaseList_1ab099c874d1150bbbb881d4a188102c2a" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Contacts::ContactPhaseList</scope><name>ContactPhaseList</name></member>
      <member refid="classBipedalLocomotion_1_1Contacts_1_1ContactPhaseList_1a927dd3f29af712ccbdf946922ed28875" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Contacts::ContactPhaseList</scope><name>ContactPhaseList</name></member>
      <member refid="classBipedalLocomotion_1_1Contacts_1_1ContactPhaseList_1a03dc492d042b4db736bdabb919419e12" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Contacts::ContactPhaseList</scope><name>ContactPhaseList</name></member>
      <member refid="classBipedalLocomotion_1_1Contacts_1_1ContactPhaseList_1a36e5ba075591e514d9fb22f78c263749" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Contacts::ContactPhaseList</scope><name>crbegin</name></member>
      <member refid="classBipedalLocomotion_1_1Contacts_1_1ContactPhaseList_1ae23770746e8ac78b4338b0aab6907cd6" prot="private" virt="non-virtual"><scope>BipedalLocomotion::Contacts::ContactPhaseList</scope><name>createPhases</name></member>
      <member refid="classBipedalLocomotion_1_1Contacts_1_1ContactPhaseList_1a34c2f4b8c6103bc20205243f2ffa2bc2" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Contacts::ContactPhaseList</scope><name>crend</name></member>
      <member refid="classBipedalLocomotion_1_1Contacts_1_1ContactPhaseList_1a04f61a33b31cf66aa43ba97b2c0d1d35" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Contacts::ContactPhaseList</scope><name>end</name></member>
      <member refid="classBipedalLocomotion_1_1Contacts_1_1ContactPhaseList_1a354a7747b22eef33e6cd940735ee0174" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Contacts::ContactPhaseList</scope><name>firstPhase</name></member>
      <member refid="classBipedalLocomotion_1_1Contacts_1_1ContactPhaseList_1a6526bb764abbb066c46f2dfe7e9cb28d" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Contacts::ContactPhaseList</scope><name>forceSampleTime</name></member>
      <member refid="classBipedalLocomotion_1_1Contacts_1_1ContactPhaseList_1ae552581c9eb8499f36bf2e51965b7d3a" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Contacts::ContactPhaseList</scope><name>getPresentPhase</name></member>
      <member refid="classBipedalLocomotion_1_1Contacts_1_1ContactPhaseList_1a8856d230ef79dfb2f20d7e21c93f304d" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Contacts::ContactPhaseList</scope><name>lastPhase</name></member>
      <member refid="classBipedalLocomotion_1_1Contacts_1_1ContactPhaseList_1a234bc1c2bb84a74dbf2dcffd91b4071b" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Contacts::ContactPhaseList</scope><name>lists</name></member>
      <member refid="classBipedalLocomotion_1_1Contacts_1_1ContactPhaseList_1ad6ba5cecf5cae6f1835283dd017f5e7c" prot="private" virt="non-virtual"><scope>BipedalLocomotion::Contacts::ContactPhaseList</scope><name>m_contactLists</name></member>
      <member refid="classBipedalLocomotion_1_1Contacts_1_1ContactPhaseList_1ac8eb371f498eb83d05a396c4bca557e3" prot="private" virt="non-virtual"><scope>BipedalLocomotion::Contacts::ContactPhaseList</scope><name>m_phases</name></member>
      <member refid="classBipedalLocomotion_1_1Contacts_1_1ContactPhaseList_1a7800bb00fce152500e0838d5c980ff71" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Contacts::ContactPhaseList</scope><name>operator=</name></member>
      <member refid="classBipedalLocomotion_1_1Contacts_1_1ContactPhaseList_1ab304c552436d9dcd7a4fdd54276e6248" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Contacts::ContactPhaseList</scope><name>operator=</name></member>
      <member refid="classBipedalLocomotion_1_1Contacts_1_1ContactPhaseList_1a1444cad654a7aeaf0236e7d59a99dc29" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Contacts::ContactPhaseList</scope><name>operator[]</name></member>
      <member refid="classBipedalLocomotion_1_1Contacts_1_1ContactPhaseList_1ae861ead814c9cc43dc808fe6a9affda0" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Contacts::ContactPhaseList</scope><name>rbegin</name></member>
      <member refid="classBipedalLocomotion_1_1Contacts_1_1ContactPhaseList_1a5a12596f3c413271a369de0f23408766" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Contacts::ContactPhaseList</scope><name>rend</name></member>
      <member refid="classBipedalLocomotion_1_1Contacts_1_1ContactPhaseList_1a33083dbf15170a9c48e3a97459caa978" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Contacts::ContactPhaseList</scope><name>setLists</name></member>
      <member refid="classBipedalLocomotion_1_1Contacts_1_1ContactPhaseList_1a6176b67dc70fec29ab5cc742d1a060cb" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Contacts::ContactPhaseList</scope><name>setLists</name></member>
      <member refid="classBipedalLocomotion_1_1Contacts_1_1ContactPhaseList_1a05b8bd34c07272097f0899354bd9e804" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Contacts::ContactPhaseList</scope><name>size</name></member>
      <member refid="classBipedalLocomotion_1_1Contacts_1_1ContactPhaseList_1a952bcc3c6df82382ebba7285ef10de32" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Contacts::ContactPhaseList</scope><name>toString</name></member>
      <member refid="classBipedalLocomotion_1_1Contacts_1_1ContactPhaseList_1a7a5de78563fbb1b9d624faa82700d5d4" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Contacts::ContactPhaseList</scope><name>~ContactPhaseList</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
