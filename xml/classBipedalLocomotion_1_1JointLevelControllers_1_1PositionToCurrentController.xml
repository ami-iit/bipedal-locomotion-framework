<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classBipedalLocomotion_1_1JointLevelControllers_1_1PositionToCurrentController" kind="class" language="C++" prot="public">
    <compoundname>BipedalLocomotion::JointLevelControllers::PositionToCurrentController</compoundname>
    <basecompoundref refid="classBipedalLocomotion_1_1JointLevelControllers_1_1PositionToJointController" prot="public" virt="non-virtual">BipedalLocomotion::JointLevelControllers::PositionToJointController</basecompoundref>
    <includes local="no">BipedalLocomotion/JointLevelControllers/PositionToCurrentController.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classBipedalLocomotion_1_1JointLevelControllers_1_1PositionToCurrentController_1a4218a6de4464e12293901953b7ac0a2d" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; Impl &gt;</type>
        <definition>std::unique_ptr&lt;Impl&gt; BipedalLocomotion::JointLevelControllers::PositionToCurrentController::m_pimpl</definition>
        <argsstring></argsstring>
        <name>m_pimpl</name>
        <briefdescription>
<para>Forward declaration of the implementation details. </para>
        </briefdescription>
        <detaileddescription>
<para>Pointer to the implementation details </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/JointLevelControllers/PositionToCurrentController.h" line="158" column="21" bodyfile="BipedalLocomotion/JointLevelControllers/PositionToCurrentController.h" bodystart="157" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classBipedalLocomotion_1_1JointLevelControllers_1_1PositionToCurrentController_1ab461640601963d522c0830550397d6a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BipedalLocomotion::JointLevelControllers::PositionToCurrentController::PositionToCurrentController</definition>
        <argsstring>()</argsstring>
        <name>PositionToCurrentController</name>
        <briefdescription>
<para>Default constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/JointLevelControllers/PositionToCurrentController.h" line="93" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1JointLevelControllers_1_1PositionToCurrentController_1ad3fcf200866d084f8231e749c587a47f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual BipedalLocomotion::JointLevelControllers::PositionToCurrentController::~PositionToCurrentController</definition>
        <argsstring>()</argsstring>
        <name>~PositionToCurrentController</name>
        <briefdescription>
<para>Default destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/JointLevelControllers/PositionToCurrentController.h" line="98" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1JointLevelControllers_1_1PositionToCurrentController_1a2143ef33c86f9a2753e55633891ad6cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::JointLevelControllers::PositionToCurrentController::advance</definition>
        <argsstring>() override</argsstring>
        <name>advance</name>
        <reimplements refid="classBipedalLocomotion_1_1System_1_1Advanceable_1a67107e46e831d93f572558b541aab6d2">advance</reimplements>
        <briefdescription>
<para>Advance the controller. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>The input to the controller </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The output of the controller </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/JointLevelControllers/PositionToCurrentController.h" line="105" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1JointLevelControllers_1_1PositionToCurrentController_1a65a6a1e03cea584ee2c947ebbbc6fe73" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::JointLevelControllers::PositionToCurrentController::initialize</definition>
        <argsstring>(std::weak_ptr&lt; const ParametersHandler::IParametersHandler &gt; handler) override</argsstring>
        <name>initialize</name>
        <reimplements refid="classBipedalLocomotion_1_1System_1_1Advanceable_1a6db247d3db83217a16e963d01f6bcb77">initialize</reimplements>
        <param>
          <type>std::weak_ptr&lt; const <ref refid="classBipedalLocomotion_1_1ParametersHandler_1_1IParametersHandler" kindref="compound">ParametersHandler::IParametersHandler</ref> &gt;</type>
          <declname>handler</declname>
        </param>
        <briefdescription>
<para>Initialize the advanceable. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handler</parametername>
</parameternamelist>
<parameterdescription>
<para>A weak pointer to the parameters handler </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The parameters handler should contain the following parameters: <table rows="3" cols="4"><row>
<entry thead="yes" align='center'><para>Parameter Name   </para>
</entry><entry thead="yes" align='center'><para>Type   </para>
</entry><entry thead="yes" align='center'><para>Description   </para>
</entry><entry thead="yes" align='center'><para>Mandatory    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>joints_list</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>vector&lt;string&gt;</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>List of joints to control   </para>
</entry><entry thead="no" align='center'><para>Yes    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>current_safety_factor</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>double</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>Value used to scale the current limits (0, 1] (Default value 1.0)   </para>
</entry><entry thead="no" align='center'><para>No   </para>
</entry></row>
</table>
Moreover the following group parameters are required: <table rows="5" cols="3"><row>
<entry thead="yes" align='center'><para>Group Name   </para>
</entry><entry thead="yes" align='center'><para>Description   </para>
</entry><entry thead="yes" align='center'><para>Mandatory    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>kp</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>An element for each joint contained in the <computeroutput>joints_list</computeroutput> parameter. Proportional gain for each joint   </para>
</entry><entry thead="no" align='center'><para>Yes    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>kd</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>An element for each joint contained in the <computeroutput>joints_list</computeroutput> parameter. Derivative gain for each joint   </para>
</entry><entry thead="no" align='center'><para>Yes    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>gearbox</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>An element for each joint contained in the <computeroutput>joints_list</computeroutput> parameter. Gear ratio for each joint (motor-&gt;joint)   </para>
</entry><entry thead="no" align='center'><para>Yes    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>k_tau</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>An element for each joint contained in the <computeroutput>joints_list</computeroutput> parameter. Torque constant for each joint [Nm/A]   </para>
</entry><entry thead="no" align='center'><para>Yes   </para>
</entry></row>
</table>
</para>
</simplesect>
Furthermore, the following optional parameters are supported: <table rows="6" cols="3"><row>
<entry thead="yes" align='center'><para>Group Name   </para>
</entry><entry thead="yes" align='center'><para>Description   </para>
</entry><entry thead="yes" align='center'><para>Mandatory    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>current_limit</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>An element for each joint contained in the <computeroutput>joints_list</computeroutput> parameter. Current limit for each joint [A]   </para>
</entry><entry thead="no" align='center'><para>No    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>coulomb_friction</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>An element for each joint contained in the <computeroutput>joints_list</computeroutput> parameter. Coulomb friction for each joint [Nm]   </para>
</entry><entry thead="no" align='center'><para>No    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>activation_velocity</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>An element for each joint contained in the <computeroutput>joints_list</computeroutput> parameter. Friction activation velocity [rad/s]   </para>
</entry><entry thead="no" align='center'><para>No    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>rated_speed</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>An element for each joint contained in the <computeroutput>joints_list</computeroutput> parameter. Rated speed for each joint [rad/s]   </para>
</entry><entry thead="no" align='center'><para>No    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>no_load_speed</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>An element for each joint contained in the <computeroutput>joints_list</computeroutput> parameter. No-load speed for each joint [rad/s]   </para>
</entry><entry thead="no" align='center'><para>No   </para>
</entry></row>
</table>
<simplesect kind="return"><para>True if the initialization is successful. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/JointLevelControllers/PositionToCurrentController.h" line="134" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1JointLevelControllers_1_1PositionToCurrentController_1a0a64cb7f58a06ba7fad938070bb7d8e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::JointLevelControllers::PositionToCurrentController::setInput</definition>
        <argsstring>(const PositionToJointControllerInput &amp;input) override</argsstring>
        <name>setInput</name>
        <param>
          <type>const <ref refid="structBipedalLocomotion_1_1JointLevelControllers_1_1PositionToJointControllerInput" kindref="compound">PositionToJointControllerInput</ref> &amp;</type>
          <declname>input</declname>
        </param>
        <briefdescription>
<para>Set the input of the port. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>the input of the controller </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True in case of success and false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/JointLevelControllers/PositionToCurrentController.h" line="142" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1JointLevelControllers_1_1PositionToCurrentController_1a592d153f85b734098fcce0b63c0b1c4c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>Eigen::VectorXd &amp;</type>
        <definition>Eigen::VectorXd&amp; BipedalLocomotion::JointLevelControllers::PositionToCurrentController::getOutput</definition>
        <argsstring>() const override</argsstring>
        <name>getOutput</name>
        <reimplements refid="classBipedalLocomotion_1_1System_1_1OutputPort_1a8c089ecf2dd8ff0fb2732233994b6cac">getOutput</reimplements>
        <briefdescription>
<para>Get the output of the controller. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The output of the controller </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/JointLevelControllers/PositionToCurrentController.h" line="148" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1JointLevelControllers_1_1PositionToCurrentController_1af72f7c6291225ff78e6b0ed0fa2309ef" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::JointLevelControllers::PositionToCurrentController::isOutputValid</definition>
        <argsstring>() const override</argsstring>
        <name>isOutputValid</name>
        <reimplements refid="classBipedalLocomotion_1_1System_1_1OutputPort_1ac50de29a6160baa2bba195af9d69430a">isOutputValid</reimplements>
        <briefdescription>
<para>Check if the output is valid. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if the output is valid, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/JointLevelControllers/PositionToCurrentController.h" line="154" column="10"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Position-to-Current Controller with Friction Compensation and TN-Curve Limiting. </para>
    </briefdescription>
    <detaileddescription>
<para>The <ref refid="classBipedalLocomotion_1_1JointLevelControllers_1_1PositionToCurrentController" kindref="compound">PositionToCurrentController</ref> implements a position control strategy that directly computes motor current commands from position errors. This approach is particularly useful for robots where direct current control provides better performance than traditional position control cascades, especially in applications requiring precise force/torque control or friction compensation.</para>
<para><simplesect kind="note"><para>Controller Architecture</para>
</simplesect>
The controller implements a proportional position control law with Coulomb friction feedforward compensation and dynamic current limiting based on motor torque-speed (TN) characteristics:</para>
<para><formula id="102">\[ I = \text{clamp}\left(\frac{K_p \cdot (q_{ref} - q_{fb}) + \tau_{coulomb}}{\text{gearRatio} \cdot k_{\tau}}, I_{limit}(\omega)\right) \]</formula></para>
<para>where:<itemizedlist>
<listitem><para><formula id="103">$ I $</formula> is the output current [A]</para>
</listitem><listitem><para><formula id="104">$ K_p $</formula> is the proportional gain [Nm/rad]</para>
</listitem><listitem><para><formula id="105">$ q_{ref} $</formula> is the reference position [rad]</para>
</listitem><listitem><para><formula id="106">$ q_{fb} $</formula> is the feedback position [rad]</para>
</listitem><listitem><para><formula id="107">$ \tau_{coulomb} = k_{coulomb} \cdot \text{sign}(\dot{q}_{fb}) $</formula> is the Coulomb friction compensation [Nm]</para>
</listitem><listitem><para><formula id="108">$ \dot{q}_{fb} $</formula> is the feedback velocity [rad/s]</para>
</listitem><listitem><para><formula id="109">$ \text{gearRatio} $</formula> is the gear reduction ratio (motor-to-joint)</para>
</listitem><listitem><para><formula id="110">$ k_{\tau} $</formula> is the motor torque constant [Nm/A]</para>
</listitem><listitem><para><formula id="111">$ I_{limit}(\omega) $</formula> is the velocity-dependent current limit [A]</para>
</listitem></itemizedlist>
</para>
<sect2 id="classBipedalLocomotion_1_1JointLevelControllers_1_1PositionToCurrentController_1autotoc_md8">
<title>Friction Compensation</title>
<para>The controller includes feedforward Coulomb friction compensation that adds a torque in the direction of motion to counteract coulomb friction effects:</para>
<para><formula id="112">\[ \tau_{coulomb} = k_{coulomb} \cdot \text{tanh}(\dot{q}_{fb} / v_{activation}) \]</formula></para>
<para>where:<itemizedlist>
<listitem><para><formula id="113">$ k_{coulomb} $</formula> is the Coulomb friction constant [Nm]</para>
</listitem><listitem><para><formula id="114">$ v_{activation} $</formula> is the velocity threshold for friction activation [rad/s]</para>
</listitem></itemizedlist>
</para>
<para>This helps improve tracking accuracy, especially at low velocities where friction effects are dominant.</para>
</sect2>
<sect2 id="classBipedalLocomotion_1_1JointLevelControllers_1_1PositionToCurrentController_1autotoc_md9">
<title>Dynamic Current Limiting (TN-Curve)</title>
<para>The controller implements velocity-dependent current limiting based on motor torque-speed characteristics to prevent motor overheating and ensure safe operation:</para>
<para><itemizedlist>
<listitem><para><bold>Constant Region</bold> ( <formula id="115">$ |\omega| \leq \omega_{rated} $</formula>): <formula id="116">$ I_{limit} = I_{max} $</formula></para>
</listitem><listitem><para><bold>Linear Falloff</bold> ( <formula id="117">$ \omega_{rated} &lt; |\omega| &lt; \omega_{0} $</formula>): <formula id="118">$ I_{limit} = m \cdot |\omega| + b $</formula></para>
</listitem><listitem><para><bold>No-Load Speed</bold> ( <formula id="119">$ |\omega| \geq \omega_{0} $</formula>): <formula id="120">$ I_{limit} = 0 $</formula></para>
</listitem></itemizedlist>
</para>
<para>where:<itemizedlist>
<listitem><para><formula id="121">$ \omega_{rated} $</formula> is the rated speed at which current limiting begins [rad/s]</para>
</listitem><listitem><para><formula id="122">$ \omega_{0} $</formula> is the no-load speed where current becomes zero [rad/s]</para>
</listitem><listitem><para><formula id="123">$ m = -I_{max} / (\omega_{0} - \omega_{rated}) $</formula> is the slope of the linear region</para>
</listitem><listitem><para><formula id="124">$ b = I_{max} - m \cdot \omega_{rated} $</formula> is the intercept </para>
</listitem></itemizedlist>
</para>
</sect2>
    </detaileddescription>
    <inheritancegraph>
      <node id="4">
        <label>BipedalLocomotion::System::InputPort&lt; _Input &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1InputPort"/>
      </node>
      <node id="2">
        <label>BipedalLocomotion::JointLevelControllers::PositionToJointController</label>
        <link refid="classBipedalLocomotion_1_1JointLevelControllers_1_1PositionToJointController"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>BipedalLocomotion::System::OutputPort&lt; _Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1OutputPort"/>
      </node>
      <node id="3">
        <label>BipedalLocomotion::System::Advanceable&lt; PositionToJointControllerInput, Eigen::VectorXd &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Advanceable"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="template-instance">
          <edgelabel>&lt; PositionToJointControllerInput, Eigen::VectorXd &gt;</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>BipedalLocomotion::JointLevelControllers::PositionToCurrentController</label>
        <link refid="classBipedalLocomotion_1_1JointLevelControllers_1_1PositionToCurrentController"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>BipedalLocomotion::System::Advanceable&lt; _Input, _Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Advanceable"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="4">
        <label>BipedalLocomotion::System::InputPort&lt; _Input &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1InputPort"/>
      </node>
      <node id="2">
        <label>BipedalLocomotion::JointLevelControllers::PositionToJointController</label>
        <link refid="classBipedalLocomotion_1_1JointLevelControllers_1_1PositionToJointController"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>BipedalLocomotion::System::OutputPort&lt; _Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1OutputPort"/>
      </node>
      <node id="3">
        <label>BipedalLocomotion::System::Advanceable&lt; PositionToJointControllerInput, Eigen::VectorXd &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Advanceable"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="template-instance">
          <edgelabel>&lt; PositionToJointControllerInput, Eigen::VectorXd &gt;</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>BipedalLocomotion::JointLevelControllers::PositionToCurrentController</label>
        <link refid="classBipedalLocomotion_1_1JointLevelControllers_1_1PositionToCurrentController"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>BipedalLocomotion::System::Advanceable&lt; _Input, _Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Advanceable"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="BipedalLocomotion/JointLevelControllers/PositionToCurrentController.h" line="86" column="1" bodyfile="BipedalLocomotion/JointLevelControllers/PositionToCurrentController.h" bodystart="87" bodyend="159"/>
    <listofallmembers>
      <member refid="classBipedalLocomotion_1_1JointLevelControllers_1_1PositionToCurrentController_1a2143ef33c86f9a2753e55633891ad6cf" prot="public" virt="virtual"><scope>BipedalLocomotion::JointLevelControllers::PositionToCurrentController</scope><name>advance</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1a09ee5b41c77c6b626f4d5cb775065325" prot="public" virt="non-virtual"><scope>BipedalLocomotion::JointLevelControllers::PositionToCurrentController</scope><name>Advanceable</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1aaeb3eba3073fbc844dea1eba4c9b68f3" prot="public" virt="non-virtual"><scope>BipedalLocomotion::JointLevelControllers::PositionToCurrentController</scope><name>Advanceable</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1ac1549cb26bd896e27370e97b0795ba3f" prot="public" virt="non-virtual"><scope>BipedalLocomotion::JointLevelControllers::PositionToCurrentController</scope><name>Advanceable</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1a618ab786bb43814b3b3012b843fce93b" prot="public" virt="virtual"><scope>BipedalLocomotion::JointLevelControllers::PositionToCurrentController</scope><name>close</name></member>
      <member refid="classBipedalLocomotion_1_1JointLevelControllers_1_1PositionToCurrentController_1a592d153f85b734098fcce0b63c0b1c4c" prot="public" virt="virtual"><scope>BipedalLocomotion::JointLevelControllers::PositionToCurrentController</scope><name>getOutput</name></member>
      <member refid="classBipedalLocomotion_1_1JointLevelControllers_1_1PositionToCurrentController_1a65a6a1e03cea584ee2c947ebbbc6fe73" prot="public" virt="virtual"><scope>BipedalLocomotion::JointLevelControllers::PositionToCurrentController</scope><name>initialize</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1a975a7ecbf38c917c7b72519581fc7dba" prot="public" virt="non-virtual"><scope>BipedalLocomotion::JointLevelControllers::PositionToCurrentController</scope><name>Input</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1InputPort_1a27c614cb30c1e4b78e64791f4919dfa7" prot="public" virt="non-virtual"><scope>BipedalLocomotion::JointLevelControllers::PositionToCurrentController</scope><name>InputPort</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1InputPort_1a74d1418613e89a7f2993ea936228a44a" prot="public" virt="non-virtual"><scope>BipedalLocomotion::JointLevelControllers::PositionToCurrentController</scope><name>InputPort</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1InputPort_1a02ec5c947f1d2d83d2952c3b899cc58f" prot="public" virt="non-virtual"><scope>BipedalLocomotion::JointLevelControllers::PositionToCurrentController</scope><name>InputPort</name></member>
      <member refid="classBipedalLocomotion_1_1JointLevelControllers_1_1PositionToCurrentController_1af72f7c6291225ff78e6b0ed0fa2309ef" prot="public" virt="virtual"><scope>BipedalLocomotion::JointLevelControllers::PositionToCurrentController</scope><name>isOutputValid</name></member>
      <member refid="classBipedalLocomotion_1_1JointLevelControllers_1_1PositionToCurrentController_1a4218a6de4464e12293901953b7ac0a2d" prot="private" virt="non-virtual"><scope>BipedalLocomotion::JointLevelControllers::PositionToCurrentController</scope><name>m_pimpl</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1ae147cdee9ff9160a9dfe0d3e349a9aad" prot="public" virt="non-virtual"><scope>BipedalLocomotion::JointLevelControllers::PositionToCurrentController</scope><name>operator=</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1adf0d9fc07bab0ec5d4db7f3a35816bf2" prot="public" virt="non-virtual"><scope>BipedalLocomotion::JointLevelControllers::PositionToCurrentController</scope><name>operator=</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1InputPort_1a54f476d3c8d6d003fb714309ea6272aa" prot="public" virt="non-virtual" ambiguityscope="BipedalLocomotion::System::InputPort::"><scope>BipedalLocomotion::JointLevelControllers::PositionToCurrentController</scope><name>operator=</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1InputPort_1adb341b37472241b6da8b552166308d7b" prot="public" virt="non-virtual" ambiguityscope="BipedalLocomotion::System::InputPort::"><scope>BipedalLocomotion::JointLevelControllers::PositionToCurrentController</scope><name>operator=</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1OutputPort_1af5e15f5e4962a5c8e0f0c0a49adb9ca1" prot="public" virt="non-virtual" ambiguityscope="BipedalLocomotion::System::OutputPort::"><scope>BipedalLocomotion::JointLevelControllers::PositionToCurrentController</scope><name>operator=</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1OutputPort_1ad5c6ce3ad7d2a064d7bb512fe0bc489e" prot="public" virt="non-virtual" ambiguityscope="BipedalLocomotion::System::OutputPort::"><scope>BipedalLocomotion::JointLevelControllers::PositionToCurrentController</scope><name>operator=</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1a69603f2c9c608815908425b5b8c2005c" prot="public" virt="non-virtual"><scope>BipedalLocomotion::JointLevelControllers::PositionToCurrentController</scope><name>Output</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1OutputPort_1a7c0d15e677a1935918fc747ba4c25ec1" prot="public" virt="non-virtual"><scope>BipedalLocomotion::JointLevelControllers::PositionToCurrentController</scope><name>OutputPort</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1OutputPort_1a0a39b891749961d34507b4b591886741" prot="public" virt="non-virtual"><scope>BipedalLocomotion::JointLevelControllers::PositionToCurrentController</scope><name>OutputPort</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1OutputPort_1a581340f280eca1890a8a7b2331761b57" prot="public" virt="non-virtual"><scope>BipedalLocomotion::JointLevelControllers::PositionToCurrentController</scope><name>OutputPort</name></member>
      <member refid="classBipedalLocomotion_1_1JointLevelControllers_1_1PositionToCurrentController_1ab461640601963d522c0830550397d6a0" prot="public" virt="non-virtual"><scope>BipedalLocomotion::JointLevelControllers::PositionToCurrentController</scope><name>PositionToCurrentController</name></member>
      <member refid="classBipedalLocomotion_1_1JointLevelControllers_1_1PositionToCurrentController_1a0a64cb7f58a06ba7fad938070bb7d8e4" prot="public" virt="non-virtual"><scope>BipedalLocomotion::JointLevelControllers::PositionToCurrentController</scope><name>setInput</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1InputPort_1ad2637be5c9075a2d8f09fedc6a42d808" prot="public" virt="pure-virtual" ambiguityscope="BipedalLocomotion::JointLevelControllers::PositionToJointController::"><scope>BipedalLocomotion::JointLevelControllers::PositionToCurrentController</scope><name>setInput</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1afae1137cba829874bab4a1d25d559896" prot="public" virt="virtual"><scope>BipedalLocomotion::JointLevelControllers::PositionToCurrentController</scope><name>~Advanceable</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1InputPort_1ac9b58b0d2f6ae8821b873ed6f9817ccb" prot="public" virt="virtual"><scope>BipedalLocomotion::JointLevelControllers::PositionToCurrentController</scope><name>~InputPort</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1OutputPort_1adcc49c38152c9204dcab4f8e87f68977" prot="public" virt="virtual"><scope>BipedalLocomotion::JointLevelControllers::PositionToCurrentController</scope><name>~OutputPort</name></member>
      <member refid="classBipedalLocomotion_1_1JointLevelControllers_1_1PositionToCurrentController_1ad3fcf200866d084f8231e749c587a47f" prot="public" virt="virtual"><scope>BipedalLocomotion::JointLevelControllers::PositionToCurrentController</scope><name>~PositionToCurrentController</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
