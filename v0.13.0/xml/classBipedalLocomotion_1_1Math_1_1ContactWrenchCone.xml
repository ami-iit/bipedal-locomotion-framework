<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classBipedalLocomotion_1_1Math_1_1ContactWrenchCone" kind="class" language="C++" prot="public">
    <compoundname>BipedalLocomotion::Math::ContactWrenchCone</compoundname>
    <includes local="no">BipedalLocomotion/Math/ContactWrenchCone.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classBipedalLocomotion_1_1Math_1_1ContactWrenchCone_1aceb03e22fad8ed6e8f134ddfede7b949" prot="private" static="no" mutable="no">
        <type>Eigen::MatrixXd</type>
        <definition>Eigen::MatrixXd BipedalLocomotion::Math::ContactWrenchCone::m_A</definition>
        <argsstring></argsstring>
        <name>m_A</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Math/ContactWrenchCone.h" line="62" column="21" bodyfile="BipedalLocomotion/Math/ContactWrenchCone.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBipedalLocomotion_1_1Math_1_1ContactWrenchCone_1aab1bd189f7ae2acf23cab416501bd7c9" prot="private" static="no" mutable="no">
        <type>Eigen::VectorXd</type>
        <definition>Eigen::VectorXd BipedalLocomotion::Math::ContactWrenchCone::m_b</definition>
        <argsstring></argsstring>
        <name>m_b</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Math/ContactWrenchCone.h" line="63" column="21" bodyfile="BipedalLocomotion/Math/ContactWrenchCone.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBipedalLocomotion_1_1Math_1_1ContactWrenchCone_1aed8a479d53922fb1ca5e55a2015333f5" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool BipedalLocomotion::Math::ContactWrenchCone::m_isIntialized</definition>
        <argsstring></argsstring>
        <name>m_isIntialized</name>
        <initializer>{false}</initializer>
        <briefdescription>
<para>True if the class has been correctly initialize. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Math/ContactWrenchCone.h" line="65" column="10" bodyfile="BipedalLocomotion/Math/ContactWrenchCone.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classBipedalLocomotion_1_1Math_1_1ContactWrenchCone_1aea31e8d551e986f222d441775c5a1300" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::Math::ContactWrenchCone::initialize</definition>
        <argsstring>(std::weak_ptr&lt; const ParametersHandler::IParametersHandler &gt; handler)</argsstring>
        <name>initialize</name>
        <param>
          <type>std::weak_ptr&lt; const <ref refid="classBipedalLocomotion_1_1ParametersHandler_1_1IParametersHandler" kindref="compound">ParametersHandler::IParametersHandler</ref> &gt;</type>
          <declname>handler</declname>
        </param>
        <briefdescription>
<para>Initialize the Contact <ref refid="classBipedalLocomotion_1_1Math_1_1Wrench" kindref="compound">Wrench</ref> Cone class. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handler</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the parameter handler. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The following parameters are required: <table rows="5" cols="4"><row>
<entry thead="yes" align='center'><para>Parameter Name   </para>
</entry><entry thead="yes" align='center'><para>Type   </para>
</entry><entry thead="yes" align='center'><para>Description   </para>
</entry><entry thead="yes" align='center'><para>Mandatory    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>number_of_slices</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>int</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>Number of slices used to split 90 deg.   </para>
</entry><entry thead="no" align='center'><para>Yes    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>static_friction_coefficient</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>double</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>Static friction coefficient.   </para>
</entry><entry thead="no" align='center'><para>Yes    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>foot_limits_x</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>vector&lt;double&gt;</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>x coordinate of the foot limits w.r.t the frame attached to the surface   </para>
</entry><entry thead="no" align='center'><para>Yes    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>foot_limits_y</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>vector&lt;double&gt;</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>y coordinate of the foot limits w.r.t the frame attached to the surface   </para>
</entry><entry thead="no" align='center'><para>Yes   </para>
</entry></row>
</table>
</para>
</simplesect>
<simplesect kind="return"><para>true in case of success/false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Math/ContactWrenchCone.h" line="81" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Math_1_1ContactWrenchCone_1a18e6c6135c856327c71129547f66f4e4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Ref&lt; const Eigen::MatrixXd &gt;</type>
        <definition>Eigen::Ref&lt;const Eigen::MatrixXd&gt; BipedalLocomotion::Math::ContactWrenchCone::getA</definition>
        <argsstring>() const</argsstring>
        <name>getA</name>
        <briefdescription>
<para>Get the matrix A. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the matrix A. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Math/ContactWrenchCone.h" line="87" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Math_1_1ContactWrenchCone_1a2abd98cdbd311e660046b4d1ae7c71d0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Ref&lt; const Eigen::VectorXd &gt;</type>
        <definition>Eigen::Ref&lt;const Eigen::VectorXd&gt; BipedalLocomotion::Math::ContactWrenchCone::getB</definition>
        <argsstring>() const</argsstring>
        <name>getB</name>
        <briefdescription>
<para>Get the vector B. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the matrix B.. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Math/ContactWrenchCone.h" line="93" column="16"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="classBipedalLocomotion_1_1Math_1_1ContactWrenchCone" kindref="compound">ContactWrenchCone</ref> computes the polyhedral approximation of the contact wrench friction cone. </para>
    </briefdescription>
    <detaileddescription>
<para>A surface remains fixed with respect to the environment if the contact wrench lies in a cone described by <formula id="103">\[ f ^c \cdot n &gt; 0 \quad | f ^t | \le \mu f^c \cdot n \]</formula> where <formula id="104">$ f^c $</formula> is the contact force, <formula id="105">$ n $</formula> is the vector normal to the contact surface. <formula id="106">$ f^t $</formula> is the tangential force to the contact surface and <formula id="107">$ \mu $</formula> is the friction parameter. In addition we require CoP inside the support area and a bounded yaw torque. The <ref refid="classBipedalLocomotion_1_1Math_1_1ContactWrenchCone" kindref="compound">ContactWrenchCone</ref> aims to compute the polyhedral approximation of <formula id="108">$ | f ^t | \le \mu f^c \cdot n $</formula> by splitting the base of the cone into slices while considering the contact torque constraints. The class implements the equations presented in [<emphasis>Stability of Surface Contacts for Humanoid Robots: Closed-Form Formulae of the Contact <ref refid="classBipedalLocomotion_1_1Math_1_1Wrench" kindref="compound">Wrench</ref> Cone for Rectangular Support Areas</emphasis> paper](<ulink url="https://ieeexplore.ieee.org/document/7139910">https://ieeexplore.ieee.org/document/7139910</ulink>). However differently from the original work, the origin of the frame attached to the contact surface is not required to be in the center of the surface. <simplesect kind="note"><para>The <ref refid="classBipedalLocomotion_1_1Math_1_1ContactWrenchCone" kindref="compound">ContactWrenchCone</ref> class express the constraints in body representation (so called left trivialization). Please check <ulink url="https://pure.tue.nl/ws/files/25753352/Traversaro_en_Saccon_DC_2016.064.pdf">here</ulink> for further details. If you want to express the constraint in mixed representation please remember to postmultiply the matrix A for the corresponding adjoint matrix. Namely: <formula id="109">\[ A_{\text{mixed}} = A \begin{bmatrix} {}^I R _ B ^\top &amp; 0 \\ 0 &amp; {}^I R _ B^\top \end{bmatrix} \]</formula> where <formula id="110">$I$</formula> and <formula id="111">$B$</formula> are the inertial and the frame attached to the contact surface respectively. </para>
</simplesect>
<simplesect kind="note"><para>If you want to specify only the constraints related to the contact force please take a look at <ref refid="classBipedalLocomotion_1_1Math_1_1LinearizedFrictionCone" kindref="compound">LinearizedFrictionCone</ref> class. </para>
</simplesect>
<simplesect kind="warning"><para><ref refid="classBipedalLocomotion_1_1Math_1_1ContactWrenchCone" kindref="compound">ContactWrenchCone</ref> class does not consider the unilaterally constraint of the normal force. </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="BipedalLocomotion/Math/ContactWrenchCone.h" line="60" column="1" bodyfile="BipedalLocomotion/Math/ContactWrenchCone.h" bodystart="61" bodyend="94"/>
    <listofallmembers>
      <member refid="classBipedalLocomotion_1_1Math_1_1ContactWrenchCone_1a18e6c6135c856327c71129547f66f4e4" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Math::ContactWrenchCone</scope><name>getA</name></member>
      <member refid="classBipedalLocomotion_1_1Math_1_1ContactWrenchCone_1a2abd98cdbd311e660046b4d1ae7c71d0" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Math::ContactWrenchCone</scope><name>getB</name></member>
      <member refid="classBipedalLocomotion_1_1Math_1_1ContactWrenchCone_1aea31e8d551e986f222d441775c5a1300" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Math::ContactWrenchCone</scope><name>initialize</name></member>
      <member refid="classBipedalLocomotion_1_1Math_1_1ContactWrenchCone_1aceb03e22fad8ed6e8f134ddfede7b949" prot="private" virt="non-virtual"><scope>BipedalLocomotion::Math::ContactWrenchCone</scope><name>m_A</name></member>
      <member refid="classBipedalLocomotion_1_1Math_1_1ContactWrenchCone_1aab1bd189f7ae2acf23cab416501bd7c9" prot="private" virt="non-virtual"><scope>BipedalLocomotion::Math::ContactWrenchCone</scope><name>m_b</name></member>
      <member refid="classBipedalLocomotion_1_1Math_1_1ContactWrenchCone_1aed8a479d53922fb1ca5e55a2015333f5" prot="private" virt="non-virtual"><scope>BipedalLocomotion::Math::ContactWrenchCone</scope><name>m_isIntialized</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
