<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics" kind="class" language="C++" prot="public">
    <compoundname>BipedalLocomotion::IK::QPInverseKinematics</compoundname>
    <basecompoundref refid="classBipedalLocomotion_1_1IK_1_1IntegrationBasedIK" prot="public" virt="non-virtual">BipedalLocomotion::IK::IntegrationBasedIK</basecompoundref>
    <derivedcompoundref refid="classBipedalLocomotion_1_1IK_1_1QPFixedBaseInverseKinematics" prot="public" virt="non-virtual">BipedalLocomotion::IK::QPFixedBaseInverseKinematics</derivedcompoundref>
    <includes local="no">BipedalLocomotion/IK/QPInverseKinematics.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics_1ae07de2d2f2e45f7cab298d77c7a32037" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; Impl &gt;</type>
        <definition>std::unique_ptr&lt;Impl&gt; BipedalLocomotion::IK::QPInverseKinematics::m_pimpl</definition>
        <argsstring></argsstring>
        <name>m_pimpl</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/IK/QPInverseKinematics.h" line="60" column="21" bodyfile="BipedalLocomotion/IK/QPInverseKinematics.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics_1a5e8f8d2855c94ef0539815664b65a0fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BipedalLocomotion::IK::QPInverseKinematics::QPInverseKinematics</definition>
        <argsstring>()</argsstring>
        <name>QPInverseKinematics</name>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/IK/QPInverseKinematics.h" line="67" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics_1ab66c09c2e12b3496f357018d0818e831" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual BipedalLocomotion::IK::QPInverseKinematics::~QPInverseKinematics</definition>
        <argsstring>()</argsstring>
        <name>~QPInverseKinematics</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/IK/QPInverseKinematics.h" line="72" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics_1a7666e60ae056992a39f56eddd1134d75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::IK::QPInverseKinematics::addTask</definition>
        <argsstring>(std::shared_ptr&lt; Task &gt; task, const std::string &amp;taskName, std::size_t priority, std::shared_ptr&lt; const System::WeightProviderPort &gt; weightProvider=nullptr) override</argsstring>
        <name>addTask</name>
        <param>
          <type>std::shared_ptr&lt; Task &gt;</type>
          <declname>task</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>taskName</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>priority</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; const <ref refid="ILinearTaskSolver_8h_1aa0b9c4f50fc80885f1a6401dba73ad50" kindref="member">System::WeightProviderPort</ref> &gt;</type>
          <declname>weightProvider</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Add a linear task in the solver. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>task</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a given linear task </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>taskName</parametername>
</parameternamelist>
<parameterdescription>
<para>unique name associated to the task. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>priority</parametername>
</parameternamelist>
<parameterdescription>
<para>Priority associated to the task. The lower the number the higher the priority. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weightProvider</parametername>
</parameternamelist>
<parameterdescription>
<para>Weight provider associated to the task. This parameter is optional. The default value is an object that does not contain any value. The user may avoid to pass a provider only if the priority of the task is equal to 0. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the task has been added to the solver. </para>
</simplesect>
<simplesect kind="warning"><para>The QPTSID cannot handle inequality tasks (please check Task::Type) with priority equal to 1. </para>
</simplesect>
<simplesect kind="warning"><para>The QPTSID can handle only priority equal to 0 and 1. 0 means high priority while 1 low priority. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/IK/QPInverseKinematics.h" line="90" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics_1a2b0c765e65eb6875342f438560c99e6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::IK::QPInverseKinematics::addTask</definition>
        <argsstring>(std::shared_ptr&lt; Task &gt; task, const std::string &amp;taskName, std::size_t priority, Eigen::Ref&lt; const Eigen::VectorXd &gt; weight) override</argsstring>
        <name>addTask</name>
        <param>
          <type>std::shared_ptr&lt; Task &gt;</type>
          <declname>task</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>taskName</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>priority</declname>
        </param>
        <param>
          <type>Eigen::Ref&lt; const Eigen::VectorXd &gt;</type>
          <declname>weight</declname>
        </param>
        <briefdescription>
<para>Add a linear task in the solver. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>task</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a given linear task </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>taskName</parametername>
</parameternamelist>
<parameterdescription>
<para>unique name associated to the task. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>priority</parametername>
</parameternamelist>
<parameterdescription>
<para>Priority associated to the task. The lower the number the higher the priority. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weight</parametername>
</parameternamelist>
<parameterdescription>
<para>Weight associated to the task. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the task has been added to the solver. </para>
</simplesect>
<simplesect kind="note"><para>The solver assumes the weight is a constant value. </para>
</simplesect>
<simplesect kind="warning"><para>The <ref refid="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics" kindref="compound">QPInverseKinematics</ref> cannot handle inequality tasks (please check Task::Type) with priority equal to 1. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/IK/QPInverseKinematics.h" line="107" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics_1a8357aa4b53db64ac10d9065f98203320" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::IK::QPInverseKinematics::setTaskWeight</definition>
        <argsstring>(const std::string &amp;taskName, std::shared_ptr&lt; const System::WeightProviderPort &gt; weightProvider) override</argsstring>
        <name>setTaskWeight</name>
        <reimplements refid="classBipedalLocomotion_1_1System_1_1ILinearTaskSolver_1a3de5b3fbd5d68247e799e4dd36f610cf">setTaskWeight</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>taskName</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; const <ref refid="ILinearTaskSolver_8h_1aa0b9c4f50fc80885f1a6401dba73ad50" kindref="member">System::WeightProviderPort</ref> &gt;</type>
          <declname>weightProvider</declname>
        </param>
        <briefdescription>
<para>Set the weightProvider associated to an already existing task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>taskName</parametername>
</parameternamelist>
<parameterdescription>
<para>name associated to the task </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weightProvider</parametername>
</parameternamelist>
<parameterdescription>
<para>new weight provider associated to the task. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the weight has been updated </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/IK/QPInverseKinematics.h" line="118" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics_1a418b0e0b18f2f99ca55b88829e031898" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::IK::QPInverseKinematics::setTaskWeight</definition>
        <argsstring>(const std::string &amp;taskName, Eigen::Ref&lt; const Eigen::VectorXd &gt; weight) override</argsstring>
        <name>setTaskWeight</name>
        <reimplements refid="classBipedalLocomotion_1_1System_1_1ILinearTaskSolver_1aaf4d7e4a163df3f4939d119f002302d6">setTaskWeight</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>taskName</declname>
        </param>
        <param>
          <type>Eigen::Ref&lt; const Eigen::VectorXd &gt;</type>
          <declname>weight</declname>
        </param>
        <briefdescription>
<para>Set the weight associated to an already existing task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>taskName</parametername>
</parameternamelist>
<parameterdescription>
<para>name associated to the task </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weight</parametername>
</parameternamelist>
<parameterdescription>
<para>new Weight associated to the task. A constant weight is assumed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the weight has been updated </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/IK/QPInverseKinematics.h" line="127" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics_1a93ccdd021104e971a0741897124dd943" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::weak_ptr&lt; const <ref refid="ILinearTaskSolver_8h_1aa0b9c4f50fc80885f1a6401dba73ad50" kindref="member">System::WeightProviderPort</ref> &gt;</type>
        <definition>std::weak_ptr&lt;const System::WeightProviderPort&gt; BipedalLocomotion::IK::QPInverseKinematics::getTaskWeightProvider</definition>
        <argsstring>(const std::string &amp;taskName) const override</argsstring>
        <name>getTaskWeightProvider</name>
        <reimplements refid="classBipedalLocomotion_1_1System_1_1ILinearTaskSolver_1a216c5bf1a5a79f6b4f0fad6939a8087b">getTaskWeightProvider</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>taskName</declname>
        </param>
        <briefdescription>
<para>Get the weightProvider associated to an already existing task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>taskName</parametername>
</parameternamelist>
<parameterdescription>
<para>name associated to the task </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a weak pointer to the weightProvider. If the task does not exist the pointer is not lockable </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/IK/QPInverseKinematics.h" line="137" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics_1a345b7b00600b13be14c74bdb007c5362" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::IK::QPInverseKinematics::finalize</definition>
        <argsstring>(const System::VariablesHandler &amp;handler) override</argsstring>
        <name>finalize</name>
        <reimplements refid="classBipedalLocomotion_1_1System_1_1ILinearTaskSolver_1aab3c4a0555f5e1f98f7fbda7c200a7ed">finalize</reimplements>
        <param>
          <type>const <ref refid="classBipedalLocomotion_1_1System_1_1VariablesHandler" kindref="compound">System::VariablesHandler</ref> &amp;</type>
          <declname>handler</declname>
        </param>
        <briefdescription>
<para>Finalize the IK. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handler</parametername>
</parameternamelist>
<parameterdescription>
<para>parameter handler. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>You should call this method after you add ALL the tasks. </para>
</simplesect>
<simplesect kind="return"><para>true in case of success, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/IK/QPInverseKinematics.h" line="145" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics_1a6e3605df43a7cb6f01807e9cffec0b6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::IK::QPInverseKinematics::initialize</definition>
        <argsstring>(std::weak_ptr&lt; const ParametersHandler::IParametersHandler &gt; handler) override</argsstring>
        <name>initialize</name>
        <reimplements refid="classBipedalLocomotion_1_1System_1_1Advanceable_1a6db247d3db83217a16e963d01f6bcb77">initialize</reimplements>
        <param>
          <type>std::weak_ptr&lt; const <ref refid="classBipedalLocomotion_1_1ParametersHandler_1_1IParametersHandler" kindref="compound">ParametersHandler::IParametersHandler</ref> &gt;</type>
          <declname>handler</declname>
        </param>
        <briefdescription>
<para>Initialize the inverse kinematics algorithm. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handler</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the IParametersHandler interface. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>the following parameters are required by the class <table rows="3" cols="4"><row>
<entry thead="yes" align='center'><para>Parameter Name   </para>
</entry><entry thead="yes" align='center'><para>Type   </para>
</entry><entry thead="yes" align='center'><para>Description   </para>
</entry><entry thead="yes" align='center'><para>Mandatory    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>robot_velocity_variable_name</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>string</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>Name of the variable contained in <computeroutput>VariablesHandler</computeroutput> describing the generalized robot velocity   </para>
</entry><entry thead="no" align='center'><para>Yes    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>verbosity</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>bool</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>Verbosity of the solver. Default value <computeroutput>false</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>No   </para>
</entry></row>
</table>
Where the generalized robot velocity is a vector containing the base spatial velocity (expressed in mixed representation) and the joint velocities. </para>
</simplesect>
<simplesect kind="return"><para>True in case of success, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/IK/QPInverseKinematics.h" line="160" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics_1aea4524325aeaa138f0953b5bbf56e5b6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; BipedalLocomotion::IK::QPInverseKinematics::getTaskNames</definition>
        <argsstring>() const override</argsstring>
        <name>getTaskNames</name>
        <reimplements refid="classBipedalLocomotion_1_1System_1_1ILinearTaskSolver_1a0b947d91a384c6ffab544b62857f181e">getTaskNames</reimplements>
        <briefdescription>
<para>Get a vector containing the name of the tasks. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>an std::vector containing all the names associated to the tasks </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/IK/QPInverseKinematics.h" line="266" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics_1a82818a7d4b208780d7ae1fb03b7bb38a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::IK::QPInverseKinematics::isOutputValid</definition>
        <argsstring>() const override</argsstring>
        <name>isOutputValid</name>
        <reimplements refid="classBipedalLocomotion_1_1System_1_1OutputPort_1ac50de29a6160baa2bba195af9d69430a">isOutputValid</reimplements>
        <briefdescription>
<para>Return true if the content of get is valid. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/IK/QPInverseKinematics.h" line="271" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics_1a7e89856750429fa6bc97d34845a1f153" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::IK::QPInverseKinematics::advance</definition>
        <argsstring>() override</argsstring>
        <name>advance</name>
        <reimplements refid="classBipedalLocomotion_1_1System_1_1Advanceable_1a67107e46e831d93f572558b541aab6d2">advance</reimplements>
        <briefdescription>
<para>Solve the inverse kinematics. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true in case of success and false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/IK/QPInverseKinematics.h" line="277" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics_1ac3382473c18f86c151e40e567b048b68" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>const State &amp;</type>
        <definition>const State&amp; BipedalLocomotion::IK::QPInverseKinematics::getOutput</definition>
        <argsstring>() const override</argsstring>
        <name>getOutput</name>
        <reimplements refid="classBipedalLocomotion_1_1System_1_1OutputPort_1a8c089ecf2dd8ff0fb2732233994b6cac">getOutput</reimplements>
        <briefdescription>
<para>Get the outcome of the optimization problem. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the state of the inverse kinematics. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/IK/QPInverseKinematics.h" line="283" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics_1a7fd5fd750763109e53b5369fd5517e86" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::weak_ptr&lt; Task &gt;</type>
        <definition>std::weak_ptr&lt;Task&gt; BipedalLocomotion::IK::QPInverseKinematics::getTask</definition>
        <argsstring>(const std::string &amp;name) const override</argsstring>
        <name>getTask</name>
        <reimplements refid="classBipedalLocomotion_1_1System_1_1ILinearTaskSolver_1a1025c001495c8dd9e700dd562add7fea">getTask</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Get a specific task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>name associated to the task. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a weak ptr associated to an existing task in the IK. If the task does not exist a nullptr is returned. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/IK/QPInverseKinematics.h" line="291" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics_1a516929da79680d1df8fe34d85dac5c3b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::string</type>
        <definition>std::string BipedalLocomotion::IK::QPInverseKinematics::toString</definition>
        <argsstring>() const override</argsstring>
        <name>toString</name>
        <reimplements refid="classBipedalLocomotion_1_1System_1_1ILinearTaskSolver_1afbd5b817d76ec0097386eec2bc5eb914">toString</reimplements>
        <briefdescription>
<para>Return the description of the InverseKinematics problem. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a string containing the description of the solver. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/IK/QPInverseKinematics.h" line="297" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics_1a0db3848338591bfe39376b7c4d7aefb9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>Eigen::Ref&lt; const Eigen::VectorXd &gt;</type>
        <definition>Eigen::Ref&lt;const Eigen::VectorXd&gt; BipedalLocomotion::IK::QPInverseKinematics::getRawSolution</definition>
        <argsstring>() const override</argsstring>
        <name>getRawSolution</name>
        <reimplements refid="classBipedalLocomotion_1_1System_1_1ILinearTaskSolver_1aab3cebfecafc57d2e8fc4f55d6f52b57">getRawSolution</reimplements>
        <briefdescription>
<para>Return the vector representing the entire solution of the <ref refid="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics" kindref="compound">QPInverseKinematics</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a vector containing the solution of the optimization problem </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/IK/QPInverseKinematics.h" line="303" column="16"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics_1a7583c2fe82491dd339c3ad02a0b95d87" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structBipedalLocomotion_1_1IK_1_1IntegrationBasedIKProblem" kindref="compound">IntegrationBasedIKProblem</ref></type>
        <definition>static IntegrationBasedIKProblem BipedalLocomotion::IK::QPInverseKinematics::build</definition>
        <argsstring>(std::weak_ptr&lt; const ParametersHandler::IParametersHandler &gt; handler, std::shared_ptr&lt; iDynTree::KinDynComputations &gt; kinDyn)</argsstring>
        <name>build</name>
        <param>
          <type>std::weak_ptr&lt; const <ref refid="classBipedalLocomotion_1_1ParametersHandler_1_1IParametersHandler" kindref="compound">ParametersHandler::IParametersHandler</ref> &gt;</type>
          <declname>handler</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; iDynTree::KinDynComputations &gt;</type>
          <declname>kinDyn</declname>
        </param>
        <briefdescription>
<para>Build the inverse kinematics solver. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>kinDyn</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer to an iDynTree::KinDynComputations object that will be shared among all the tasks. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>handler</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the IParametersHandler interface. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>the following parameters are required by the class <table rows="4" cols="5"><row>
<entry thead="yes" align='center'><para>Group   </para>
</entry><entry thead="yes" align='center'><para>Parameter Name   </para>
</entry><entry thead="yes" align='center'><para>Type   </para>
</entry><entry thead="yes" align='center'><para>Description   </para>
</entry><entry thead="yes" align='center'><para>Mandatory    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para></para>
</entry><entry thead="no" align='center'><para><computeroutput>tasks</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>vector&lt;string&gt;</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>Vector containing the list of the tasks considered in the IK.   </para>
</entry><entry thead="no" align='center'><para>Yes    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>IK</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>robot_velocity_variable_name</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>string</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>Name of the variable contained in <computeroutput>VariablesHandler</computeroutput> describing the generalized robot velocity   </para>
</entry><entry thead="no" align='center'><para>Yes    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>IK</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>verbosity</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>bool</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>Verbosity of the solver. Default value <computeroutput>false</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>No   </para>
</entry></row>
</table>
Where the generalized robot velocity is a vector containing the base spatialvelocity (expressed in mixed representation) and the joint velocities. For <bold>each</bold> task listed in the parameter <computeroutput>tasks</computeroutput> the user must specify all the parameters required by the task itself but <computeroutput>robot_velocity_variable_name</computeroutput> since is already specified in the <computeroutput>IK</computeroutput> group. Moreover the following parameters are required for each task. <table rows="4" cols="5"><row>
<entry thead="yes" align='center'><para>Group   </para>
</entry><entry thead="yes" align='center'><para>Parameter Name   </para>
</entry><entry thead="yes" align='center'><para>Type   </para>
</entry><entry thead="yes" align='center'><para>Description   </para>
</entry><entry thead="yes" align='center'><para>Mandatory    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>TASK_NAME</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>type</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>string</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>String representing the type of the task. The string should match the name of the C++ class.   </para>
</entry><entry thead="no" align='center'><para>Yes    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>TASK_NAME</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>priority</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>int</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>Priority associated to the task. (Check <ref refid="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics_1a7666e60ae056992a39f56eddd1134d75" kindref="member">QPInverseKinematics::addTask</ref> for further information)   </para>
</entry><entry thead="no" align='center'><para>Yes    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>TASK_NAME</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>weight_provider_type</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>string</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>String representing the type of the weight provider. The string should match the name of the C++ class. It is required only if the task is low priority. The default value in case of low priority task (<computeroutput>priority = 1</computeroutput>) is <computeroutput>ConstantWeightProvider</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>No   </para>
</entry></row>
</table>
Given the weight type specified by <computeroutput>weight_provider_type</computeroutput>, the user must specify all the parameters required by the provider in the <computeroutput>TASK_NAME</computeroutput> group handler <computeroutput>TASK_NAME</computeroutput> is a placeholder for the name of the task contained in the <computeroutput>tasks</computeroutput> list. </para>
</simplesect>
<simplesect kind="note"><para>The following <computeroutput>ini</computeroutput> file presents an example of the configuration that can be used to build the IK <programlisting filename=".ini"><codeline><highlight class="normal">tasks<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(&quot;COM_TASK&quot;,<sp/>&quot;RIGHT_FOOT_TASK&quot;,<sp/>&quot;LEFT_FOOT_TASK&quot;,<sp/>&quot;TORSO_TASK&quot;,<sp/>&quot;JOINT_REGULARIZATION_TASK&quot;)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">[IK]</highlight></codeline>
<codeline><highlight class="normal">robot_velocity_variable_name<sp/><sp/><sp/><sp/>robot_velocity</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">[COM_TASK]</highlight></codeline>
<codeline><highlight class="normal">type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CoMTask</highlight></codeline>
<codeline><highlight class="normal">kp_linear<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2.0</highlight></codeline>
<codeline><highlight class="normal">mask<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(true,<sp/>true,<sp/>true)</highlight></codeline>
<codeline><highlight class="normal">priority<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">[RIGHT_FOOT_TASK]</highlight></codeline>
<codeline><highlight class="normal">type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SE3Task</highlight></codeline>
<codeline><highlight class="normal">frame_name<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r_sole</highlight></codeline>
<codeline><highlight class="normal">kp_linear<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>7.0</highlight></codeline>
<codeline><highlight class="normal">kp_angular<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>5.0</highlight></codeline>
<codeline><highlight class="normal">priority<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">[LEFT_FOOT_TASK]</highlight></codeline>
<codeline><highlight class="normal">type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SE3Task</highlight></codeline>
<codeline><highlight class="normal">frame_name<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l_sole</highlight></codeline>
<codeline><highlight class="normal">kp_linear<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>7.0</highlight></codeline>
<codeline><highlight class="normal">kp_angular<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>5.0</highlight></codeline>
<codeline><highlight class="normal">priority<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">[JOINT_REGULARIZATION_TASK]</highlight></codeline>
<codeline><highlight class="normal">type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>JointTrackingTask</highlight></codeline>
<codeline><highlight class="normal">kp<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(5.0,<sp/>5.0,<sp/>5.0,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>5.0,<sp/>5.0,<sp/>5.0,<sp/>5.0,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>5.0,<sp/>5.0,<sp/>5.0,<sp/>5.0,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>5.0,<sp/>5.0,<sp/>5.0,<sp/>5.0,<sp/>5.0,<sp/>5.0,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>5.0,<sp/>5.0,<sp/>5.0,<sp/>5.0,<sp/>5.0,<sp/>5.0)</highlight></codeline>
<codeline><highlight class="normal">priority<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1</highlight></codeline>
<codeline><highlight class="normal">weight_provider_type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ConstantWeightProvider</highlight></codeline>
<codeline><highlight class="normal">weight<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1.0,<sp/>1.0,<sp/>1.0,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2.0,<sp/>2.0,<sp/>2.0,<sp/>2.0,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2.0,<sp/>2.0,<sp/>2.0,<sp/>2.0,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1.0,<sp/>1.0,<sp/>1.0,<sp/>1.0,<sp/>1.0,<sp/>1.0,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1.0,<sp/>1.0,<sp/>1.0,<sp/>1.0,<sp/>1.0,<sp/>1.0)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">[include<sp/>TORSO_TASK<sp/>&quot;./tasks/torso.ini&quot;]</highlight></codeline>
</programlisting> Where the file <computeroutput>./tasks/torso.ini</computeroutput> contains the definition of a low priority task whose weight is a <ref refid="classBipedalLocomotion_1_1ContinuousDynamicalSystem_1_1MultiStateWeightProvider" kindref="compound">BipedalLocomotion::ContinuousDynamicalSystem::MultiStateWeightProvider</ref>. Since <computeroutput>MultiStateWeightProvider</computeroutput> requires the definition of subgroups, an additional file is suggested as explained in: <ulink url="https://github.com/robotology/yarp/discussions/2563">https://github.com/robotology/yarp/discussions/2563</ulink> <programlisting filename=".ini"><codeline><highlight class="normal">type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SO3Task</highlight></codeline>
<codeline><highlight class="normal">frame_name<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>chest</highlight></codeline>
<codeline><highlight class="normal">kp_angular<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>5.0</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">weight_provider_type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MultiStateWeightProvider</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">states<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(&quot;STANCE&quot;,<sp/>&quot;WALKING&quot;)</highlight></codeline>
<codeline><highlight class="normal">sampling_time<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.01</highlight></codeline>
<codeline><highlight class="normal">settling_time<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>3.0</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">[STANCE]</highlight></codeline>
<codeline><highlight class="normal">name<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stance</highlight></codeline>
<codeline><highlight class="normal">weight<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0.1,<sp/>0.1,<sp/>0.1)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">[WALKING]</highlight></codeline>
<codeline><highlight class="normal">name<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>walking</highlight></codeline>
<codeline><highlight class="normal">weight<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(5.0,<sp/>5.0,<sp/>5.0)</highlight></codeline>
</programlisting> </para>
</simplesect>
<simplesect kind="return"><para>an <ref refid="structBipedalLocomotion_1_1IK_1_1IntegrationBasedIKProblem" kindref="compound">IntegrationBasedIKProblem</ref>. In case of issues an invalid <ref refid="structBipedalLocomotion_1_1IK_1_1IntegrationBasedIKProblem" kindref="compound">IntegrationBasedIKProblem</ref> will be returned. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/IK/QPInverseKinematics.h" line="259" column="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics" kindref="compound">QPInverseKinematics</ref> is a concrete class and implements an integration base inverse kinematics. </para>
    </briefdescription>
    <detaileddescription>
<para>The inverse kinematics is here implemented as Quadratic Programming (QP) problem. The user should set the desired task with the method <ref refid="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics_1a7666e60ae056992a39f56eddd1134d75" kindref="member">QPInverseKinematics::addTask</ref>. Each task has a given priority. Currently we support only priority equal to 0 or 1. If the task priority is set to 0 the task will be considered as hard task, thus treated as an equality constraint. If the priority is equal to 1 the task will be embedded in the cost function. The class is also able to treat inequality constraints. A possible usage of the IK can be found in &quot;Romualdi et al. A Benchmarking of DCM Based
Architectures for Position and Velocity Controlled Walking of Humanoid Robots&quot; <ulink url="https://doi.org/10.1109/HUMANOIDS.2018.8625025">https://doi.org/10.1109/HUMANOIDS.2018.8625025</ulink> Here you can find an example of the <ref refid="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics" kindref="compound">QPInverseKinematics</ref> class used as velocity controller or IK </para>
<sect2 id="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics_1qp_vc">
<title>Velocity Control</title>
<para>Here you can find an example of the <ref refid="classBipedalLocomotion_1_1IK_1_1QPFixedBaseInverseKinematics" kindref="compound">QPFixedBaseInverseKinematics</ref> interface used as a velocity controller. <linebreak/>
 <image type="html" name="https://user-images.githubusercontent.com/16744101/142453785-9e6f2b5e-dc82-417a-a5e3-bc8c61865d0b.png" alt="VelocityControl" inline="yes"></image>
 </para>
</sect2>
<sect2 id="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics_1qp_ik">
<title>Inverse Kinematics</title>
<para>If you want to use <ref refid="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics" kindref="compound">QPInverseKinematics</ref> as IK you need to integrate the output velocity. System::FloatingBaseSystemKinematics and System::Integrator classes can be used to integrate the output of the IK taking into account the geometrical structure of the configuration space ( <formula id="105">$ \mathbb{R}^3 \times SO(3) \times \mathbb{R}^n$</formula>) <linebreak/>
 <image type="html" name="https://user-images.githubusercontent.com/16744101/142453860-6bba2a7a-26af-48da-b04e-114314c6f67c.png" alt="InverseKinematics" inline="yes"></image>
 </para>
</sect2>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>BipedalLocomotion::IK::IntegrationBasedIK</label>
        <link refid="classBipedalLocomotion_1_1IK_1_1IntegrationBasedIK"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>BipedalLocomotion::System::InputPort&lt; _Input &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1InputPort"/>
      </node>
      <node id="7">
        <label>BipedalLocomotion::System::OutputPort&lt; _Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1OutputPort"/>
      </node>
      <node id="1">
        <label>BipedalLocomotion::IK::QPInverseKinematics</label>
        <link refid="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11">
        <label>BipedalLocomotion::IK::QPFixedBaseInverseKinematics</label>
        <link refid="classBipedalLocomotion_1_1IK_1_1QPFixedBaseInverseKinematics"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>BipedalLocomotion::System::Source&lt; _State &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Source"/>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="template-instance">
          <edgelabel>&lt; _State &gt;</edgelabel>
        </childnode>
      </node>
      <node id="9">
        <label>BipedalLocomotion::System::ILinearTaskSolver&lt; _Task, _State &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1ILinearTaskSolver"/>
        <childnode refid="10" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>BipedalLocomotion::System::Advanceable&lt; EmptySignal, Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Advanceable"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
        <childnode refid="8" relation="template-instance">
          <edgelabel>&lt; EmptySignal, Output &gt;</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>BipedalLocomotion::System::ILinearTaskSolver&lt; IKLinearTask, IntegrationBasedIKState &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1ILinearTaskSolver"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="9" relation="template-instance">
          <edgelabel>&lt; IKLinearTask, IntegrationBasedIKState &gt;</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>BipedalLocomotion::System::Source&lt; Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Source"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>BipedalLocomotion::System::Advanceable&lt; _Input, _Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Advanceable"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>BipedalLocomotion::IK::IntegrationBasedIK</label>
        <link refid="classBipedalLocomotion_1_1IK_1_1IntegrationBasedIK"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>BipedalLocomotion::System::InputPort&lt; _Input &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1InputPort"/>
      </node>
      <node id="7">
        <label>BipedalLocomotion::System::OutputPort&lt; _Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1OutputPort"/>
      </node>
      <node id="1">
        <label>BipedalLocomotion::IK::QPInverseKinematics</label>
        <link refid="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>BipedalLocomotion::System::Source&lt; _State &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Source"/>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="template-instance">
          <edgelabel>&lt; _State &gt;</edgelabel>
        </childnode>
      </node>
      <node id="9">
        <label>BipedalLocomotion::System::ILinearTaskSolver&lt; _Task, _State &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1ILinearTaskSolver"/>
        <childnode refid="10" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>BipedalLocomotion::System::Advanceable&lt; EmptySignal, Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Advanceable"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
        <childnode refid="8" relation="template-instance">
          <edgelabel>&lt; EmptySignal, Output &gt;</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>BipedalLocomotion::System::ILinearTaskSolver&lt; IKLinearTask, IntegrationBasedIKState &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1ILinearTaskSolver"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="9" relation="template-instance">
          <edgelabel>&lt; IKLinearTask, IntegrationBasedIKState &gt;</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>BipedalLocomotion::System::Source&lt; Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Source"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>BipedalLocomotion::System::Advanceable&lt; _Input, _Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Advanceable"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="BipedalLocomotion/IK/QPInverseKinematics.h" line="54" column="1" bodyfile="BipedalLocomotion/IK/QPInverseKinematics.h" bodystart="55" bodyend="304"/>
    <listofallmembers>
      <member refid="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics_1a7666e60ae056992a39f56eddd1134d75" prot="public" virt="non-virtual"><scope>BipedalLocomotion::IK::QPInverseKinematics</scope><name>addTask</name></member>
      <member refid="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics_1a2b0c765e65eb6875342f438560c99e6c" prot="public" virt="non-virtual"><scope>BipedalLocomotion::IK::QPInverseKinematics</scope><name>addTask</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1ILinearTaskSolver_1a2aa760519d2a9a20045d27ca97cc1d8f" prot="public" virt="pure-virtual" ambiguityscope="BipedalLocomotion::IK::IntegrationBasedIK::"><scope>BipedalLocomotion::IK::QPInverseKinematics</scope><name>addTask</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1ILinearTaskSolver_1aa120f4a6ec30a664c29b0acfcca7730d" prot="public" virt="pure-virtual" ambiguityscope="BipedalLocomotion::IK::IntegrationBasedIK::"><scope>BipedalLocomotion::IK::QPInverseKinematics</scope><name>addTask</name></member>
      <member refid="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics_1a7e89856750429fa6bc97d34845a1f153" prot="public" virt="virtual"><scope>BipedalLocomotion::IK::QPInverseKinematics</scope><name>advance</name></member>
      <member refid="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics_1a7583c2fe82491dd339c3ad02a0b95d87" prot="public" virt="non-virtual"><scope>BipedalLocomotion::IK::QPInverseKinematics</scope><name>build</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1a618ab786bb43814b3b3012b843fce93b" prot="public" virt="virtual"><scope>BipedalLocomotion::IK::QPInverseKinematics</scope><name>close</name></member>
      <member refid="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics_1a345b7b00600b13be14c74bdb007c5362" prot="public" virt="virtual"><scope>BipedalLocomotion::IK::QPInverseKinematics</scope><name>finalize</name></member>
      <member refid="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics_1ac3382473c18f86c151e40e567b048b68" prot="public" virt="virtual"><scope>BipedalLocomotion::IK::QPInverseKinematics</scope><name>getOutput</name></member>
      <member refid="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics_1a0db3848338591bfe39376b7c4d7aefb9" prot="public" virt="virtual"><scope>BipedalLocomotion::IK::QPInverseKinematics</scope><name>getRawSolution</name></member>
      <member refid="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics_1a7fd5fd750763109e53b5369fd5517e86" prot="public" virt="virtual"><scope>BipedalLocomotion::IK::QPInverseKinematics</scope><name>getTask</name></member>
      <member refid="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics_1aea4524325aeaa138f0953b5bbf56e5b6" prot="public" virt="virtual"><scope>BipedalLocomotion::IK::QPInverseKinematics</scope><name>getTaskNames</name></member>
      <member refid="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics_1a93ccdd021104e971a0741897124dd943" prot="public" virt="virtual"><scope>BipedalLocomotion::IK::QPInverseKinematics</scope><name>getTaskWeightProvider</name></member>
      <member refid="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics_1a6e3605df43a7cb6f01807e9cffec0b6c" prot="public" virt="virtual"><scope>BipedalLocomotion::IK::QPInverseKinematics</scope><name>initialize</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1a975a7ecbf38c917c7b72519581fc7dba" prot="public" virt="non-virtual"><scope>BipedalLocomotion::IK::QPInverseKinematics</scope><name>Input</name></member>
      <member refid="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics_1a82818a7d4b208780d7ae1fb03b7bb38a" prot="public" virt="virtual"><scope>BipedalLocomotion::IK::QPInverseKinematics</scope><name>isOutputValid</name></member>
      <member refid="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics_1ae07de2d2f2e45f7cab298d77c7a32037" prot="private" virt="non-virtual"><scope>BipedalLocomotion::IK::QPInverseKinematics</scope><name>m_pimpl</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1a69603f2c9c608815908425b5b8c2005c" prot="public" virt="non-virtual"><scope>BipedalLocomotion::IK::QPInverseKinematics</scope><name>Output</name></member>
      <member refid="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics_1a5e8f8d2855c94ef0539815664b65a0fb" prot="public" virt="non-virtual"><scope>BipedalLocomotion::IK::QPInverseKinematics</scope><name>QPInverseKinematics</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Source_1a472624c76d5e02e8ae16991cd77016ce" prot="public" virt="non-virtual"><scope>BipedalLocomotion::IK::QPInverseKinematics</scope><name>setInput</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1InputPort_1ad2637be5c9075a2d8f09fedc6a42d808" prot="public" virt="pure-virtual" ambiguityscope="Advanceable&lt; EmptySignal, Output &gt;::"><scope>BipedalLocomotion::IK::QPInverseKinematics</scope><name>setInput</name></member>
      <member refid="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics_1a8357aa4b53db64ac10d9065f98203320" prot="public" virt="virtual"><scope>BipedalLocomotion::IK::QPInverseKinematics</scope><name>setTaskWeight</name></member>
      <member refid="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics_1a418b0e0b18f2f99ca55b88829e031898" prot="public" virt="virtual"><scope>BipedalLocomotion::IK::QPInverseKinematics</scope><name>setTaskWeight</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1ILinearTaskSolver_1a770b4595f008dbc6ae50e2889639df12" prot="public" virt="non-virtual"><scope>BipedalLocomotion::IK::QPInverseKinematics</scope><name>State</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1ILinearTaskSolver_1a6d1cc19ae482b87b3f5dadefa1eb4e7b" prot="public" virt="non-virtual"><scope>BipedalLocomotion::IK::QPInverseKinematics</scope><name>Task</name></member>
      <member refid="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics_1a516929da79680d1df8fe34d85dac5c3b" prot="public" virt="virtual"><scope>BipedalLocomotion::IK::QPInverseKinematics</scope><name>toString</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1afae1137cba829874bab4a1d25d559896" prot="public" virt="virtual"><scope>BipedalLocomotion::IK::QPInverseKinematics</scope><name>~Advanceable</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1ILinearTaskSolver_1a3f7b647df3e41efe16c75754181f9931" prot="public" virt="virtual"><scope>BipedalLocomotion::IK::QPInverseKinematics</scope><name>~ILinearTaskSolver</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1InputPort_1ac9b58b0d2f6ae8821b873ed6f9817ccb" prot="public" virt="virtual"><scope>BipedalLocomotion::IK::QPInverseKinematics</scope><name>~InputPort</name></member>
      <member refid="classBipedalLocomotion_1_1IK_1_1IntegrationBasedIK_1af7a521cfc81b2f7d2e0c881858133478" prot="public" virt="virtual"><scope>BipedalLocomotion::IK::QPInverseKinematics</scope><name>~IntegrationBasedIK</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1OutputPort_1adcc49c38152c9204dcab4f8e87f68977" prot="public" virt="virtual"><scope>BipedalLocomotion::IK::QPInverseKinematics</scope><name>~OutputPort</name></member>
      <member refid="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics_1ab66c09c2e12b3496f357018d0818e831" prot="public" virt="virtual"><scope>BipedalLocomotion::IK::QPInverseKinematics</scope><name>~QPInverseKinematics</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Source_1acf12427433027de27b18e6e70ba0cae8" prot="public" virt="virtual"><scope>BipedalLocomotion::IK::QPInverseKinematics</scope><name>~Source</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
