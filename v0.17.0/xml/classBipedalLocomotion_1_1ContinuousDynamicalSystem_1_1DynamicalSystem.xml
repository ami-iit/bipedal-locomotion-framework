<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classBipedalLocomotion_1_1ContinuousDynamicalSystem_1_1DynamicalSystem" kind="class" language="C++" prot="public">
    <compoundname>BipedalLocomotion::ContinuousDynamicalSystem::DynamicalSystem</compoundname>
    <includes local="no">BipedalLocomotion/ContinuousDynamicalSystem/DynamicalSystem.h</includes>
    <templateparamlist>
      <param>
        <type>class _Derived</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classBipedalLocomotion_1_1ContinuousDynamicalSystem_1_1DynamicalSystem_1abe9655801c0f0a1391619325e571cd57" prot="public" static="no">
        <type>typename <ref refid="structBipedalLocomotion_1_1ContinuousDynamicalSystem_1_1internal_1_1traits" kindref="compound">internal::traits</ref>&lt; _Derived &gt;::<ref refid="classBipedalLocomotion_1_1ContinuousDynamicalSystem_1_1DynamicalSystem_1abe9655801c0f0a1391619325e571cd57" kindref="member">State</ref></type>
        <definition>using BipedalLocomotion::ContinuousDynamicalSystem::DynamicalSystem&lt; _Derived &gt;::State =  typename internal::traits&lt;_Derived&gt;::State</definition>
        <argsstring></argsstring>
        <name>State</name>
        <briefdescription>
<para>State space type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/ContinuousDynamicalSystem/DynamicalSystem.h" line="74" column="5" bodyfile="BipedalLocomotion/ContinuousDynamicalSystem/DynamicalSystem.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classBipedalLocomotion_1_1ContinuousDynamicalSystem_1_1DynamicalSystem_1a664a4e9ae349c0b14f83d98a90e52022" prot="public" static="no">
        <type>typename <ref refid="structBipedalLocomotion_1_1ContinuousDynamicalSystem_1_1internal_1_1traits" kindref="compound">internal::traits</ref>&lt; _Derived &gt;::<ref refid="classBipedalLocomotion_1_1ContinuousDynamicalSystem_1_1DynamicalSystem_1a664a4e9ae349c0b14f83d98a90e52022" kindref="member">StateDerivative</ref></type>
        <definition>using BipedalLocomotion::ContinuousDynamicalSystem::DynamicalSystem&lt; _Derived &gt;::StateDerivative =  typename internal::traits&lt;_Derived&gt;::StateDerivative</definition>
        <argsstring></argsstring>
        <name>StateDerivative</name>
        <briefdescription>
<para>State space derivative type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/ContinuousDynamicalSystem/DynamicalSystem.h" line="75" column="5" bodyfile="BipedalLocomotion/ContinuousDynamicalSystem/DynamicalSystem.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classBipedalLocomotion_1_1ContinuousDynamicalSystem_1_1DynamicalSystem_1a4c2a4bbac36e26c14571f79bfd6e4fa7" prot="public" static="no">
        <type>typename <ref refid="structBipedalLocomotion_1_1ContinuousDynamicalSystem_1_1internal_1_1traits" kindref="compound">internal::traits</ref>&lt; _Derived &gt;::<ref refid="classBipedalLocomotion_1_1ContinuousDynamicalSystem_1_1DynamicalSystem_1a4c2a4bbac36e26c14571f79bfd6e4fa7" kindref="member">Input</ref></type>
        <definition>using BipedalLocomotion::ContinuousDynamicalSystem::DynamicalSystem&lt; _Derived &gt;::Input =  typename internal::traits&lt;_Derived&gt;::Input</definition>
        <argsstring></argsstring>
        <name>Input</name>
        <briefdescription>
<para>Input type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/ContinuousDynamicalSystem/DynamicalSystem.h" line="78" column="5" bodyfile="BipedalLocomotion/ContinuousDynamicalSystem/DynamicalSystem.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classBipedalLocomotion_1_1ContinuousDynamicalSystem_1_1DynamicalSystem_1a9db00a84b6f839cffe896d25deb145d7" prot="private" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr _Derived &amp;</type>
        <definition>constexpr _Derived&amp; BipedalLocomotion::ContinuousDynamicalSystem::DynamicalSystem&lt; _Derived &gt;::derived</definition>
        <argsstring>()</argsstring>
        <name>derived</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/ContinuousDynamicalSystem/DynamicalSystem.h" line="64" column="24" bodyfile="BipedalLocomotion/ContinuousDynamicalSystem/DynamicalSystem.h" bodystart="64" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1ContinuousDynamicalSystem_1_1DynamicalSystem_1ad30d63f14c420d4c83a816cee4217966" prot="private" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr const _Derived &amp;</type>
        <definition>constexpr const _Derived&amp; BipedalLocomotion::ContinuousDynamicalSystem::DynamicalSystem&lt; _Derived &gt;::derived</definition>
        <argsstring>() const</argsstring>
        <name>derived</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/ContinuousDynamicalSystem/DynamicalSystem.h" line="68" column="30" bodyfile="BipedalLocomotion/ContinuousDynamicalSystem/DynamicalSystem.h" bodystart="68" bodyend="71"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classBipedalLocomotion_1_1ContinuousDynamicalSystem_1_1DynamicalSystem_1adea6b2fa40906bbc9198975e620e5ac4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::ContinuousDynamicalSystem::DynamicalSystem&lt; _Derived &gt;::initialize</definition>
        <argsstring>(std::weak_ptr&lt; const ParametersHandler::IParametersHandler &gt; handler)</argsstring>
        <name>initialize</name>
        <param>
          <type>std::weak_ptr&lt; const <ref refid="classBipedalLocomotion_1_1ParametersHandler_1_1IParametersHandler" kindref="compound">ParametersHandler::IParametersHandler</ref> &gt;</type>
          <declname>handler</declname>
        </param>
        <briefdescription>
<para>Initialize the Dynamical system. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handler</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the parameter handler. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true in case of success/false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/ContinuousDynamicalSystem/DynamicalSystem.h" line="101" column="10" bodyfile="BipedalLocomotion/ContinuousDynamicalSystem/DynamicalSystem.h" bodystart="140" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1ContinuousDynamicalSystem_1_1DynamicalSystem_1acafa2d1ec7a13c58736990e678e4ba47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::ContinuousDynamicalSystem::DynamicalSystem&lt; _Derived &gt;::setState</definition>
        <argsstring>(const State &amp;state)</argsstring>
        <name>setState</name>
        <param>
          <type>const <ref refid="classBipedalLocomotion_1_1ContinuousDynamicalSystem_1_1DynamicalSystem_1abe9655801c0f0a1391619325e571cd57" kindref="member">State</ref> &amp;</type>
          <declname>state</declname>
        </param>
        <briefdescription>
<para>Set the state of the dynamical system. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>In principle, there is no need to override this method. This value is stored in an internal buffer. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>state</parametername>
</parameternamelist>
<parameterdescription>
<para>tuple containing a const reference to the state elements. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true in case of success, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/ContinuousDynamicalSystem/DynamicalSystem.h" line="110" column="10" bodyfile="BipedalLocomotion/ContinuousDynamicalSystem/DynamicalSystem.h" bodystart="146" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1ContinuousDynamicalSystem_1_1DynamicalSystem_1a9f413dff797cbc805417478d3519a640" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classBipedalLocomotion_1_1ContinuousDynamicalSystem_1_1DynamicalSystem_1abe9655801c0f0a1391619325e571cd57" kindref="member">State</ref> &amp;</type>
        <definition>const DynamicalSystem&lt; _Derived &gt;::State &amp; BipedalLocomotion::ContinuousDynamicalSystem::DynamicalSystem&lt; _Derived &gt;::getState</definition>
        <argsstring>() const</argsstring>
        <name>getState</name>
        <briefdescription>
<para>Get the state to the dynamical system. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the current state of the dynamical system </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/ContinuousDynamicalSystem/DynamicalSystem.h" line="116" column="17" bodyfile="BipedalLocomotion/ContinuousDynamicalSystem/DynamicalSystem.h" bodystart="152" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1ContinuousDynamicalSystem_1_1DynamicalSystem_1a141c1d0475b59777195c3e02a12cd0bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::ContinuousDynamicalSystem::DynamicalSystem&lt; _Derived &gt;::setControlInput</definition>
        <argsstring>(const Input &amp;controlInput)</argsstring>
        <name>setControlInput</name>
        <param>
          <type>const <ref refid="classBipedalLocomotion_1_1ContinuousDynamicalSystem_1_1DynamicalSystem_1a4c2a4bbac36e26c14571f79bfd6e4fa7" kindref="member">Input</ref> &amp;</type>
          <declname>controlInput</declname>
        </param>
        <briefdescription>
<para>Set the control input to the dynamical system. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>In principle, there is no need to override this method. This value is stored in an internal buffer. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>controlInput</parametername>
</parameternamelist>
<parameterdescription>
<para>the value of the control input used to compute the system dynamics. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true in case of success, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/ContinuousDynamicalSystem/DynamicalSystem.h" line="125" column="10" bodyfile="BipedalLocomotion/ContinuousDynamicalSystem/DynamicalSystem.h" bodystart="158" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1ContinuousDynamicalSystem_1_1DynamicalSystem_1a464077f4f1329cc6a5697f1a874d6c48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::ContinuousDynamicalSystem::DynamicalSystem&lt; _Derived &gt;::dynamics</definition>
        <argsstring>(const std::chrono::nanoseconds &amp;time, StateDerivative &amp;stateDerivative)</argsstring>
        <name>dynamics</name>
        <param>
          <type>const std::chrono::nanoseconds &amp;</type>
          <declname>time</declname>
        </param>
        <param>
          <type><ref refid="classBipedalLocomotion_1_1ContinuousDynamicalSystem_1_1DynamicalSystem_1a664a4e9ae349c0b14f83d98a90e52022" kindref="member">StateDerivative</ref> &amp;</type>
          <declname>stateDerivative</declname>
        </param>
        <briefdescription>
<para>Computes the system dynamics. </para>
        </briefdescription>
        <detaileddescription>
<para>It return <formula id="174">$f(x, u, t)$</formula>. <simplesect kind="note"><para>The control input and the state have to be set separately with the methods setControlInput and setState. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>time</parametername>
</parameternamelist>
<parameterdescription>
<para>the time at witch the dynamics is computed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stateDynamics</parametername>
</parameternamelist>
<parameterdescription>
<para>tuple containing a reference to the element of the state derivative </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>Please implement the function in your custom dynamical system. </para>
</simplesect>
<simplesect kind="return"><para>true in case of success, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/ContinuousDynamicalSystem/DynamicalSystem.h" line="136" column="10" bodyfile="BipedalLocomotion/ContinuousDynamicalSystem/DynamicalSystem.h" bodystart="164" bodyend="167"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="classBipedalLocomotion_1_1ContinuousDynamicalSystem_1_1DynamicalSystem" kindref="compound">DynamicalSystem</ref> defines a continuous time dynamical system, i.e. </para>
    </briefdescription>
    <detaileddescription>
<para><formula id="175">$\dot{x}=f(x, u, t)$</formula>. Please inherit publicly from this class in order to define your custom dynamical system. Just be sure to call after your class definition <ref refid="traits_8h_1a0163896a87affbf02ec432fba8bb6f09" kindref="member">BLF_DEFINE_CONTINUOUS_DYNAMICAL_SYSTEM_INTERAL_STRUCTURE()</ref> For instance <programlisting filename=".cpp"><codeline><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceBipedalLocomotion" kindref="compound">BipedalLocomotion</ref></highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">ContinuousDynamicalSystem</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>forward<sp/>declaration</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Foo;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Here<sp/>we<sp/>define<sp/>the<sp/>internal<sp/>structure<sp/>of<sp/>the<sp/>Foo.<sp/>Notice<sp/>that<sp/>the<sp/>number<sp/>of<sp/>types<sp/>contained<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>FooStateType<sp/>must<sp/>be<sp/>equal<sp/>to<sp/>the<sp/>number<sp/>of<sp/>FooStateDerivetiveType<sp/>(This<sp/>is<sp/>required<sp/>by<sp/>the<sp/>integrator<sp/>class)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>FooStateType<sp/>=<sp/>Eigen::Vector2d;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>FooStateDerivativeType<sp/>=<sp/>Eigen::Vector2d;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>FooInputType<sp/>=<sp/>Eigen::Vector2d;</highlight></codeline>
<codeline><highlight class="normal"><ref refid="traits_8h_1a0163896a87affbf02ec432fba8bb6f09" kindref="member">BLF_DEFINE_CONTINUOUS_DYNAMICAL_SYSTEM_INTERAL_STRUCTURE</ref>(Foo,<sp/>(FooStateType),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(FooStateDerivativeType),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(FooInputType))</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceBipedalLocomotion" kindref="compound">BipedalLocomotion</ref></highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">ContinuousDynamicalSystem</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>class<sp/>definition</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Foo<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>DynamicalSystem&lt;Foo&gt;</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="13">
        <label>BipedalLocomotion::ContinuousDynamicalSystem::FloatingBaseSystemKinematics</label>
        <link refid="classBipedalLocomotion_1_1ContinuousDynamicalSystem_1_1FloatingBaseSystemKinematics"/>
        <childnode refid="12" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11">
        <label>BipedalLocomotion::ContinuousDynamicalSystem::FixedBaseDynamics</label>
        <link refid="classBipedalLocomotion_1_1ContinuousDynamicalSystem_1_1FixedBaseDynamics"/>
        <childnode refid="10" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>BipedalLocomotion::ContinuousDynamicalSystem::DynamicalSystem&lt; FloatingBaseDynamicsWithCompliantContacts &gt;</label>
        <link refid="classBipedalLocomotion_1_1ContinuousDynamicalSystem_1_1DynamicalSystem"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; FloatingBaseDynamicsWithCompliantContacts &gt;</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>BipedalLocomotion::ContinuousDynamicalSystem::DynamicalSystem&lt; _Derived &gt;</label>
        <link refid="classBipedalLocomotion_1_1ContinuousDynamicalSystem_1_1DynamicalSystem"/>
      </node>
      <node id="5">
        <label>BipedalLocomotion::ContinuousDynamicalSystem::LieGroupDynamics&lt; _Derived &gt;</label>
        <link refid="classBipedalLocomotion_1_1ContinuousDynamicalSystem_1_1LieGroupDynamics"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="12">
        <label>BipedalLocomotion::ContinuousDynamicalSystem::DynamicalSystem&lt; FloatingBaseSystemKinematics &gt;</label>
        <link refid="classBipedalLocomotion_1_1ContinuousDynamicalSystem_1_1DynamicalSystem"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; FloatingBaseSystemKinematics &gt;</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>BipedalLocomotion::ContinuousDynamicalSystem::FloatingBaseDynamicsWithCompliantContacts</label>
        <link refid="classBipedalLocomotion_1_1ContinuousDynamicalSystem_1_1FloatingBaseDynamicsWithCompliantContacts"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>BipedalLocomotion::ContinuousDynamicalSystem::DynamicalSystem&lt; LieGroupDynamics&lt; _Derived &gt; &gt;</label>
        <link refid="classBipedalLocomotion_1_1ContinuousDynamicalSystem_1_1DynamicalSystem"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; LieGroupDynamics&lt; _Derived &gt; &gt;</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>BipedalLocomotion::ContinuousDynamicalSystem::LinearTimeInvariantSystem</label>
        <link refid="classBipedalLocomotion_1_1ContinuousDynamicalSystem_1_1LinearTimeInvariantSystem"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="10">
        <label>BipedalLocomotion::ContinuousDynamicalSystem::DynamicalSystem&lt; FixedBaseDynamics &gt;</label>
        <link refid="classBipedalLocomotion_1_1ContinuousDynamicalSystem_1_1DynamicalSystem"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; FixedBaseDynamics &gt;</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>BipedalLocomotion::ContinuousDynamicalSystem::DynamicalSystem&lt; LinearTimeInvariantSystem &gt;</label>
        <link refid="classBipedalLocomotion_1_1ContinuousDynamicalSystem_1_1DynamicalSystem"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; LinearTimeInvariantSystem &gt;</edgelabel>
        </childnode>
      </node>
      <node id="9">
        <label>BipedalLocomotion::ContinuousDynamicalSystem::CentroidalDynamics</label>
        <link refid="classBipedalLocomotion_1_1ContinuousDynamicalSystem_1_1CentroidalDynamics"/>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>BipedalLocomotion::ContinuousDynamicalSystem::DynamicalSystem&lt; CentroidalDynamics &gt;</label>
        <link refid="classBipedalLocomotion_1_1ContinuousDynamicalSystem_1_1DynamicalSystem"/>
        <childnode refid="1" relation="template-instance">
          <edgelabel>&lt; CentroidalDynamics &gt;</edgelabel>
        </childnode>
      </node>
    </inheritancegraph>
    <location file="BipedalLocomotion/ContinuousDynamicalSystem/DynamicalSystem.h" line="62" column="12" bodyfile="BipedalLocomotion/ContinuousDynamicalSystem/DynamicalSystem.h" bodystart="63" bodyend="137"/>
    <listofallmembers>
      <member refid="classBipedalLocomotion_1_1ContinuousDynamicalSystem_1_1DynamicalSystem_1a9db00a84b6f839cffe896d25deb145d7" prot="private" virt="non-virtual"><scope>BipedalLocomotion::ContinuousDynamicalSystem::DynamicalSystem</scope><name>derived</name></member>
      <member refid="classBipedalLocomotion_1_1ContinuousDynamicalSystem_1_1DynamicalSystem_1ad30d63f14c420d4c83a816cee4217966" prot="private" virt="non-virtual"><scope>BipedalLocomotion::ContinuousDynamicalSystem::DynamicalSystem</scope><name>derived</name></member>
      <member refid="classBipedalLocomotion_1_1ContinuousDynamicalSystem_1_1DynamicalSystem_1a464077f4f1329cc6a5697f1a874d6c48" prot="public" virt="non-virtual"><scope>BipedalLocomotion::ContinuousDynamicalSystem::DynamicalSystem</scope><name>dynamics</name></member>
      <member refid="classBipedalLocomotion_1_1ContinuousDynamicalSystem_1_1DynamicalSystem_1a9f413dff797cbc805417478d3519a640" prot="public" virt="non-virtual"><scope>BipedalLocomotion::ContinuousDynamicalSystem::DynamicalSystem</scope><name>getState</name></member>
      <member refid="classBipedalLocomotion_1_1ContinuousDynamicalSystem_1_1DynamicalSystem_1adea6b2fa40906bbc9198975e620e5ac4" prot="public" virt="non-virtual"><scope>BipedalLocomotion::ContinuousDynamicalSystem::DynamicalSystem</scope><name>initialize</name></member>
      <member refid="classBipedalLocomotion_1_1ContinuousDynamicalSystem_1_1DynamicalSystem_1a4c2a4bbac36e26c14571f79bfd6e4fa7" prot="public" virt="non-virtual"><scope>BipedalLocomotion::ContinuousDynamicalSystem::DynamicalSystem</scope><name>Input</name></member>
      <member refid="classBipedalLocomotion_1_1ContinuousDynamicalSystem_1_1DynamicalSystem_1a141c1d0475b59777195c3e02a12cd0bb" prot="public" virt="non-virtual"><scope>BipedalLocomotion::ContinuousDynamicalSystem::DynamicalSystem</scope><name>setControlInput</name></member>
      <member refid="classBipedalLocomotion_1_1ContinuousDynamicalSystem_1_1DynamicalSystem_1acafa2d1ec7a13c58736990e678e4ba47" prot="public" virt="non-virtual"><scope>BipedalLocomotion::ContinuousDynamicalSystem::DynamicalSystem</scope><name>setState</name></member>
      <member refid="classBipedalLocomotion_1_1ContinuousDynamicalSystem_1_1DynamicalSystem_1abe9655801c0f0a1391619325e571cd57" prot="public" virt="non-virtual"><scope>BipedalLocomotion::ContinuousDynamicalSystem::DynamicalSystem</scope><name>State</name></member>
      <member refid="classBipedalLocomotion_1_1ContinuousDynamicalSystem_1_1DynamicalSystem_1a664a4e9ae349c0b14f83d98a90e52022" prot="public" virt="non-virtual"><scope>BipedalLocomotion::ContinuousDynamicalSystem::DynamicalSystem</scope><name>StateDerivative</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
