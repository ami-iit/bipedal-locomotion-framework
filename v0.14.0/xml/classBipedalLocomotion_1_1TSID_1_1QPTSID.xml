<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classBipedalLocomotion_1_1TSID_1_1QPTSID" kind="class" language="C++" prot="public">
    <compoundname>BipedalLocomotion::TSID::QPTSID</compoundname>
    <basecompoundref refid="classBipedalLocomotion_1_1TSID_1_1TaskSpaceInverseDynamics" prot="public" virt="non-virtual">BipedalLocomotion::TSID::TaskSpaceInverseDynamics</basecompoundref>
    <derivedcompoundref refid="classBipedalLocomotion_1_1TSID_1_1QPFixedBaseTSID" prot="public" virt="non-virtual">BipedalLocomotion::TSID::QPFixedBaseTSID</derivedcompoundref>
    <includes local="no">BipedalLocomotion/TSID/QPTSID.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classBipedalLocomotion_1_1TSID_1_1QPTSID_1adcd0eebc10d67fc9d188bc99abed7f7b" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; Impl &gt;</type>
        <definition>std::unique_ptr&lt;Impl&gt; BipedalLocomotion::TSID::QPTSID::m_pimpl</definition>
        <argsstring></argsstring>
        <name>m_pimpl</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/TSID/QPTSID.h" line="44" column="21" bodyfile="BipedalLocomotion/TSID/QPTSID.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classBipedalLocomotion_1_1TSID_1_1QPTSID_1adb8db0bf0a0d8ea5903dadadaf5fbdcf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BipedalLocomotion::TSID::QPTSID::QPTSID</definition>
        <argsstring>()</argsstring>
        <name>QPTSID</name>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/TSID/QPTSID.h" line="50" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1TSID_1_1QPTSID_1a3f17e23e66667d4480986e20f448f0d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual BipedalLocomotion::TSID::QPTSID::~QPTSID</definition>
        <argsstring>()</argsstring>
        <name>~QPTSID</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/TSID/QPTSID.h" line="55" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1TSID_1_1QPTSID_1ae9cafa680ca8f1138acf880c04181970" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::TSID::QPTSID::addTask</definition>
        <argsstring>(std::shared_ptr&lt; Task &gt; task, const std::string &amp;taskName, std::size_t priority, std::shared_ptr&lt; const System::WeightProviderPort &gt; weightProvider=nullptr) override</argsstring>
        <name>addTask</name>
        <param>
          <type>std::shared_ptr&lt; Task &gt;</type>
          <declname>task</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>taskName</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>priority</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; const <ref refid="ILinearTaskSolver_8h_1aa0b9c4f50fc80885f1a6401dba73ad50" kindref="member">System::WeightProviderPort</ref> &gt;</type>
          <declname>weightProvider</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Add a linear task in the solver. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>task</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a given linear task </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>taskName</parametername>
</parameternamelist>
<parameterdescription>
<para>unique name associated to the task. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>priority</parametername>
</parameternamelist>
<parameterdescription>
<para>Priority associated to the task. The lower the number the higher the priority. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weightProvider</parametername>
</parameternamelist>
<parameterdescription>
<para>Weight provider associated to the task. This parameter is optional. The default value is an object that does not contain any value. The user may avoid to pass a provider only if the priority of the task is equal to 0. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the task has been added to the solver. </para>
</simplesect>
<simplesect kind="warning"><para>The <ref refid="classBipedalLocomotion_1_1TSID_1_1QPTSID" kindref="compound">QPTSID</ref> cannot handle inequality tasks (please check Task::Type) with priority equal to 1. </para>
</simplesect>
<simplesect kind="warning"><para>The <ref refid="classBipedalLocomotion_1_1TSID_1_1QPTSID" kindref="compound">QPTSID</ref> can handle only priority equal to 0 and 1. 0 means high priority while 1 low priority. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/TSID/QPTSID.h" line="73" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1TSID_1_1QPTSID_1a876c8497d3bf307df0c9a4a3d0849aa4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::TSID::QPTSID::addTask</definition>
        <argsstring>(std::shared_ptr&lt; Task &gt; task, const std::string &amp;taskName, std::size_t priority, Eigen::Ref&lt; const Eigen::VectorXd &gt; weight) override</argsstring>
        <name>addTask</name>
        <param>
          <type>std::shared_ptr&lt; Task &gt;</type>
          <declname>task</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>taskName</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>priority</declname>
        </param>
        <param>
          <type>Eigen::Ref&lt; const Eigen::VectorXd &gt;</type>
          <declname>weight</declname>
        </param>
        <briefdescription>
<para>Add a linear task in the solver. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>task</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a given linear task </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>taskName</parametername>
</parameternamelist>
<parameterdescription>
<para>unique name associated to the task. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>priority</parametername>
</parameternamelist>
<parameterdescription>
<para>Priority associated to the task. The lower the number the higher the priority. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weight</parametername>
</parameternamelist>
<parameterdescription>
<para>Weight associated to the task. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the task has been added to the solver. </para>
</simplesect>
<simplesect kind="note"><para>The solver assumes the weight is a constant value. </para>
</simplesect>
<simplesect kind="warning"><para>The <ref refid="classBipedalLocomotion_1_1TSID_1_1QPTSID" kindref="compound">QPTSID</ref> cannot handle inequality tasks (please check Task::Type) with priority equal to 1. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/TSID/QPTSID.h" line="90" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1TSID_1_1QPTSID_1aae215634b3570c759197a08cf73dc787" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::TSID::QPTSID::setTaskWeight</definition>
        <argsstring>(const std::string &amp;taskName, std::shared_ptr&lt; const System::WeightProviderPort &gt; weightProvider) override</argsstring>
        <name>setTaskWeight</name>
        <reimplements refid="classBipedalLocomotion_1_1System_1_1ILinearTaskSolver_1a3de5b3fbd5d68247e799e4dd36f610cf">setTaskWeight</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>taskName</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; const <ref refid="ILinearTaskSolver_8h_1aa0b9c4f50fc80885f1a6401dba73ad50" kindref="member">System::WeightProviderPort</ref> &gt;</type>
          <declname>weightProvider</declname>
        </param>
        <briefdescription>
<para>Set the weightProvider associated to an already existing task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>taskName</parametername>
</parameternamelist>
<parameterdescription>
<para>name associated to the task </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weightProvider</parametername>
</parameternamelist>
<parameterdescription>
<para>new weight provider associated to the task. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the weight has been updated </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/TSID/QPTSID.h" line="101" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1TSID_1_1QPTSID_1a1350f108b174380ac457e31b32dc0aa5" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::TSID::QPTSID::setTaskWeight</definition>
        <argsstring>(const std::string &amp;taskName, Eigen::Ref&lt; const Eigen::VectorXd &gt; weight) override</argsstring>
        <name>setTaskWeight</name>
        <reimplements refid="classBipedalLocomotion_1_1System_1_1ILinearTaskSolver_1aaf4d7e4a163df3f4939d119f002302d6">setTaskWeight</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>taskName</declname>
        </param>
        <param>
          <type>Eigen::Ref&lt; const Eigen::VectorXd &gt;</type>
          <declname>weight</declname>
        </param>
        <briefdescription>
<para>Set the weight associated to an already existing task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>taskName</parametername>
</parameternamelist>
<parameterdescription>
<para>name associated to the task </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weight</parametername>
</parameternamelist>
<parameterdescription>
<para>new Weight associated to the task. A constant weight is assumed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the weight has been updated </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/TSID/QPTSID.h" line="110" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1TSID_1_1QPTSID_1a1384c7afc1b98be5d6964aa89ef8ce1f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::weak_ptr&lt; const <ref refid="ILinearTaskSolver_8h_1aa0b9c4f50fc80885f1a6401dba73ad50" kindref="member">System::WeightProviderPort</ref> &gt;</type>
        <definition>std::weak_ptr&lt;const System::WeightProviderPort&gt; BipedalLocomotion::TSID::QPTSID::getTaskWeightProvider</definition>
        <argsstring>(const std::string &amp;taskName) const override</argsstring>
        <name>getTaskWeightProvider</name>
        <reimplements refid="classBipedalLocomotion_1_1System_1_1ILinearTaskSolver_1a216c5bf1a5a79f6b4f0fad6939a8087b">getTaskWeightProvider</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>taskName</declname>
        </param>
        <briefdescription>
<para>Get the weightProvider associated to an already existing task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>taskName</parametername>
</parameternamelist>
<parameterdescription>
<para>name associated to the task </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a weak pointer to the weightProvider. If the task does not exist the pointer is not lockable </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/TSID/QPTSID.h" line="120" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1TSID_1_1QPTSID_1ab9f5f896dc418c0370f87a083bfd9c32" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; BipedalLocomotion::TSID::QPTSID::getTaskNames</definition>
        <argsstring>() const override</argsstring>
        <name>getTaskNames</name>
        <reimplements refid="classBipedalLocomotion_1_1System_1_1ILinearTaskSolver_1a0b947d91a384c6ffab544b62857f181e">getTaskNames</reimplements>
        <briefdescription>
<para>Get a vector containing the name of the tasks. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>an std::vector containing all the names associated to the tasks </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/TSID/QPTSID.h" line="126" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1TSID_1_1QPTSID_1a0f9c32fae276d489e803a942fafaf38e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::weak_ptr&lt; Task &gt;</type>
        <definition>std::weak_ptr&lt;Task&gt; BipedalLocomotion::TSID::QPTSID::getTask</definition>
        <argsstring>(const std::string &amp;name) const override</argsstring>
        <name>getTask</name>
        <reimplements refid="classBipedalLocomotion_1_1System_1_1ILinearTaskSolver_1a1025c001495c8dd9e700dd562add7fea">getTask</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Get a specific task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>name associated to the task. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a weak ptr associated to an existing task in the TSID. If the task does not exist a nullptr is returned. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/TSID/QPTSID.h" line="134" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1TSID_1_1QPTSID_1ae1aca3a936b802b5c90717a5c1a3f53f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::TSID::QPTSID::initialize</definition>
        <argsstring>(std::weak_ptr&lt; const ParametersHandler::IParametersHandler &gt; handler) override</argsstring>
        <name>initialize</name>
        <reimplements refid="classBipedalLocomotion_1_1System_1_1Advanceable_1a6db247d3db83217a16e963d01f6bcb77">initialize</reimplements>
        <param>
          <type>std::weak_ptr&lt; const <ref refid="classBipedalLocomotion_1_1ParametersHandler_1_1IParametersHandler" kindref="compound">ParametersHandler::IParametersHandler</ref> &gt;</type>
          <declname>handler</declname>
        </param>
        <briefdescription>
<para>Initialize the TSID algorithm. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handler</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the IParametersHandler interface.h </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>the following parameters are required by the class <table rows="5" cols="4"><row>
<entry thead="yes" align='center'><para>Parameter Name   </para>
</entry><entry thead="yes" align='center'><para>Type   </para>
</entry><entry thead="yes" align='center'><para>Description   </para>
</entry><entry thead="yes" align='center'><para>Mandatory    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>robot_acceleration_variable_name</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>string</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>Name of the variable contained in <computeroutput>VariablesHandler</computeroutput> describing the generalized robot acceleration   </para>
</entry><entry thead="no" align='center'><para>Yes    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>joint_torques_variable_name</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>string</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>Name of the variable contained in <computeroutput>VariablesHandler</computeroutput> describing the robot torque   </para>
</entry><entry thead="no" align='center'><para>Yes    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>contact_wrench_variables_name</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>vector&lt;string&gt;</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>List of the variables associated to the contact wrenches in the <computeroutput>VariablesHandler</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>Yes    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>verbosity</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>bool</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>Verbosity of the solver. Default value <computeroutput>false</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>No   </para>
</entry></row>
</table>
Where the generalized robot acceleration is a vector containing the base acceleration (expressed in mixed representation) and the joint accelerations, </para>
</simplesect>
<simplesect kind="return"><para>True in case of success, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/TSID/QPTSID.h" line="150" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1TSID_1_1QPTSID_1a1170659f577972b199a9e61d143da04e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::TSID::QPTSID::finalize</definition>
        <argsstring>(const System::VariablesHandler &amp;handler) override</argsstring>
        <name>finalize</name>
        <reimplements refid="classBipedalLocomotion_1_1System_1_1ILinearTaskSolver_1aab3c4a0555f5e1f98f7fbda7c200a7ed">finalize</reimplements>
        <param>
          <type>const <ref refid="classBipedalLocomotion_1_1System_1_1VariablesHandler" kindref="compound">System::VariablesHandler</ref> &amp;</type>
          <declname>handler</declname>
        </param>
        <briefdescription>
<para>Finalize the TSID. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handler</parametername>
</parameternamelist>
<parameterdescription>
<para>parameter handler. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>You should call this method after you add ALL the tasks. </para>
</simplesect>
<simplesect kind="return"><para>true in case of success, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/TSID/QPTSID.h" line="158" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1TSID_1_1QPTSID_1abc2defe1e3f95380a2788ffaec767ba1" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::TSID::QPTSID::advance</definition>
        <argsstring>() override</argsstring>
        <name>advance</name>
        <reimplements refid="classBipedalLocomotion_1_1System_1_1Advanceable_1a67107e46e831d93f572558b541aab6d2">advance</reimplements>
        <briefdescription>
<para>Solve the fixed base TSID. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true in case of success and false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/TSID/QPTSID.h" line="164" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1TSID_1_1QPTSID_1a483e2dca295dd4dad89f0c268c4afeaa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>const State &amp;</type>
        <definition>const State&amp; BipedalLocomotion::TSID::QPTSID::getOutput</definition>
        <argsstring>() const override</argsstring>
        <name>getOutput</name>
        <reimplements refid="classBipedalLocomotion_1_1System_1_1OutputPort_1a8c089ecf2dd8ff0fb2732233994b6cac">getOutput</reimplements>
        <briefdescription>
<para>Get the outcome of the optimization problem. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the state of the TSID. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/TSID/QPTSID.h" line="170" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1TSID_1_1QPTSID_1ae1312f6965a91d4b2472c30ff95c4e5c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::TSID::QPTSID::isOutputValid</definition>
        <argsstring>() const override</argsstring>
        <name>isOutputValid</name>
        <reimplements refid="classBipedalLocomotion_1_1System_1_1OutputPort_1ac50de29a6160baa2bba195af9d69430a">isOutputValid</reimplements>
        <briefdescription>
<para>Return true if the content of get is valid. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/TSID/QPTSID.h" line="175" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1TSID_1_1QPTSID_1a0875e576675b9f0c8dffbe231abb21cf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::string</type>
        <definition>std::string BipedalLocomotion::TSID::QPTSID::toString</definition>
        <argsstring>() const override</argsstring>
        <name>toString</name>
        <reimplements refid="classBipedalLocomotion_1_1System_1_1ILinearTaskSolver_1afbd5b817d76ec0097386eec2bc5eb914">toString</reimplements>
        <briefdescription>
<para>Return the description of the TSID problem. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/TSID/QPTSID.h" line="180" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1TSID_1_1QPTSID_1a29cac804112c38c5dc69267e9c6a5feb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>Eigen::Ref&lt; const Eigen::VectorXd &gt;</type>
        <definition>Eigen::Ref&lt;const Eigen::VectorXd&gt; BipedalLocomotion::TSID::QPTSID::getRawSolution</definition>
        <argsstring>() const override</argsstring>
        <name>getRawSolution</name>
        <reimplements refid="classBipedalLocomotion_1_1System_1_1ILinearTaskSolver_1aab3cebfecafc57d2e8fc4f55d6f52b57">getRawSolution</reimplements>
        <briefdescription>
<para>Return the vector representing the entire solution of the <ref refid="classBipedalLocomotion_1_1TSID_1_1QPTSID" kindref="compound">QPTSID</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a vector containing the solution of the optimization problem </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/TSID/QPTSID.h" line="186" column="16"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="classBipedalLocomotion_1_1TSID_1_1QPTSID" kindref="compound">QPTSID</ref> is a concrete class and implements a task space inverse dynamics. </para>
    </briefdescription>
    <detaileddescription>
<para>The TSID is here implemented as Quadratic Programming (QP) problem. The user should set the desired task with the method <ref refid="classBipedalLocomotion_1_1TSID_1_1QPTSID_1ae9cafa680ca8f1138acf880c04181970" kindref="member">QPTSID::addTask</ref>. Each task has a given priority. Currently we support only priority equal to 0 or 1. If the task priority is set to 0 the task will be considered as hard task, thus treated as an equality constraint. If the priority is equal to 1 the task will be embedded in the cost function. The class is also able to treat inequality constraints. A possible usage of the IK can be found in &quot;Romualdi et al. A Benchmarking of DCM-Based
Architectures for Position, Velocity and Torque-Controlled Humanoid Robots&quot; <ulink url="https://doi.org/10.1142/S0219843619500348">https://doi.org/10.1142/S0219843619500348</ulink> </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="6">
        <label>BipedalLocomotion::System::InputPort&lt; _Input &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1InputPort"/>
      </node>
      <node id="1">
        <label>BipedalLocomotion::TSID::QPTSID</label>
        <link refid="classBipedalLocomotion_1_1TSID_1_1QPTSID"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>BipedalLocomotion::System::ILinearTaskSolver&lt; TSIDLinearTask, TSIDState &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1ILinearTaskSolver"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="9" relation="template-instance">
          <edgelabel>&lt; TSIDLinearTask, TSIDState &gt;</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>BipedalLocomotion::System::OutputPort&lt; _Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1OutputPort"/>
      </node>
      <node id="10">
        <label>BipedalLocomotion::System::Source&lt; _State &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Source"/>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="template-instance">
          <edgelabel>&lt; _State &gt;</edgelabel>
        </childnode>
      </node>
      <node id="9">
        <label>BipedalLocomotion::System::ILinearTaskSolver&lt; _Task, _State &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1ILinearTaskSolver"/>
        <childnode refid="10" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>BipedalLocomotion::System::Advanceable&lt; EmptySignal, Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Advanceable"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
        <childnode refid="8" relation="template-instance">
          <edgelabel>&lt; EmptySignal, Output &gt;</edgelabel>
        </childnode>
      </node>
      <node id="11">
        <label>BipedalLocomotion::TSID::QPFixedBaseTSID</label>
        <link refid="classBipedalLocomotion_1_1TSID_1_1QPFixedBaseTSID"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>BipedalLocomotion::TSID::TaskSpaceInverseDynamics</label>
        <link refid="classBipedalLocomotion_1_1TSID_1_1TaskSpaceInverseDynamics"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>BipedalLocomotion::System::Source&lt; Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Source"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>BipedalLocomotion::System::Advanceable&lt; _Input, _Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Advanceable"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="6">
        <label>BipedalLocomotion::System::InputPort&lt; _Input &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1InputPort"/>
      </node>
      <node id="1">
        <label>BipedalLocomotion::TSID::QPTSID</label>
        <link refid="classBipedalLocomotion_1_1TSID_1_1QPTSID"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>BipedalLocomotion::System::ILinearTaskSolver&lt; TSIDLinearTask, TSIDState &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1ILinearTaskSolver"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="9" relation="template-instance">
          <edgelabel>&lt; TSIDLinearTask, TSIDState &gt;</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>BipedalLocomotion::System::OutputPort&lt; _Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1OutputPort"/>
      </node>
      <node id="10">
        <label>BipedalLocomotion::System::Source&lt; _State &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Source"/>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="template-instance">
          <edgelabel>&lt; _State &gt;</edgelabel>
        </childnode>
      </node>
      <node id="9">
        <label>BipedalLocomotion::System::ILinearTaskSolver&lt; _Task, _State &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1ILinearTaskSolver"/>
        <childnode refid="10" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>BipedalLocomotion::System::Advanceable&lt; EmptySignal, Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Advanceable"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
        <childnode refid="8" relation="template-instance">
          <edgelabel>&lt; EmptySignal, Output &gt;</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>BipedalLocomotion::TSID::TaskSpaceInverseDynamics</label>
        <link refid="classBipedalLocomotion_1_1TSID_1_1TaskSpaceInverseDynamics"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>BipedalLocomotion::System::Source&lt; Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Source"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
      <node id="8">
        <label>BipedalLocomotion::System::Advanceable&lt; _Input, _Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Advanceable"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="BipedalLocomotion/TSID/QPTSID.h" line="38" column="1" bodyfile="BipedalLocomotion/TSID/QPTSID.h" bodystart="39" bodyend="187"/>
    <listofallmembers>
      <member refid="classBipedalLocomotion_1_1TSID_1_1QPTSID_1ae9cafa680ca8f1138acf880c04181970" prot="public" virt="non-virtual"><scope>BipedalLocomotion::TSID::QPTSID</scope><name>addTask</name></member>
      <member refid="classBipedalLocomotion_1_1TSID_1_1QPTSID_1a876c8497d3bf307df0c9a4a3d0849aa4" prot="public" virt="non-virtual"><scope>BipedalLocomotion::TSID::QPTSID</scope><name>addTask</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1ILinearTaskSolver_1a2aa760519d2a9a20045d27ca97cc1d8f" prot="public" virt="pure-virtual" ambiguityscope="BipedalLocomotion::TSID::TaskSpaceInverseDynamics::"><scope>BipedalLocomotion::TSID::QPTSID</scope><name>addTask</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1ILinearTaskSolver_1aa120f4a6ec30a664c29b0acfcca7730d" prot="public" virt="pure-virtual" ambiguityscope="BipedalLocomotion::TSID::TaskSpaceInverseDynamics::"><scope>BipedalLocomotion::TSID::QPTSID</scope><name>addTask</name></member>
      <member refid="classBipedalLocomotion_1_1TSID_1_1QPTSID_1abc2defe1e3f95380a2788ffaec767ba1" prot="public" virt="virtual"><scope>BipedalLocomotion::TSID::QPTSID</scope><name>advance</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1a09ee5b41c77c6b626f4d5cb775065325" prot="public" virt="non-virtual"><scope>BipedalLocomotion::TSID::QPTSID</scope><name>Advanceable</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1aaeb3eba3073fbc844dea1eba4c9b68f3" prot="public" virt="non-virtual"><scope>BipedalLocomotion::TSID::QPTSID</scope><name>Advanceable</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1ac1549cb26bd896e27370e97b0795ba3f" prot="public" virt="non-virtual"><scope>BipedalLocomotion::TSID::QPTSID</scope><name>Advanceable</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1a618ab786bb43814b3b3012b843fce93b" prot="public" virt="virtual"><scope>BipedalLocomotion::TSID::QPTSID</scope><name>close</name></member>
      <member refid="classBipedalLocomotion_1_1TSID_1_1QPTSID_1a1170659f577972b199a9e61d143da04e" prot="public" virt="virtual"><scope>BipedalLocomotion::TSID::QPTSID</scope><name>finalize</name></member>
      <member refid="classBipedalLocomotion_1_1TSID_1_1QPTSID_1a483e2dca295dd4dad89f0c268c4afeaa" prot="public" virt="virtual"><scope>BipedalLocomotion::TSID::QPTSID</scope><name>getOutput</name></member>
      <member refid="classBipedalLocomotion_1_1TSID_1_1QPTSID_1a29cac804112c38c5dc69267e9c6a5feb" prot="public" virt="virtual"><scope>BipedalLocomotion::TSID::QPTSID</scope><name>getRawSolution</name></member>
      <member refid="classBipedalLocomotion_1_1TSID_1_1QPTSID_1a0f9c32fae276d489e803a942fafaf38e" prot="public" virt="virtual"><scope>BipedalLocomotion::TSID::QPTSID</scope><name>getTask</name></member>
      <member refid="classBipedalLocomotion_1_1TSID_1_1QPTSID_1ab9f5f896dc418c0370f87a083bfd9c32" prot="public" virt="virtual"><scope>BipedalLocomotion::TSID::QPTSID</scope><name>getTaskNames</name></member>
      <member refid="classBipedalLocomotion_1_1TSID_1_1QPTSID_1a1384c7afc1b98be5d6964aa89ef8ce1f" prot="public" virt="virtual"><scope>BipedalLocomotion::TSID::QPTSID</scope><name>getTaskWeightProvider</name></member>
      <member refid="classBipedalLocomotion_1_1TSID_1_1QPTSID_1ae1aca3a936b802b5c90717a5c1a3f53f" prot="public" virt="virtual"><scope>BipedalLocomotion::TSID::QPTSID</scope><name>initialize</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1a975a7ecbf38c917c7b72519581fc7dba" prot="public" virt="non-virtual"><scope>BipedalLocomotion::TSID::QPTSID</scope><name>Input</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1InputPort_1a27c614cb30c1e4b78e64791f4919dfa7" prot="public" virt="non-virtual"><scope>BipedalLocomotion::TSID::QPTSID</scope><name>InputPort</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1InputPort_1a74d1418613e89a7f2993ea936228a44a" prot="public" virt="non-virtual"><scope>BipedalLocomotion::TSID::QPTSID</scope><name>InputPort</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1InputPort_1a02ec5c947f1d2d83d2952c3b899cc58f" prot="public" virt="non-virtual"><scope>BipedalLocomotion::TSID::QPTSID</scope><name>InputPort</name></member>
      <member refid="classBipedalLocomotion_1_1TSID_1_1QPTSID_1ae1312f6965a91d4b2472c30ff95c4e5c" prot="public" virt="virtual"><scope>BipedalLocomotion::TSID::QPTSID</scope><name>isOutputValid</name></member>
      <member refid="classBipedalLocomotion_1_1TSID_1_1QPTSID_1adcd0eebc10d67fc9d188bc99abed7f7b" prot="private" virt="non-virtual"><scope>BipedalLocomotion::TSID::QPTSID</scope><name>m_pimpl</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Source_1a922e6eec2f74620c49f9fcd1ddf709ae" prot="public" virt="non-virtual"><scope>BipedalLocomotion::TSID::QPTSID</scope><name>operator=</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Source_1ad63e64dcad4c269263ecd20b2c81352b" prot="public" virt="non-virtual"><scope>BipedalLocomotion::TSID::QPTSID</scope><name>operator=</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1ae147cdee9ff9160a9dfe0d3e349a9aad" prot="public" virt="non-virtual" ambiguityscope="Advanceable&lt; EmptySignal, Output &gt;::"><scope>BipedalLocomotion::TSID::QPTSID</scope><name>operator=</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1adf0d9fc07bab0ec5d4db7f3a35816bf2" prot="public" virt="non-virtual" ambiguityscope="Advanceable&lt; EmptySignal, Output &gt;::"><scope>BipedalLocomotion::TSID::QPTSID</scope><name>operator=</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1InputPort_1a54f476d3c8d6d003fb714309ea6272aa" prot="public" virt="non-virtual" ambiguityscope="Advanceable&lt; EmptySignal, Output &gt;::BipedalLocomotion::System::InputPort::"><scope>BipedalLocomotion::TSID::QPTSID</scope><name>operator=</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1InputPort_1adb341b37472241b6da8b552166308d7b" prot="public" virt="non-virtual" ambiguityscope="Advanceable&lt; EmptySignal, Output &gt;::BipedalLocomotion::System::InputPort::"><scope>BipedalLocomotion::TSID::QPTSID</scope><name>operator=</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1OutputPort_1af5e15f5e4962a5c8e0f0c0a49adb9ca1" prot="public" virt="non-virtual" ambiguityscope="BipedalLocomotion::System::OutputPort::"><scope>BipedalLocomotion::TSID::QPTSID</scope><name>operator=</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1OutputPort_1ad5c6ce3ad7d2a064d7bb512fe0bc489e" prot="public" virt="non-virtual" ambiguityscope="BipedalLocomotion::System::OutputPort::"><scope>BipedalLocomotion::TSID::QPTSID</scope><name>operator=</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1a69603f2c9c608815908425b5b8c2005c" prot="public" virt="non-virtual"><scope>BipedalLocomotion::TSID::QPTSID</scope><name>Output</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1OutputPort_1a7c0d15e677a1935918fc747ba4c25ec1" prot="public" virt="non-virtual"><scope>BipedalLocomotion::TSID::QPTSID</scope><name>OutputPort</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1OutputPort_1a0a39b891749961d34507b4b591886741" prot="public" virt="non-virtual"><scope>BipedalLocomotion::TSID::QPTSID</scope><name>OutputPort</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1OutputPort_1a581340f280eca1890a8a7b2331761b57" prot="public" virt="non-virtual"><scope>BipedalLocomotion::TSID::QPTSID</scope><name>OutputPort</name></member>
      <member refid="classBipedalLocomotion_1_1TSID_1_1QPTSID_1adb8db0bf0a0d8ea5903dadadaf5fbdcf" prot="public" virt="non-virtual"><scope>BipedalLocomotion::TSID::QPTSID</scope><name>QPTSID</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Source_1a472624c76d5e02e8ae16991cd77016ce" prot="public" virt="non-virtual"><scope>BipedalLocomotion::TSID::QPTSID</scope><name>setInput</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1InputPort_1ad2637be5c9075a2d8f09fedc6a42d808" prot="public" virt="pure-virtual" ambiguityscope="Advanceable&lt; EmptySignal, Output &gt;::"><scope>BipedalLocomotion::TSID::QPTSID</scope><name>setInput</name></member>
      <member refid="classBipedalLocomotion_1_1TSID_1_1QPTSID_1aae215634b3570c759197a08cf73dc787" prot="public" virt="virtual"><scope>BipedalLocomotion::TSID::QPTSID</scope><name>setTaskWeight</name></member>
      <member refid="classBipedalLocomotion_1_1TSID_1_1QPTSID_1a1350f108b174380ac457e31b32dc0aa5" prot="public" virt="virtual"><scope>BipedalLocomotion::TSID::QPTSID</scope><name>setTaskWeight</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Source_1aa6af70cc2e04e6a7e011af3d968b3b4b" prot="public" virt="non-virtual"><scope>BipedalLocomotion::TSID::QPTSID</scope><name>Source</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Source_1a1c126531af21d485f09f297cb162c30a" prot="public" virt="non-virtual"><scope>BipedalLocomotion::TSID::QPTSID</scope><name>Source</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Source_1af0cf2abdf10e6594372a0b062fe4a8af" prot="public" virt="non-virtual"><scope>BipedalLocomotion::TSID::QPTSID</scope><name>Source</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1ILinearTaskSolver_1a770b4595f008dbc6ae50e2889639df12" prot="public" virt="non-virtual"><scope>BipedalLocomotion::TSID::QPTSID</scope><name>State</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1ILinearTaskSolver_1a6d1cc19ae482b87b3f5dadefa1eb4e7b" prot="public" virt="non-virtual"><scope>BipedalLocomotion::TSID::QPTSID</scope><name>Task</name></member>
      <member refid="classBipedalLocomotion_1_1TSID_1_1QPTSID_1a0875e576675b9f0c8dffbe231abb21cf" prot="public" virt="virtual"><scope>BipedalLocomotion::TSID::QPTSID</scope><name>toString</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1afae1137cba829874bab4a1d25d559896" prot="public" virt="virtual"><scope>BipedalLocomotion::TSID::QPTSID</scope><name>~Advanceable</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1ILinearTaskSolver_1a3f7b647df3e41efe16c75754181f9931" prot="public" virt="virtual"><scope>BipedalLocomotion::TSID::QPTSID</scope><name>~ILinearTaskSolver</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1InputPort_1ac9b58b0d2f6ae8821b873ed6f9817ccb" prot="public" virt="virtual"><scope>BipedalLocomotion::TSID::QPTSID</scope><name>~InputPort</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1OutputPort_1adcc49c38152c9204dcab4f8e87f68977" prot="public" virt="virtual"><scope>BipedalLocomotion::TSID::QPTSID</scope><name>~OutputPort</name></member>
      <member refid="classBipedalLocomotion_1_1TSID_1_1QPTSID_1a3f17e23e66667d4480986e20f448f0d8" prot="public" virt="virtual"><scope>BipedalLocomotion::TSID::QPTSID</scope><name>~QPTSID</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Source_1acf12427433027de27b18e6e70ba0cae8" prot="public" virt="virtual"><scope>BipedalLocomotion::TSID::QPTSID</scope><name>~Source</name></member>
      <member refid="classBipedalLocomotion_1_1TSID_1_1TaskSpaceInverseDynamics_1af67a42286571cd0263af0b22e7b32167" prot="public" virt="virtual"><scope>BipedalLocomotion::TSID::QPTSID</scope><name>~TaskSpaceInverseDynamics</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
