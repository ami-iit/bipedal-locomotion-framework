/**
 * @file KinDynWrapper.h
 * @authors Ines Sorrentino
 * @copyright 2023 Istituto Italiano di Tecnologia (IIT). This software may be modified and
 * distributed under the terms of the BSD-3-Clause license.
 */

#ifndef BIPEDAL_LOCOMOTION_ESTIMATORS_SUB_MODEL_KINDYN_WRAPPER_H
#define BIPEDAL_LOCOMOTION_ESTIMATORS_SUB_MODEL_KINDYN_WRAPPER_H

#include <map>

// iDynTree
#include <iDynTree/Core/EigenHelpers.h>
#include <iDynTree/KinDynComputations.h>

// Eigen
#include <Eigen/Dense>

// RDE
#include <BipedalLocomotion/Conversions/ManifConversions.h>
#include <BipedalLocomotion/Math/Wrench.h>
#include <BipedalLocomotion/RobotDynamicsEstimator/SubModel.h>

namespace BipedalLocomotion
{
namespace Estimators
{
namespace RobotDynamicsEstimator
{

/**
 * KinDynWrapper is a concrete class and implements a wrapper of the KinDynComputation class
 * from iDynTree. The class is used to take updated the sub-model kinematics and dynamics
 */

class KinDynWrapper : public iDynTree::KinDynComputations
{
    Eigen::VectorXd m_totalBaseJointTorques;
    Eigen::VectorXd m_totalJointTorques;
    Eigen::VectorXd m_generalizedBiasForces;
    Eigen::VectorXd m_FTvBaseDot;
    Eigen::VectorXd m_nuDot;
    Eigen::MatrixXd m_massMatrix;

public:
    /**
     * @brief setModel set the model and resize variables. The default frame velocity representation
     * is BODY FIXED.
     * @param model a SubModel object describing the robot model.
     * @return a boolean value saying if all the variables are initialized correctly.
     */
    bool setModel(const SubModel& model);

    /**
     * @brief forwardDynamics computes the forward dynamics only for the joints. The base
     * acceleration should be provided by the user.
     * @param motorTorqueAfterGearbox joint motor torques.
     * @param frictionTorques joint friction torques.
     * @param tauExt torques generated by external contacts.
     * @param baseAcceleration acceleration of the base.
     * @param jointAcceleration acceleration of the joints computed as forward dynamics.
     * @return true in case of success, false otherwise.
     */
    bool forwardDynamics(Eigen::Ref<const Eigen::VectorXd> motorTorqueAfterGearbox,
                         Eigen::Ref<const Eigen::VectorXd> frictionTorques,
                         Eigen::Ref<const Eigen::VectorXd> tauExt,
                         manif::SE3d::Tangent baseAcceleration,
                         Eigen::Ref<Eigen::VectorXd> jointAcceleration);

    /**
     * @brief forwardDynamics computes the forward dynamics.
     * @param motorTorqueAfterGearbox joint motor torques.
     * @param frictionTorques joint friction torques.
     * @param tauExt torques generated by external contacts.
     * @param nuDot acceleration of the base plus acceleration of the joints computed as forward
     * dynamics.
     * @return true in case of success, false otherwise.
     */
    bool forwardDynamics(Eigen::Ref<const Eigen::VectorXd> motorTorqueAfterGearbox,
                         Eigen::Ref<const Eigen::VectorXd> frictionTorques,
                         Eigen::Ref<const Eigen::VectorXd> tauExt,
                         Eigen::Ref<Eigen::VectorXd> nuDot);

    /**
     * @brief getNuDot get the base and joint accelerations computed as forward dynamics.
     * @return a Eigen::Vector of dimension `6 + nr_of_joints`.
     */
    Eigen::Ref<const Eigen::VectorXd> getNuDot();
};

} // namespace RobotDynamicsEstimator
} // namespace Estimators
} // namespace BipedalLocomotion

#endif // BIPEDAL_LOCOMOTION_ESTIMATORS_SUB_MODEL_KINDYN_WRAPPER_H
