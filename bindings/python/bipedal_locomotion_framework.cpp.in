/**
 * @file bipedal_locomotion.cpp.in
 * @authors Giulio Romualdi, Diego Ferigo
 * @copyright 2020 Istituto Italiano di Tecnologia (IIT). This software may be modified and
 * distributed under the terms of the BSD-3-Clause license.
 */

// clang-format off
#include <pybind11/pybind11.h>

#include <BipedalLocomotion/bindings/Math/Module.h>
#include <BipedalLocomotion/bindings/ParametersHandler/Module.h>
#include <BipedalLocomotion/bindings/TextLogging/Module.h>
#include <BipedalLocomotion/bindings/TextLogging/TextLogging.h>

@cmakeiftarget BipedalLocomotion::TextLogging && BipedalLocomotion::TextLoggingRosImplementation
#include <BipedalLocomotion/bindings/TextLogging/RosModule.h>
@endcmakeiftarget BipedalLocomotion::TextLogging && BipedalLocomotion::TextLoggingRosImplementation

@cmakeiftarget BipedalLocomotion::TextLogging && BipedalLocomotion::TextLoggingYarpImplementation
#include <BipedalLocomotion/bindings/TextLogging/YarpModule.h>
@endcmakeiftarget BipedalLocomotion::TextLogging && BipedalLocomotion::TextLoggingYarpImplementation

@cmakeiftarget BipedalLocomotion::ParametersHandler && BipedalLocomotion::ParametersHandlerYarpImplementation
#include <BipedalLocomotion/bindings/ParametersHandler/YarpModule.h>
@endcmakeiftarget BipedalLocomotion::ParametersHandler && BipedalLocomotion::ParametersHandlerYarpImplementation

@cmakeiftarget BipedalLocomotion::ParametersHandler && BipedalLocomotion::ParametersHandlerTomlImplementation
#include <BipedalLocomotion/bindings/ParametersHandler/TomlModule.h>
@endcmakeiftarget BipedalLocomotion::ParametersHandler && BipedalLocomotion::ParametersHandlerTomlImplementation

@cmakeiftarget BipedalLocomotion::System
#include <BipedalLocomotion/bindings/System/Module.h>
#include <BipedalLocomotion/bindings/System/Clock.h>
@endcmakeiftarget BipedalLocomotion::System

@cmakeiftarget BipedalLocomotion::System && BipedalLocomotion::SystemYarpImplementation
#include <BipedalLocomotion/bindings/System/YarpModule.h>
@endcmakeiftarget BipedalLocomotion::System && BipedalLocomotion::SystemYarpImplementation

@cmakeiftarget BipedalLocomotion::System && BipedalLocomotion::SystemRosImplementation
#include <BipedalLocomotion/bindings/System/RosModule.h>
@endcmakeiftarget BipedalLocomotion::System && BipedalLocomotion::SystemRosImplementation

@cmakeiftarget BipedalLocomotion::Contacts
#include <BipedalLocomotion/bindings/Contacts/Module.h>
@endcmakeiftarget BipedalLocomotion::Contacts

@cmakeiftarget BipedalLocomotion::Planners
#include <BipedalLocomotion/bindings/Planners/Module.h>
@endcmakeiftarget BipedalLocomotion::Planners

@cmakeiftarget BipedalLocomotion::Planners && BipedalLocomotion::Unicycle
#include <BipedalLocomotion/bindings/Planners/UnicycleModule.h>
@endcmakeiftarget BipedalLocomotion::Planners && BipedalLocomotion::Unicycle

@cmakeiftarget BipedalLocomotion::RobotInterface && BipedalLocomotion::RobotInterfaceYarpImplementation
#include <BipedalLocomotion/bindings/RobotInterface/Module.h>
@endcmakeiftarget BipedalLocomotion::RobotInterface && BipedalLocomotion::RobotInterfaceYarpImplementation

@cmakeiftarget BipedalLocomotion::RobotInterface && BipedalLocomotion::PerceptionInterface && BipedalLocomotion::RobotInterfaceYarpImplementation && BipedalLocomotion::PerceptionInterfaceYarpImplementation
#include <BipedalLocomotion/bindings/RobotInterface/PerceptionModule.h>
@endcmakeiftarget BipedalLocomotion::RobotInterface && BipedalLocomotion::PerceptionInterface && BipedalLocomotion::RobotInterfaceYarpImplementation && BipedalLocomotion::PerceptionInterfaceYarpImplementation

@cmakeiftarget BipedalLocomotion::FloatingBaseEstimators
#include <BipedalLocomotion/bindings/FloatingBaseEstimators/Module.h>
@endcmakeiftarget BipedalLocomotion::FloatingBaseEstimators

@cmakeiftarget BipedalLocomotion::IK
#include <BipedalLocomotion/bindings/IK/Module.h>
@endcmakeiftarget BipedalLocomotion::IK

@cmakeiftarget BipedalLocomotion::TSID
#include <BipedalLocomotion/bindings/TSID/Module.h>
@endcmakeiftarget BipedalLocomotion::TSID

@cmakeiftarget BipedalLocomotion::ManifConversions
#include <BipedalLocomotion/bindings/Conversions/Module.h>
@endcmakeiftarget BipedalLocomotion::ManifConversions

@cmakeiftarget BipedalLocomotion::YarpUtilities
#include <BipedalLocomotion/bindings/YarpUtilities/Module.h>
@endcmakeiftarget BipedalLocomotion::YarpUtilities

@cmakeiftarget BipedalLocomotion::ContinuousDynamicalSystem
#include <BipedalLocomotion/bindings/ContinuousDynamicalSystem/Module.h>
@endcmakeiftarget BipedalLocomotion::ContinuousDynamicalSystem

@cmakeiftarget BipedalLocomotion::ML
#include <BipedalLocomotion/bindings/ML/Module.h>
@endcmakeiftarget BipedalLocomotion::ML

@cmakeiftarget BipedalLocomotion::ReducedModelControllers
#include<BipedalLocomotion/bindings/ReducedModelControllers/Module.h>
@endcmakeiftarget BipedalLocomotion::ReducedModelControllers

@cmakeiftarget BipedalLocomotion::SimplifiedModelControllers
#include<BipedalLocomotion/bindings/SimplifiedModelControllers/Module.h>
@endcmakeiftarget BipedalLocomotion::SimplifiedModelControllers

@cmakeiftarget BipedalLocomotion::RobotDynamicsEstimator
#include<BipedalLocomotion/bindings/RobotDynamicsEstimator/Module.h>
@endcmakeiftarget BipedalLocomotion::RobotDynamicsEstimator

// Create the Python module
PYBIND11_MODULE(bindings, m)
{
    namespace py = ::pybind11;
    using namespace BipedalLocomotion;

    @cmakeiftarget BipedalLocomotion::ManifConversions
    py::module::import("manifpy");
    @endcmakeiftarget BipedalLocomotion::ManifConversions

    m.doc() = "BipedalLocomotionFramework bindings";

    py::module textLoggingModule = m.def_submodule("text_logging");
    bindings::TextLogging::CreateModule(textLoggingModule);
    bindings::CreateLogger(m);

    @cmakeiftarget BipedalLocomotion::TextLogging && BipedalLocomotion::TextLoggingRosImplementation
    bindings::TextLogging::CreateRosModule(textLoggingModule);
    @endcmakeiftarget BipedalLocomotion::TextLogging && BipedalLocomotion::TextLoggingRosImplementation

    @cmakeiftarget BipedalLocomotion::TextLogging && BipedalLocomotion::TextLoggingYarpImplementation
    bindings::TextLogging::CreateYarpModule(textLoggingModule);
    @endcmakeiftarget BipedalLocomotion::TextLogging && BipedalLocomotion::TextLoggingYarpImplementation

    py::module parametersHandlerModule = m.def_submodule("parameters_handler");
    bindings::ParametersHandler::CreateModule(parametersHandlerModule);

    @cmakeiftarget BipedalLocomotion::ParametersHandler && BipedalLocomotion::ParametersHandlerYarpImplementation
    bindings::ParametersHandler::CreateYarpModule(parametersHandlerModule);
    @endcmakeiftarget BipedalLocomotion::ParametersHandler && BipedalLocomotion::ParametersHandlerYarpImplementation

    @cmakeiftarget BipedalLocomotion::ParametersHandler && BipedalLocomotion::ParametersHandlerTomlImplementation
    bindings::ParametersHandler::CreateTomlModule(parametersHandlerModule);
    @endcmakeiftarget BipedalLocomotion::ParametersHandler && BipedalLocomotion::ParametersHandlerTomlImplementation

    py::module mathModule = m.def_submodule("math");
    bindings::Math::CreateModule(mathModule);

    @cmakeiftarget BipedalLocomotion::System
    py::module systemModule = m.def_submodule("system");
    bindings::System::CreateModule(systemModule);
    bindings::CreateClock(m);
    @endcmakeiftarget BipedalLocomotion::System

    @cmakeiftarget BipedalLocomotion::System && BipedalLocomotion::SystemYarpImplementation
    bindings::System::CreateYarpModule(systemModule);
    @endcmakeiftarget BipedalLocomotion::System && BipedalLocomotion::SystemYarpImplementation

    @cmakeiftarget BipedalLocomotion::System && BipedalLocomotion::SystemRosImplementation
    bindings::System::CreateRosModule(systemModule);
    @endcmakeiftarget BipedalLocomotion::System && BipedalLocomotion::SystemRosImplementation

    @cmakeiftarget BipedalLocomotion::Contacts
    py::module contactsModule = m.def_submodule("contacts");
    bindings::Contacts::CreateModule(contactsModule);
    @endcmakeiftarget BipedalLocomotion::Contacts

    @cmakeiftarget BipedalLocomotion::Planners
    py::module plannersModule = m.def_submodule("planners");
    bindings::Planners::CreateModule(plannersModule);
    @endcmakeiftarget BipedalLocomotion::Planners

    @cmakeiftarget BipedalLocomotion::Planners && BipedalLocomotion::Unicycle
    bindings::Planners::CreateUnicycleModule(plannersModule);
    @endcmakeiftarget BipedalLocomotion::Planners && BipedalLocomotion::Unicycle

    @cmakeiftarget BipedalLocomotion::RobotInterface && BipedalLocomotion::RobotInterfaceYarpImplementation
    py::module robotInterfaceModule = m.def_submodule("robot_interface");
    bindings::RobotInterface::CreateModule(robotInterfaceModule);
    @endcmakeiftarget BipedalLocomotion::RobotInterface && BipedalLocomotion::RobotInterfaceYarpImplementation

    @cmakeiftarget BipedalLocomotion::RobotInterface && BipedalLocomotion::PerceptionInterface && BipedalLocomotion::RobotInterfaceYarpImplementation && BipedalLocomotion::PerceptionInterfaceYarpImplementation
    bindings::RobotInterface::CreatePerceptionModule(robotInterfaceModule);
    @endcmakeiftarget BipedalLocomotion::RobotInterface && BipedalLocomotion::PerceptionInterface && BipedalLocomotion::RobotInterfaceYarpImplementation && BipedalLocomotion::PerceptionInterfaceYarpImplementation

    @cmakeiftarget BipedalLocomotion::FloatingBaseEstimators
    py::module floatingBaseEstimatorModule = m.def_submodule("floating_base_estimators");
    bindings::FloatingBaseEstimators::CreateModule(floatingBaseEstimatorModule);
    @endcmakeiftarget BipedalLocomotion::FloatingBaseEstimators

    @cmakeiftarget BipedalLocomotion::IK
    py::module ikModule = m.def_submodule("ik");
    bindings::IK::CreateModule(ikModule);
    @endcmakeiftarget BipedalLocomotion::IK

    @cmakeiftarget BipedalLocomotion::TSID
    py::module tsidModule = m.def_submodule("tsid");
    bindings::TSID::CreateModule(tsidModule);
    @endcmakeiftarget BipedalLocomotion::TSID

    @cmakeiftarget BipedalLocomotion::ManifConversions
    py::module conversionsModule = m.def_submodule("conversions");
    bindings::Conversions::CreateModule(conversionsModule);
    @endcmakeiftarget BipedalLocomotion::ManifConversions

    @cmakeiftarget BipedalLocomotion::YarpUtilities
    py::module yarpUtilitiesModule = m.def_submodule("yarp_utilities");
    bindings::YarpUtilities::CreateModule(yarpUtilitiesModule);
    @endcmakeiftarget BipedalLocomotion::YarpUtilities

    @cmakeiftarget BipedalLocomotion::ContinuousDynamicalSystem
    py::module continuousDynamicalSystemModule = m.def_submodule("continuous_dynamical_system");
    bindings::ContinuousDynamicalSystem::CreateModule(continuousDynamicalSystemModule);
    @endcmakeiftarget BipedalLocomotion::ContinuousDynamicalSystem

    @cmakeiftarget BipedalLocomotion::ML
    py::module mlModule = m.def_submodule("ml");
    bindings::ML::CreateModule(mlModule);
    @endcmakeiftarget BipedalLocomotion::ML

    @cmakeiftarget BipedalLocomotion::ReducedModelControllers
    py::module reducedModelControllersModule = m.def_submodule("reduced_model_controllers");
    bindings::ReducedModelControllers::CreateModule(reducedModelControllersModule);
    @endcmakeiftarget BipedalLocomotion::ReducedModelControllers

    @cmakeiftarget BipedalLocomotion::SimplifiedModelControllers
    py::module simplifiedModelControllersModule = m.def_submodule("simplified_model_controllers");
    bindings::SimplifiedModelControllers::CreateModule(simplifiedModelControllersModule);
    @endcmakeiftarget BipedalLocomotion::SimplifiedModelControllers

    @cmakeiftarget BipedalLocomotion::RobotDynamicsEstimator
    py::module robotDynamicsEstimatorModule = m.def_submodule("robot_dynamics_estimator");
    bindings::RobotDynamicsEstimator::CreateModule(robotDynamicsEstimatorModule);
    @endcmakeiftarget BipedalLocomotion::RobotDynamicsEstimator
}
