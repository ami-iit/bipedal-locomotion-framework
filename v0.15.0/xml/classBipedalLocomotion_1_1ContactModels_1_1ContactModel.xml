<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classBipedalLocomotion_1_1ContactModels_1_1ContactModel" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>BipedalLocomotion::ContactModels::ContactModel</compoundname>
    <derivedcompoundref refid="classBipedalLocomotion_1_1ContactModels_1_1ContinuousContactModel" prot="public" virt="non-virtual">BipedalLocomotion::ContactModels::ContinuousContactModel</derivedcompoundref>
    <includes local="no">BipedalLocomotion/ContactModels/ContactModel.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classBipedalLocomotion_1_1ContactModels_1_1ContactModel_1a6ff16fbfe49cbc6c6f25aa9ff1c361ea" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool BipedalLocomotion::ContactModels::ContactModel::m_isContactWrenchComputed</definition>
        <argsstring></argsstring>
        <name>m_isContactWrenchComputed</name>
        <briefdescription>
<para>If true the contact wrench has been already computed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/ContactModels/ContactModel.h" line="35" column="10" bodyfile="BipedalLocomotion/ContactModels/ContactModel.h" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBipedalLocomotion_1_1ContactModels_1_1ContactModel_1a31294b7f2db332fb66b587c6e827b98c" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool BipedalLocomotion::ContactModels::ContactModel::m_isAutonomousDynamicsComputed</definition>
        <argsstring></argsstring>
        <name>m_isAutonomousDynamicsComputed</name>
        <briefdescription>
<para>If true the autonomous dynamics has been already computed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/ContactModels/ContactModel.h" line="36" column="10" bodyfile="BipedalLocomotion/ContactModels/ContactModel.h" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBipedalLocomotion_1_1ContactModels_1_1ContactModel_1ab3b0143d73662cd78ca5a59aa9b71da7" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool BipedalLocomotion::ContactModels::ContactModel::m_isControlMatrixComputed</definition>
        <argsstring></argsstring>
        <name>m_isControlMatrixComputed</name>
        <briefdescription>
<para>If true the controllers matrix has been already computed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/ContactModels/ContactModel.h" line="38" column="10" bodyfile="BipedalLocomotion/ContactModels/ContactModel.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBipedalLocomotion_1_1ContactModels_1_1ContactModel_1a56e9bcb4ba48887c44546eb900109a3d" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool BipedalLocomotion::ContactModels::ContactModel::m_isRegressorComputed</definition>
        <argsstring></argsstring>
        <name>m_isRegressorComputed</name>
        <briefdescription>
<para>If true the regressor matrix has been already computed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/ContactModels/ContactModel.h" line="40" column="10" bodyfile="BipedalLocomotion/ContactModels/ContactModel.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classBipedalLocomotion_1_1ContactModels_1_1ContactModel_1a5b2a304b21d11aa33fbc142bf3df7a09" prot="protected" static="no" mutable="no">
        <type>iDynTree::Wrench</type>
        <definition>iDynTree::Wrench BipedalLocomotion::ContactModels::ContactModel::m_contactWrench</definition>
        <argsstring></argsstring>
        <name>m_contactWrench</name>
        <briefdescription>
<para>Contact wrench between the robot and the environment expressed in mixed representation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/ContactModels/ContactModel.h" line="43" column="22" bodyfile="BipedalLocomotion/ContactModels/ContactModel.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBipedalLocomotion_1_1ContactModels_1_1ContactModel_1ac5726d78eddc09226fca0918ba95a2b3" prot="protected" static="no" mutable="no">
        <type>iDynTree::Vector6</type>
        <definition>iDynTree::Vector6 BipedalLocomotion::ContactModels::ContactModel::m_autonomousDynamics</definition>
        <argsstring></argsstring>
        <name>m_autonomousDynamics</name>
        <briefdescription>
<para>Autonomous dynamics of the contact model rate of change (i.e. </para>
        </briefdescription>
        <detaileddescription>
<para>given a non linear system <formula id="161">$\dot{x} = f + g u$</formula> the autonomous dynamics is <emphasis>f</emphasis> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/ContactModels/ContactModel.h" line="48" column="23" bodyfile="BipedalLocomotion/ContactModels/ContactModel.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBipedalLocomotion_1_1ContactModels_1_1ContactModel_1aec467e76dcfa86c79a032ac50681e1c2" prot="protected" static="no" mutable="no">
        <type>iDynTree::Matrix6x6</type>
        <definition>iDynTree::Matrix6x6 BipedalLocomotion::ContactModels::ContactModel::m_controlMatrix</definition>
        <argsstring></argsstring>
        <name>m_controlMatrix</name>
        <briefdescription>
<para>Control matrix of the contact model rate of change (i.e. </para>
        </briefdescription>
        <detaileddescription>
<para>given a non linear system <formula id="161">$\dot{x} = f + g u$</formula> the control matrix is <emphasis>g</emphasis> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/ContactModels/ContactModel.h" line="52" column="25" bodyfile="BipedalLocomotion/ContactModels/ContactModel.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBipedalLocomotion_1_1ContactModels_1_1ContactModel_1ae3b910da58e5b45e825ef1a91d09b744" prot="protected" static="no" mutable="no">
        <type>iDynTree::MatrixDynSize</type>
        <definition>iDynTree::MatrixDynSize BipedalLocomotion::ContactModels::ContactModel::m_regressor</definition>
        <argsstring></argsstring>
        <name>m_regressor</name>
        <briefdescription>
<para>Contains the regressor of the contact model. </para>
        </briefdescription>
        <detaileddescription>
<para><formula id="162">$f = A \theta$</formula>, where <formula id="163">$f$</formula> is the contact wrench, <formula id="31">$A$</formula> the regressor and <formula id="164">$\theta$</formula> the parameters </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/ContactModels/ContactModel.h" line="56" column="29" bodyfile="BipedalLocomotion/ContactModels/ContactModel.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classBipedalLocomotion_1_1ContactModels_1_1ContactModel_1a31d0abb5a17c4a588fcc44f69e4998d5" prot="protected" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void BipedalLocomotion::ContactModels::ContactModel::computeContactWrench</definition>
        <argsstring>()=0</argsstring>
        <name>computeContactWrench</name>
        <reimplementedby refid="classBipedalLocomotion_1_1ContactModels_1_1ContinuousContactModel_1a0aa7c047aaf413fbe2b5c3b075f1eb15">computeContactWrench</reimplementedby>
        <briefdescription>
<para>Evaluate the contact wrench given a specific contact model. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/ContactModels/ContactModel.h" line="61" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1ContactModels_1_1ContactModel_1aad44bef7cb17c9803573180fbc4a920f" prot="protected" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void BipedalLocomotion::ContactModels::ContactModel::computeAutonomousDynamics</definition>
        <argsstring>()=0</argsstring>
        <name>computeAutonomousDynamics</name>
        <reimplementedby refid="classBipedalLocomotion_1_1ContactModels_1_1ContinuousContactModel_1a2b3674034e5a0c6d00f0a3fa9425f7d9">computeAutonomousDynamics</reimplementedby>
        <briefdescription>
<para>Evaluate the Autonomous System Dynamics of the derivative of a specific contact model. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/ContactModels/ContactModel.h" line="66" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1ContactModels_1_1ContactModel_1ae986c8d9d443cf8571deda56681550aa" prot="protected" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void BipedalLocomotion::ContactModels::ContactModel::computeControlMatrix</definition>
        <argsstring>()=0</argsstring>
        <name>computeControlMatrix</name>
        <reimplementedby refid="classBipedalLocomotion_1_1ContactModels_1_1ContinuousContactModel_1ab6a0fabd96b6b57fc3a52745d5e1d8d0">computeControlMatrix</reimplementedby>
        <briefdescription>
<para>Evaluate the Control Matrix of the derivative of a specific contact model. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/ContactModels/ContactModel.h" line="71" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1ContactModels_1_1ContactModel_1abad25d99dd98fd49d1c8178577c69a54" prot="protected" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void BipedalLocomotion::ContactModels::ContactModel::computeRegressor</definition>
        <argsstring>()=0</argsstring>
        <name>computeRegressor</name>
        <reimplementedby refid="classBipedalLocomotion_1_1ContactModels_1_1ContinuousContactModel_1a201e73d45ef7cec521d160292abccb3d">computeRegressor</reimplementedby>
        <briefdescription>
<para>Evaluate the regressor matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/ContactModels/ContactModel.h" line="76" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1ContactModels_1_1ContactModel_1ad443712019e10ffd779e06cf918f0bbf" prot="protected" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool BipedalLocomotion::ContactModels::ContactModel::initializePrivate</definition>
        <argsstring>(std::weak_ptr&lt; ParametersHandler::IParametersHandler &gt; handler)=0</argsstring>
        <name>initializePrivate</name>
        <reimplementedby refid="classBipedalLocomotion_1_1ContactModels_1_1ContinuousContactModel_1adf0c6695e60411663d225b6a74b0cc6f">initializePrivate</reimplementedby>
        <param>
          <type>std::weak_ptr&lt; <ref refid="classBipedalLocomotion_1_1ParametersHandler_1_1IParametersHandler" kindref="compound">ParametersHandler::IParametersHandler</ref> &gt;</type>
          <declname>handler</declname>
        </param>
        <briefdescription>
<para>Initialization of the class. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handler</parametername>
</parameternamelist>
<parameterdescription>
<para>std::weak_ptr to a parameter container. This class does not have the ownership of the container. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>the required parameters may depends on the particular implementation. An example can be found in BipedalLocomotionControllers::ContactModel::ContinuousContactmodel::initializePrivate </para>
</simplesect>
<simplesect kind="return"><para>true/false in case of success/failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/ContactModels/ContactModel.h" line="86" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1ContactModels_1_1ContactModel_1a2b7748c81a4ab550e1bd9d7d5eee931f" prot="protected" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void BipedalLocomotion::ContactModels::ContactModel::setStatePrivate</definition>
        <argsstring>(const iDynTree::Twist &amp;twist, const iDynTree::Transform &amp;transform)=0</argsstring>
        <name>setStatePrivate</name>
        <reimplementedby refid="classBipedalLocomotion_1_1ContactModels_1_1ContinuousContactModel_1ab62462b3477bd6e1d8c8caa06c0cc234">setStatePrivate</reimplementedby>
        <param>
          <type>const iDynTree::Twist &amp;</type>
          <declname>twist</declname>
        </param>
        <param>
          <type>const iDynTree::Transform &amp;</type>
          <declname>transform</declname>
        </param>
        <briefdescription>
<para>Set the internal state of the model. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/ContactModels/ContactModel.h" line="91" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1ContactModels_1_1ContactModel_1a3ee56d7d5d720334943daab1bbce0578" prot="protected" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void BipedalLocomotion::ContactModels::ContactModel::setNullForceTransformPrivate</definition>
        <argsstring>(const iDynTree::Transform &amp;transform)=0</argsstring>
        <name>setNullForceTransformPrivate</name>
        <reimplementedby refid="classBipedalLocomotion_1_1ContactModels_1_1ContinuousContactModel_1af714b7acf78e8fa5b22acc8853bac39a">setNullForceTransformPrivate</reimplementedby>
        <param>
          <type>const iDynTree::Transform &amp;</type>
          <declname>transform</declname>
        </param>
        <briefdescription>
<para>Set the null force transform. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/ContactModels/ContactModel.h" line="97" column="18"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classBipedalLocomotion_1_1ContactModels_1_1ContactModel_1aec684c55eabd6211a4c178271c641231" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::ContactModels::ContactModel::initialize</definition>
        <argsstring>(std::weak_ptr&lt; ParametersHandler::IParametersHandler &gt; handler)</argsstring>
        <name>initialize</name>
        <param>
          <type>std::weak_ptr&lt; <ref refid="classBipedalLocomotion_1_1ParametersHandler_1_1IParametersHandler" kindref="compound">ParametersHandler::IParametersHandler</ref> &gt;</type>
          <declname>handler</declname>
        </param>
        <briefdescription>
<para>Initialization of the class. </para>
        </briefdescription>
        <detaileddescription>
<para>Please call this method before evaluating any other function <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handler</parametername>
</parameternamelist>
<parameterdescription>
<para>std::weak_ptr to a parameter container. This class does not have the ownership of the container. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="warning"><para>std::weak_ptr models temporary ownership: when the handler is accessed only if it exists, the std::weak_ptr is converted in a std::shared_ptr. </para>
</simplesect>
<simplesect kind="note"><para>the required parameters may depends on the particular implementation. An example can be found in BipedalLocomotionControllers::ContactModel::ContinuousContactmodel::initializePrivate </para>
</simplesect>
<simplesect kind="return"><para>true/false in case of success/failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/ContactModels/ContactModel.h" line="110" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1ContactModels_1_1ContactModel_1a51c9f098f585b4249784a92163548129" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const iDynTree::Wrench &amp;</type>
        <definition>const iDynTree::Wrench&amp; BipedalLocomotion::ContactModels::ContactModel::getContactWrench</definition>
        <argsstring>()</argsstring>
        <name>getContactWrench</name>
        <briefdescription>
<para>Get and compute (only if it is necessary) the contact wrench. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the contact wrench expressed in mixed representation </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/ContactModels/ContactModel.h" line="116" column="28"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1ContactModels_1_1ContactModel_1a628acabb211dbf7337b2252791b63eed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const iDynTree::Vector6 &amp;</type>
        <definition>const iDynTree::Vector6&amp; BipedalLocomotion::ContactModels::ContactModel::getAutonomousDynamics</definition>
        <argsstring>()</argsstring>
        <name>getAutonomousDynamics</name>
        <briefdescription>
<para>Get and compute (only if it is necessary) the autonomous system dynamics. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the autonomous system dynamics at a given state </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/ContactModels/ContactModel.h" line="122" column="29"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1ContactModels_1_1ContactModel_1a88153915d404be1ad67e1429a4b4bf51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const iDynTree::Matrix6x6 &amp;</type>
        <definition>const iDynTree::Matrix6x6&amp; BipedalLocomotion::ContactModels::ContactModel::getControlMatrix</definition>
        <argsstring>()</argsstring>
        <name>getControlMatrix</name>
        <briefdescription>
<para>Get and compute (only if it is necessary) the control matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the control matrix at a given state </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/ContactModels/ContactModel.h" line="128" column="31"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1ContactModels_1_1ContactModel_1a1fb37ab2f967c20ceb657543c2bdc550" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const iDynTree::MatrixDynSize &amp;</type>
        <definition>const iDynTree::MatrixDynSize&amp; BipedalLocomotion::ContactModels::ContactModel::getRegressor</definition>
        <argsstring>()</argsstring>
        <name>getRegressor</name>
        <briefdescription>
<para>Get and compute (only if it is necessary) the regressor. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the regressor at a given state </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/ContactModels/ContactModel.h" line="134" column="35"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1ContactModels_1_1ContactModel_1a69f8339216cb9747cb67dc473e1afc7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BipedalLocomotion::ContactModels::ContactModel::setState</definition>
        <argsstring>(const iDynTree::Twist &amp;twist, const iDynTree::Transform &amp;transform)</argsstring>
        <name>setState</name>
        <param>
          <type>const iDynTree::Twist &amp;</type>
          <declname>twist</declname>
        </param>
        <param>
          <type>const iDynTree::Transform &amp;</type>
          <declname>transform</declname>
        </param>
        <briefdescription>
<para>Set the internal state of the model. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>the meaning of the parameters may depend on the particular implementation. An example can be found in BipedalLocomotionControllers::ContactModel::ContinuousContactmodel::setState </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/ContactModels/ContactModel.h" line="141" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1ContactModels_1_1ContactModel_1a5cf86bc458a5fe97a8d75414a894e730" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BipedalLocomotion::ContactModels::ContactModel::setNullForceTransform</definition>
        <argsstring>(const iDynTree::Transform &amp;transform)</argsstring>
        <name>setNullForceTransform</name>
        <param>
          <type>const iDynTree::Transform &amp;</type>
          <declname>transform</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/ContactModels/ContactModel.h" line="144" column="10"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="classBipedalLocomotion_1_1ContactModels_1_1ContactModel" kindref="compound">ContactModel</ref> is a generic implementation of a contact model. </para>
    </briefdescription>
    <detaileddescription>
<para>It computes the contact wrench between the robot and the environments. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>BipedalLocomotion::ContactModels::ContinuousContactModel</label>
        <link refid="classBipedalLocomotion_1_1ContactModels_1_1ContinuousContactModel"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>BipedalLocomotion::ContactModels::ContactModel</label>
        <link refid="classBipedalLocomotion_1_1ContactModels_1_1ContactModel"/>
      </node>
    </inheritancegraph>
    <location file="BipedalLocomotion/ContactModels/ContactModel.h" line="33" column="1" bodyfile="BipedalLocomotion/ContactModels/ContactModel.h" bodystart="34" bodyend="146"/>
    <listofallmembers>
      <member refid="classBipedalLocomotion_1_1ContactModels_1_1ContactModel_1aad44bef7cb17c9803573180fbc4a920f" prot="protected" virt="pure-virtual"><scope>BipedalLocomotion::ContactModels::ContactModel</scope><name>computeAutonomousDynamics</name></member>
      <member refid="classBipedalLocomotion_1_1ContactModels_1_1ContactModel_1a31d0abb5a17c4a588fcc44f69e4998d5" prot="protected" virt="pure-virtual"><scope>BipedalLocomotion::ContactModels::ContactModel</scope><name>computeContactWrench</name></member>
      <member refid="classBipedalLocomotion_1_1ContactModels_1_1ContactModel_1ae986c8d9d443cf8571deda56681550aa" prot="protected" virt="pure-virtual"><scope>BipedalLocomotion::ContactModels::ContactModel</scope><name>computeControlMatrix</name></member>
      <member refid="classBipedalLocomotion_1_1ContactModels_1_1ContactModel_1abad25d99dd98fd49d1c8178577c69a54" prot="protected" virt="pure-virtual"><scope>BipedalLocomotion::ContactModels::ContactModel</scope><name>computeRegressor</name></member>
      <member refid="classBipedalLocomotion_1_1ContactModels_1_1ContactModel_1a628acabb211dbf7337b2252791b63eed" prot="public" virt="non-virtual"><scope>BipedalLocomotion::ContactModels::ContactModel</scope><name>getAutonomousDynamics</name></member>
      <member refid="classBipedalLocomotion_1_1ContactModels_1_1ContactModel_1a51c9f098f585b4249784a92163548129" prot="public" virt="non-virtual"><scope>BipedalLocomotion::ContactModels::ContactModel</scope><name>getContactWrench</name></member>
      <member refid="classBipedalLocomotion_1_1ContactModels_1_1ContactModel_1a88153915d404be1ad67e1429a4b4bf51" prot="public" virt="non-virtual"><scope>BipedalLocomotion::ContactModels::ContactModel</scope><name>getControlMatrix</name></member>
      <member refid="classBipedalLocomotion_1_1ContactModels_1_1ContactModel_1a1fb37ab2f967c20ceb657543c2bdc550" prot="public" virt="non-virtual"><scope>BipedalLocomotion::ContactModels::ContactModel</scope><name>getRegressor</name></member>
      <member refid="classBipedalLocomotion_1_1ContactModels_1_1ContactModel_1aec684c55eabd6211a4c178271c641231" prot="public" virt="non-virtual"><scope>BipedalLocomotion::ContactModels::ContactModel</scope><name>initialize</name></member>
      <member refid="classBipedalLocomotion_1_1ContactModels_1_1ContactModel_1ad443712019e10ffd779e06cf918f0bbf" prot="protected" virt="pure-virtual"><scope>BipedalLocomotion::ContactModels::ContactModel</scope><name>initializePrivate</name></member>
      <member refid="classBipedalLocomotion_1_1ContactModels_1_1ContactModel_1ac5726d78eddc09226fca0918ba95a2b3" prot="protected" virt="non-virtual"><scope>BipedalLocomotion::ContactModels::ContactModel</scope><name>m_autonomousDynamics</name></member>
      <member refid="classBipedalLocomotion_1_1ContactModels_1_1ContactModel_1a5b2a304b21d11aa33fbc142bf3df7a09" prot="protected" virt="non-virtual"><scope>BipedalLocomotion::ContactModels::ContactModel</scope><name>m_contactWrench</name></member>
      <member refid="classBipedalLocomotion_1_1ContactModels_1_1ContactModel_1aec467e76dcfa86c79a032ac50681e1c2" prot="protected" virt="non-virtual"><scope>BipedalLocomotion::ContactModels::ContactModel</scope><name>m_controlMatrix</name></member>
      <member refid="classBipedalLocomotion_1_1ContactModels_1_1ContactModel_1a31294b7f2db332fb66b587c6e827b98c" prot="private" virt="non-virtual"><scope>BipedalLocomotion::ContactModels::ContactModel</scope><name>m_isAutonomousDynamicsComputed</name></member>
      <member refid="classBipedalLocomotion_1_1ContactModels_1_1ContactModel_1a6ff16fbfe49cbc6c6f25aa9ff1c361ea" prot="private" virt="non-virtual"><scope>BipedalLocomotion::ContactModels::ContactModel</scope><name>m_isContactWrenchComputed</name></member>
      <member refid="classBipedalLocomotion_1_1ContactModels_1_1ContactModel_1ab3b0143d73662cd78ca5a59aa9b71da7" prot="private" virt="non-virtual"><scope>BipedalLocomotion::ContactModels::ContactModel</scope><name>m_isControlMatrixComputed</name></member>
      <member refid="classBipedalLocomotion_1_1ContactModels_1_1ContactModel_1a56e9bcb4ba48887c44546eb900109a3d" prot="private" virt="non-virtual"><scope>BipedalLocomotion::ContactModels::ContactModel</scope><name>m_isRegressorComputed</name></member>
      <member refid="classBipedalLocomotion_1_1ContactModels_1_1ContactModel_1ae3b910da58e5b45e825ef1a91d09b744" prot="protected" virt="non-virtual"><scope>BipedalLocomotion::ContactModels::ContactModel</scope><name>m_regressor</name></member>
      <member refid="classBipedalLocomotion_1_1ContactModels_1_1ContactModel_1a5cf86bc458a5fe97a8d75414a894e730" prot="public" virt="non-virtual"><scope>BipedalLocomotion::ContactModels::ContactModel</scope><name>setNullForceTransform</name></member>
      <member refid="classBipedalLocomotion_1_1ContactModels_1_1ContactModel_1a3ee56d7d5d720334943daab1bbce0578" prot="protected" virt="pure-virtual"><scope>BipedalLocomotion::ContactModels::ContactModel</scope><name>setNullForceTransformPrivate</name></member>
      <member refid="classBipedalLocomotion_1_1ContactModels_1_1ContactModel_1a69f8339216cb9747cb67dc473e1afc7e" prot="public" virt="non-virtual"><scope>BipedalLocomotion::ContactModels::ContactModel</scope><name>setState</name></member>
      <member refid="classBipedalLocomotion_1_1ContactModels_1_1ContactModel_1a2b7748c81a4ab550e1bd9d7d5eee931f" prot="protected" virt="pure-virtual"><scope>BipedalLocomotion::ContactModels::ContactModel</scope><name>setStatePrivate</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
