<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classBipedalLocomotion_1_1Planners_1_1ConvexHullHelper" kind="class" language="C++" prot="public">
    <compoundname>BipedalLocomotion::Planners::ConvexHullHelper</compoundname>
    <includes local="no">BipedalLocomotion/Planners/ConvexHullHelper.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classBipedalLocomotion_1_1Planners_1_1ConvexHullHelper_1a7414a002fd51c7841ee1ab3069795da2" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; Impl &gt;</type>
        <definition>std::unique_ptr&lt;Impl&gt; BipedalLocomotion::Planners::ConvexHullHelper::m_pimpl</definition>
        <argsstring></argsstring>
        <name>m_pimpl</name>
        <briefdescription>
<para>Private implementation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Planners/ConvexHullHelper.h" line="36" column="21" bodyfile="BipedalLocomotion/Planners/ConvexHullHelper.h" bodystart="34" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classBipedalLocomotion_1_1Planners_1_1ConvexHullHelper_1ac5016cd529b0d3eb956fa3c02fde1e49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BipedalLocomotion::Planners::ConvexHullHelper::ConvexHullHelper</definition>
        <argsstring>()</argsstring>
        <name>ConvexHullHelper</name>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Planners/ConvexHullHelper.h" line="42" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Planners_1_1ConvexHullHelper_1a6ed645038b0bc78ac73f8246edfb78b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BipedalLocomotion::Planners::ConvexHullHelper::~ConvexHullHelper</definition>
        <argsstring>()</argsstring>
        <name>~ConvexHullHelper</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Planners/ConvexHullHelper.h" line="47" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Planners_1_1ConvexHullHelper_1a7a41c9d24801efeb40b1f878b06a43c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::Planners::ConvexHullHelper::buildConvexHull</definition>
        <argsstring>(Eigen::Ref&lt; const Eigen::MatrixXd &gt; points)</argsstring>
        <name>buildConvexHull</name>
        <param>
          <type>Eigen::Ref&lt; const Eigen::MatrixXd &gt;</type>
          <declname>points</declname>
        </param>
        <briefdescription>
<para>Given a set of points in <formula id="155">$ \mathbb{R} ^ n$</formula> the function build the convex hull. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>the points must belong to the same vectorial space. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>points</parametername>
</parameternamelist>
<parameterdescription>
<para>a matrix of the points that describes the convex hull. Each point is stored as column of the matrix. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true/false in case of success/failure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Planners/ConvexHullHelper.h" line="56" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Planners_1_1ConvexHullHelper_1a7ce6a8f456580e8abcee12c100d0068d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Ref&lt; const Eigen::MatrixXd &gt;</type>
        <definition>Eigen::Ref&lt;const Eigen::MatrixXd&gt; BipedalLocomotion::Planners::ConvexHullHelper::getA</definition>
        <argsstring>() const</argsstring>
        <name>getA</name>
        <briefdescription>
<para>Return the <formula id="156">$A$</formula> constraint matrix, such that <formula id="157">$ Ax \le b$</formula> iff the point <formula id="29">$x$</formula> is in the convex hull. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>Please call buildConvexHull before asking for <formula id="156">$A$</formula>. If the convex hull has not be built yet a reference to a 0-size matrix is returned. </para>
</simplesect>
<simplesect kind="return"><para>the constraint matrix. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Planners/ConvexHullHelper.h" line="65" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Planners_1_1ConvexHullHelper_1a4766ad4374ab2f8166e0da45c369d5ff" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Ref&lt; const Eigen::VectorXd &gt;</type>
        <definition>Eigen::Ref&lt;const Eigen::VectorXd&gt; BipedalLocomotion::Planners::ConvexHullHelper::getB</definition>
        <argsstring>() const</argsstring>
        <name>getB</name>
        <briefdescription>
<para>Return the <formula id="132">$b$</formula> constraint vector, such that <formula id="157">$ Ax \le b$</formula> iff the point <formula id="29">$x$</formula> is in the convex hull. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>Please call buildConvexHull before asking for <formula id="132">$b$</formula>. If the convex hull has not be built yet a reference to a 0-size vector is returned. </para>
</simplesect>
<simplesect kind="return"><para>the constraint vector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Planners/ConvexHullHelper.h" line="74" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Planners_1_1ConvexHullHelper_1a6e074f7a65e5a4f21abc308cad879254" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::Planners::ConvexHullHelper::doesPointBelongToConvexHull</definition>
        <argsstring>(Eigen::Ref&lt; const Eigen::VectorXd &gt; point) const</argsstring>
        <name>doesPointBelongToConvexHull</name>
        <param>
          <type>Eigen::Ref&lt; const Eigen::VectorXd &gt;</type>
          <declname>point</declname>
        </param>
        <briefdescription>
<para>Check if a point belong to the convex hull (The frontier of the set is also included). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if the point belongs to the convex hull false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Planners/ConvexHullHelper.h" line="80" column="10"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="classBipedalLocomotion_1_1Planners_1_1ConvexHullHelper" kindref="compound">ConvexHullHelper</ref> is an helper class that simplifies the building of a convex hull given a set of points that belongs to <formula id="153">$\mathbb{R} ^n$</formula>. </para>
    </briefdescription>
    <detaileddescription>
<para>The helper computes the vertex enumeration of the convex hull. Then it converts the V-representation of the convex polyhedron in the H-representation, i.e. it performs the convex-hull computation. The class can be used to retrieve the matrices and vectors that describes the Half space representation of the form: <formula id="154">\[ P = \left \{ x= \begin{bmatrix} x_1 &amp; ... &amp; x_d \end{bmatrix} ^ \top : b - A x \ge 0 \right \}. \]</formula> Where <formula id="132">$b$</formula> is a m-vector and A is a m x n real matrix. <simplesect kind="warning"><para>The <ref refid="classBipedalLocomotion_1_1Planners_1_1ConvexHullHelper" kindref="compound">ConvexHullHelper</ref> is based on the qhull library <ulink url="https://github.com/qhull/qhull">https://github.com/qhull/qhull</ulink> </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="BipedalLocomotion/Planners/ConvexHullHelper.h" line="32" column="1" bodyfile="BipedalLocomotion/Planners/ConvexHullHelper.h" bodystart="33" bodyend="81"/>
    <listofallmembers>
      <member refid="classBipedalLocomotion_1_1Planners_1_1ConvexHullHelper_1a7a41c9d24801efeb40b1f878b06a43c0" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Planners::ConvexHullHelper</scope><name>buildConvexHull</name></member>
      <member refid="classBipedalLocomotion_1_1Planners_1_1ConvexHullHelper_1ac5016cd529b0d3eb956fa3c02fde1e49" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Planners::ConvexHullHelper</scope><name>ConvexHullHelper</name></member>
      <member refid="classBipedalLocomotion_1_1Planners_1_1ConvexHullHelper_1a6e074f7a65e5a4f21abc308cad879254" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Planners::ConvexHullHelper</scope><name>doesPointBelongToConvexHull</name></member>
      <member refid="classBipedalLocomotion_1_1Planners_1_1ConvexHullHelper_1a7ce6a8f456580e8abcee12c100d0068d" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Planners::ConvexHullHelper</scope><name>getA</name></member>
      <member refid="classBipedalLocomotion_1_1Planners_1_1ConvexHullHelper_1a4766ad4374ab2f8166e0da45c369d5ff" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Planners::ConvexHullHelper</scope><name>getB</name></member>
      <member refid="classBipedalLocomotion_1_1Planners_1_1ConvexHullHelper_1a7414a002fd51c7841ee1ab3069795da2" prot="private" virt="non-virtual"><scope>BipedalLocomotion::Planners::ConvexHullHelper</scope><name>m_pimpl</name></member>
      <member refid="classBipedalLocomotion_1_1Planners_1_1ConvexHullHelper_1a6ed645038b0bc78ac73f8246edfb78b1" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Planners::ConvexHullHelper</scope><name>~ConvexHullHelper</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
