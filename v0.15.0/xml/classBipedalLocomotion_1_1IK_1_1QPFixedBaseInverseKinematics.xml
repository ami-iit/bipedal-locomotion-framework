<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classBipedalLocomotion_1_1IK_1_1QPFixedBaseInverseKinematics" kind="class" language="C++" prot="public">
    <compoundname>BipedalLocomotion::IK::QPFixedBaseInverseKinematics</compoundname>
    <basecompoundref refid="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics" prot="public" virt="non-virtual">BipedalLocomotion::IK::QPInverseKinematics</basecompoundref>
    <includes local="no">BipedalLocomotion/IK/QPFixedBaseInverseKinematics.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classBipedalLocomotion_1_1IK_1_1QPFixedBaseInverseKinematics_1a6f35902103d8adf4e220e41d0d78a4df" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; Impl &gt;</type>
        <definition>std::unique_ptr&lt;Impl&gt; BipedalLocomotion::IK::QPFixedBaseInverseKinematics::m_pimpl</definition>
        <argsstring></argsstring>
        <name>m_pimpl</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/IK/QPFixedBaseInverseKinematics.h" line="60" column="21" bodyfile="BipedalLocomotion/IK/QPFixedBaseInverseKinematics.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classBipedalLocomotion_1_1IK_1_1QPFixedBaseInverseKinematics_1a13a6aa95419b21a38032d8ed10d85b0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BipedalLocomotion::IK::QPFixedBaseInverseKinematics::QPFixedBaseInverseKinematics</definition>
        <argsstring>()</argsstring>
        <name>QPFixedBaseInverseKinematics</name>
        <briefdescription>
<para>Constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/IK/QPFixedBaseInverseKinematics.h" line="67" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1IK_1_1QPFixedBaseInverseKinematics_1a4433d5a3e4b17a8970f697a17b5c2fda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BipedalLocomotion::IK::QPFixedBaseInverseKinematics::~QPFixedBaseInverseKinematics</definition>
        <argsstring>()</argsstring>
        <name>~QPFixedBaseInverseKinematics</name>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/IK/QPFixedBaseInverseKinematics.h" line="72" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1IK_1_1QPFixedBaseInverseKinematics_1a6905bd4a457f7e5e7f7337340999e261" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::IK::QPFixedBaseInverseKinematics::initialize</definition>
        <argsstring>(std::weak_ptr&lt; const ParametersHandler::IParametersHandler &gt; handler) override</argsstring>
        <name>initialize</name>
        <reimplements refid="classBipedalLocomotion_1_1System_1_1Advanceable_1a6db247d3db83217a16e963d01f6bcb77">initialize</reimplements>
        <param>
          <type>std::weak_ptr&lt; const <ref refid="classBipedalLocomotion_1_1ParametersHandler_1_1IParametersHandler" kindref="compound">ParametersHandler::IParametersHandler</ref> &gt;</type>
          <declname>handler</declname>
        </param>
        <briefdescription>
<para>Initialize the IK algorithm. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handler</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the IParametersHandler interface.h </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>the following parameters are required by the class <table rows="3" cols="4"><row>
<entry thead="yes" align='center'><para>Parameter Name   </para>
</entry><entry thead="yes" align='center'><para>Type   </para>
</entry><entry thead="yes" align='center'><para>Description   </para>
</entry><entry thead="yes" align='center'><para>Mandatory    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>robot_velocity_variable_name</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>string</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>Name of the variable contained in <computeroutput>VariablesHandler</computeroutput> describing the generalized robot velocity   </para>
</entry><entry thead="no" align='center'><para>Yes    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><computeroutput>verbosity</computeroutput>   </para>
</entry><entry thead="no" align='center'><para><computeroutput>bool</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>Verbosity of the solver. Default value <computeroutput>false</computeroutput>   </para>
</entry><entry thead="no" align='center'><para>No   </para>
</entry></row>
</table>
Where the generalized robot velocity is a vector containing the base spatialvelocity (expressed in mixed representation) and the joint velocities. </para>
</simplesect>
<simplesect kind="return"><para>True in case of success, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/IK/QPFixedBaseInverseKinematics.h" line="86" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1IK_1_1QPFixedBaseInverseKinematics_1ac0f6f7be93f3959311aa3c10eb723524" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::IK::QPFixedBaseInverseKinematics::setKinDyn</definition>
        <argsstring>(std::shared_ptr&lt; iDynTree::KinDynComputations &gt; kinDyn)</argsstring>
        <name>setKinDyn</name>
        <param>
          <type>std::shared_ptr&lt; iDynTree::KinDynComputations &gt;</type>
          <declname>kinDyn</declname>
        </param>
        <briefdescription>
<para>Set the kinDynComputations object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>kinDyn</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a kinDynComputations object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True in case of success, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/IK/QPFixedBaseInverseKinematics.h" line="93" column="10"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="classBipedalLocomotion_1_1IK_1_1QPFixedBaseInverseKinematics" kindref="compound">QPFixedBaseInverseKinematics</ref> is specialization of <ref refid="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics" kindref="compound">QPInverseKinematics</ref> class in the case of fixed base system. </para>
    </briefdescription>
    <detaileddescription>
<para>The IK is here implemented as Quadratic Programming (QP) problem. The user should set the desired task with the method <ref refid="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics_1a7666e60ae056992a39f56eddd1134d75" kindref="member">QPFixedBaseInverseKinematics::addTask</ref>. Each task has a given priority. Currently we support only priority equal to 0 or 1. If the task priority is set to 0 the task will be considered as a hard task, thus treated as a constraint. If the priority is equal to 1 the task will be embedded in the cost function. The class is also able to treat inequality constraints. Note that this class considers just one contact wrench as we assume the external wrench acting on only the base link. Here you can find an example of the <ref refid="classBipedalLocomotion_1_1IK_1_1QPFixedBaseInverseKinematics" kindref="compound">QPFixedBaseInverseKinematics</ref> class used as velocity controller or IK </para>
<sect2 id="classBipedalLocomotion_1_1IK_1_1QPFixedBaseInverseKinematics_1qp_fixed_vc">
<title>Velocity Control</title>
<para>Here you can find an example of the <ref refid="classBipedalLocomotion_1_1IK_1_1QPFixedBaseInverseKinematics" kindref="compound">QPFixedBaseInverseKinematics</ref> interface used as a velocity controller. <linebreak/>
 <image type="html" name="https://user-images.githubusercontent.com/16744101/142453785-9e6f2b5e-dc82-417a-a5e3-bc8c61865d0b.png" alt="VelocityControl" inline="yes"></image>
 </para>
</sect2>
<sect2 id="classBipedalLocomotion_1_1IK_1_1QPFixedBaseInverseKinematics_1qp_fixed_ik">
<title>Inverse Kinematics</title>
<para>If you want to use <ref refid="classBipedalLocomotion_1_1IK_1_1QPFixedBaseInverseKinematics" kindref="compound">QPFixedBaseInverseKinematics</ref> as IK you need to integrate the output velocity. System::FloatingBaseSystemKinematics and System::Integrator classes can be used to integrate the output of the IK taking into account the geometrical structure of the configuration space ( <formula id="89">$ \mathbb{R}^3 \times SO(3) \times \mathbb{R}^n$</formula>) <linebreak/>
 <image type="html" name="https://user-images.githubusercontent.com/16744101/142453860-6bba2a7a-26af-48da-b04e-114314c6f67c.png" alt="InverseKinematics" inline="yes"></image>
 <simplesect kind="note"><para>If you want to solve the Inverse Dynamics for a floating base system please use <ref refid="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics" kindref="compound">QPInverseKinematics</ref>. </para>
</simplesect>
</para>
</sect2>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>BipedalLocomotion::IK::IntegrationBasedIK</label>
        <link refid="classBipedalLocomotion_1_1IK_1_1IntegrationBasedIK"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>BipedalLocomotion::System::InputPort&lt; _Input &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1InputPort"/>
      </node>
      <node id="8">
        <label>BipedalLocomotion::System::OutputPort&lt; _Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1OutputPort"/>
      </node>
      <node id="2">
        <label>BipedalLocomotion::IK::QPInverseKinematics</label>
        <link refid="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>BipedalLocomotion::IK::QPFixedBaseInverseKinematics</label>
        <link refid="classBipedalLocomotion_1_1IK_1_1QPFixedBaseInverseKinematics"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11">
        <label>BipedalLocomotion::System::Source&lt; _State &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Source"/>
        <childnode refid="9" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="template-instance">
          <edgelabel>&lt; _State &gt;</edgelabel>
        </childnode>
      </node>
      <node id="10">
        <label>BipedalLocomotion::System::ILinearTaskSolver&lt; _Task, _State &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1ILinearTaskSolver"/>
        <childnode refid="11" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>BipedalLocomotion::System::Advanceable&lt; EmptySignal, Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Advanceable"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
        <childnode refid="9" relation="template-instance">
          <edgelabel>&lt; EmptySignal, Output &gt;</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>BipedalLocomotion::System::ILinearTaskSolver&lt; IKLinearTask, IntegrationBasedIKState &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1ILinearTaskSolver"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
        <childnode refid="10" relation="template-instance">
          <edgelabel>&lt; IKLinearTask, IntegrationBasedIKState &gt;</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>BipedalLocomotion::System::Source&lt; Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Source"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>BipedalLocomotion::System::Advanceable&lt; _Input, _Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Advanceable"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>BipedalLocomotion::IK::IntegrationBasedIK</label>
        <link refid="classBipedalLocomotion_1_1IK_1_1IntegrationBasedIK"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>BipedalLocomotion::System::InputPort&lt; _Input &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1InputPort"/>
      </node>
      <node id="8">
        <label>BipedalLocomotion::System::OutputPort&lt; _Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1OutputPort"/>
      </node>
      <node id="2">
        <label>BipedalLocomotion::IK::QPInverseKinematics</label>
        <link refid="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>BipedalLocomotion::IK::QPFixedBaseInverseKinematics</label>
        <link refid="classBipedalLocomotion_1_1IK_1_1QPFixedBaseInverseKinematics"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="11">
        <label>BipedalLocomotion::System::Source&lt; _State &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Source"/>
        <childnode refid="9" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="template-instance">
          <edgelabel>&lt; _State &gt;</edgelabel>
        </childnode>
      </node>
      <node id="10">
        <label>BipedalLocomotion::System::ILinearTaskSolver&lt; _Task, _State &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1ILinearTaskSolver"/>
        <childnode refid="11" relation="public-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>BipedalLocomotion::System::Advanceable&lt; EmptySignal, Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Advanceable"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
        <childnode refid="9" relation="template-instance">
          <edgelabel>&lt; EmptySignal, Output &gt;</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>BipedalLocomotion::System::ILinearTaskSolver&lt; IKLinearTask, IntegrationBasedIKState &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1ILinearTaskSolver"/>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
        <childnode refid="10" relation="template-instance">
          <edgelabel>&lt; IKLinearTask, IntegrationBasedIKState &gt;</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>BipedalLocomotion::System::Source&lt; Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Source"/>
        <childnode refid="6" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>BipedalLocomotion::System::Advanceable&lt; _Input, _Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Advanceable"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="BipedalLocomotion/IK/QPFixedBaseInverseKinematics.h" line="54" column="1" bodyfile="BipedalLocomotion/IK/QPFixedBaseInverseKinematics.h" bodystart="55" bodyend="94"/>
    <listofallmembers>
      <member refid="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics_1a7666e60ae056992a39f56eddd1134d75" prot="public" virt="non-virtual"><scope>BipedalLocomotion::IK::QPFixedBaseInverseKinematics</scope><name>addTask</name></member>
      <member refid="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics_1a2b0c765e65eb6875342f438560c99e6c" prot="public" virt="non-virtual"><scope>BipedalLocomotion::IK::QPFixedBaseInverseKinematics</scope><name>addTask</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1ILinearTaskSolver_1a2aa760519d2a9a20045d27ca97cc1d8f" prot="public" virt="pure-virtual" ambiguityscope="BipedalLocomotion::IK::IntegrationBasedIK::"><scope>BipedalLocomotion::IK::QPFixedBaseInverseKinematics</scope><name>addTask</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1ILinearTaskSolver_1aa120f4a6ec30a664c29b0acfcca7730d" prot="public" virt="pure-virtual" ambiguityscope="BipedalLocomotion::IK::IntegrationBasedIK::"><scope>BipedalLocomotion::IK::QPFixedBaseInverseKinematics</scope><name>addTask</name></member>
      <member refid="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics_1a7e89856750429fa6bc97d34845a1f153" prot="public" virt="virtual"><scope>BipedalLocomotion::IK::QPFixedBaseInverseKinematics</scope><name>advance</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1a09ee5b41c77c6b626f4d5cb775065325" prot="public" virt="non-virtual"><scope>BipedalLocomotion::IK::QPFixedBaseInverseKinematics</scope><name>Advanceable</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1aaeb3eba3073fbc844dea1eba4c9b68f3" prot="public" virt="non-virtual"><scope>BipedalLocomotion::IK::QPFixedBaseInverseKinematics</scope><name>Advanceable</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1ac1549cb26bd896e27370e97b0795ba3f" prot="public" virt="non-virtual"><scope>BipedalLocomotion::IK::QPFixedBaseInverseKinematics</scope><name>Advanceable</name></member>
      <member refid="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics_1a7583c2fe82491dd339c3ad02a0b95d87" prot="public" virt="non-virtual"><scope>BipedalLocomotion::IK::QPFixedBaseInverseKinematics</scope><name>build</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1a618ab786bb43814b3b3012b843fce93b" prot="public" virt="virtual"><scope>BipedalLocomotion::IK::QPFixedBaseInverseKinematics</scope><name>close</name></member>
      <member refid="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics_1a345b7b00600b13be14c74bdb007c5362" prot="public" virt="virtual"><scope>BipedalLocomotion::IK::QPFixedBaseInverseKinematics</scope><name>finalize</name></member>
      <member refid="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics_1ac3382473c18f86c151e40e567b048b68" prot="public" virt="virtual"><scope>BipedalLocomotion::IK::QPFixedBaseInverseKinematics</scope><name>getOutput</name></member>
      <member refid="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics_1a0db3848338591bfe39376b7c4d7aefb9" prot="public" virt="virtual"><scope>BipedalLocomotion::IK::QPFixedBaseInverseKinematics</scope><name>getRawSolution</name></member>
      <member refid="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics_1a7fd5fd750763109e53b5369fd5517e86" prot="public" virt="virtual"><scope>BipedalLocomotion::IK::QPFixedBaseInverseKinematics</scope><name>getTask</name></member>
      <member refid="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics_1aea4524325aeaa138f0953b5bbf56e5b6" prot="public" virt="virtual"><scope>BipedalLocomotion::IK::QPFixedBaseInverseKinematics</scope><name>getTaskNames</name></member>
      <member refid="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics_1a93ccdd021104e971a0741897124dd943" prot="public" virt="virtual"><scope>BipedalLocomotion::IK::QPFixedBaseInverseKinematics</scope><name>getTaskWeightProvider</name></member>
      <member refid="classBipedalLocomotion_1_1IK_1_1QPFixedBaseInverseKinematics_1a6905bd4a457f7e5e7f7337340999e261" prot="public" virt="virtual"><scope>BipedalLocomotion::IK::QPFixedBaseInverseKinematics</scope><name>initialize</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1a975a7ecbf38c917c7b72519581fc7dba" prot="public" virt="non-virtual"><scope>BipedalLocomotion::IK::QPFixedBaseInverseKinematics</scope><name>Input</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1InputPort_1a27c614cb30c1e4b78e64791f4919dfa7" prot="public" virt="non-virtual"><scope>BipedalLocomotion::IK::QPFixedBaseInverseKinematics</scope><name>InputPort</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1InputPort_1a74d1418613e89a7f2993ea936228a44a" prot="public" virt="non-virtual"><scope>BipedalLocomotion::IK::QPFixedBaseInverseKinematics</scope><name>InputPort</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1InputPort_1a02ec5c947f1d2d83d2952c3b899cc58f" prot="public" virt="non-virtual"><scope>BipedalLocomotion::IK::QPFixedBaseInverseKinematics</scope><name>InputPort</name></member>
      <member refid="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics_1a82818a7d4b208780d7ae1fb03b7bb38a" prot="public" virt="virtual"><scope>BipedalLocomotion::IK::QPFixedBaseInverseKinematics</scope><name>isOutputValid</name></member>
      <member refid="classBipedalLocomotion_1_1IK_1_1QPFixedBaseInverseKinematics_1a6f35902103d8adf4e220e41d0d78a4df" prot="private" virt="non-virtual"><scope>BipedalLocomotion::IK::QPFixedBaseInverseKinematics</scope><name>m_pimpl</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Source_1a922e6eec2f74620c49f9fcd1ddf709ae" prot="public" virt="non-virtual"><scope>BipedalLocomotion::IK::QPFixedBaseInverseKinematics</scope><name>operator=</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Source_1ad63e64dcad4c269263ecd20b2c81352b" prot="public" virt="non-virtual"><scope>BipedalLocomotion::IK::QPFixedBaseInverseKinematics</scope><name>operator=</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1ae147cdee9ff9160a9dfe0d3e349a9aad" prot="public" virt="non-virtual" ambiguityscope="Advanceable&lt; EmptySignal, Output &gt;::"><scope>BipedalLocomotion::IK::QPFixedBaseInverseKinematics</scope><name>operator=</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1adf0d9fc07bab0ec5d4db7f3a35816bf2" prot="public" virt="non-virtual" ambiguityscope="Advanceable&lt; EmptySignal, Output &gt;::"><scope>BipedalLocomotion::IK::QPFixedBaseInverseKinematics</scope><name>operator=</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1InputPort_1a54f476d3c8d6d003fb714309ea6272aa" prot="public" virt="non-virtual" ambiguityscope="Advanceable&lt; EmptySignal, Output &gt;::BipedalLocomotion::System::InputPort::"><scope>BipedalLocomotion::IK::QPFixedBaseInverseKinematics</scope><name>operator=</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1InputPort_1adb341b37472241b6da8b552166308d7b" prot="public" virt="non-virtual" ambiguityscope="Advanceable&lt; EmptySignal, Output &gt;::BipedalLocomotion::System::InputPort::"><scope>BipedalLocomotion::IK::QPFixedBaseInverseKinematics</scope><name>operator=</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1OutputPort_1af5e15f5e4962a5c8e0f0c0a49adb9ca1" prot="public" virt="non-virtual" ambiguityscope="BipedalLocomotion::System::OutputPort::"><scope>BipedalLocomotion::IK::QPFixedBaseInverseKinematics</scope><name>operator=</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1OutputPort_1ad5c6ce3ad7d2a064d7bb512fe0bc489e" prot="public" virt="non-virtual" ambiguityscope="BipedalLocomotion::System::OutputPort::"><scope>BipedalLocomotion::IK::QPFixedBaseInverseKinematics</scope><name>operator=</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1a69603f2c9c608815908425b5b8c2005c" prot="public" virt="non-virtual"><scope>BipedalLocomotion::IK::QPFixedBaseInverseKinematics</scope><name>Output</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1OutputPort_1a7c0d15e677a1935918fc747ba4c25ec1" prot="public" virt="non-virtual"><scope>BipedalLocomotion::IK::QPFixedBaseInverseKinematics</scope><name>OutputPort</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1OutputPort_1a0a39b891749961d34507b4b591886741" prot="public" virt="non-virtual"><scope>BipedalLocomotion::IK::QPFixedBaseInverseKinematics</scope><name>OutputPort</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1OutputPort_1a581340f280eca1890a8a7b2331761b57" prot="public" virt="non-virtual"><scope>BipedalLocomotion::IK::QPFixedBaseInverseKinematics</scope><name>OutputPort</name></member>
      <member refid="classBipedalLocomotion_1_1IK_1_1QPFixedBaseInverseKinematics_1a13a6aa95419b21a38032d8ed10d85b0b" prot="public" virt="non-virtual"><scope>BipedalLocomotion::IK::QPFixedBaseInverseKinematics</scope><name>QPFixedBaseInverseKinematics</name></member>
      <member refid="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics_1a5e8f8d2855c94ef0539815664b65a0fb" prot="public" virt="non-virtual"><scope>BipedalLocomotion::IK::QPFixedBaseInverseKinematics</scope><name>QPInverseKinematics</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Source_1a472624c76d5e02e8ae16991cd77016ce" prot="public" virt="non-virtual"><scope>BipedalLocomotion::IK::QPFixedBaseInverseKinematics</scope><name>setInput</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1InputPort_1ad2637be5c9075a2d8f09fedc6a42d808" prot="public" virt="pure-virtual" ambiguityscope="Advanceable&lt; EmptySignal, Output &gt;::"><scope>BipedalLocomotion::IK::QPFixedBaseInverseKinematics</scope><name>setInput</name></member>
      <member refid="classBipedalLocomotion_1_1IK_1_1QPFixedBaseInverseKinematics_1ac0f6f7be93f3959311aa3c10eb723524" prot="public" virt="non-virtual"><scope>BipedalLocomotion::IK::QPFixedBaseInverseKinematics</scope><name>setKinDyn</name></member>
      <member refid="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics_1a8357aa4b53db64ac10d9065f98203320" prot="public" virt="virtual"><scope>BipedalLocomotion::IK::QPFixedBaseInverseKinematics</scope><name>setTaskWeight</name></member>
      <member refid="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics_1a418b0e0b18f2f99ca55b88829e031898" prot="public" virt="virtual"><scope>BipedalLocomotion::IK::QPFixedBaseInverseKinematics</scope><name>setTaskWeight</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Source_1aa6af70cc2e04e6a7e011af3d968b3b4b" prot="public" virt="non-virtual"><scope>BipedalLocomotion::IK::QPFixedBaseInverseKinematics</scope><name>Source</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Source_1a1c126531af21d485f09f297cb162c30a" prot="public" virt="non-virtual"><scope>BipedalLocomotion::IK::QPFixedBaseInverseKinematics</scope><name>Source</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Source_1af0cf2abdf10e6594372a0b062fe4a8af" prot="public" virt="non-virtual"><scope>BipedalLocomotion::IK::QPFixedBaseInverseKinematics</scope><name>Source</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1ILinearTaskSolver_1a770b4595f008dbc6ae50e2889639df12" prot="public" virt="non-virtual"><scope>BipedalLocomotion::IK::QPFixedBaseInverseKinematics</scope><name>State</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1ILinearTaskSolver_1a6d1cc19ae482b87b3f5dadefa1eb4e7b" prot="public" virt="non-virtual"><scope>BipedalLocomotion::IK::QPFixedBaseInverseKinematics</scope><name>Task</name></member>
      <member refid="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics_1a516929da79680d1df8fe34d85dac5c3b" prot="public" virt="virtual"><scope>BipedalLocomotion::IK::QPFixedBaseInverseKinematics</scope><name>toString</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1afae1137cba829874bab4a1d25d559896" prot="public" virt="virtual"><scope>BipedalLocomotion::IK::QPFixedBaseInverseKinematics</scope><name>~Advanceable</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1ILinearTaskSolver_1a3f7b647df3e41efe16c75754181f9931" prot="public" virt="virtual"><scope>BipedalLocomotion::IK::QPFixedBaseInverseKinematics</scope><name>~ILinearTaskSolver</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1InputPort_1ac9b58b0d2f6ae8821b873ed6f9817ccb" prot="public" virt="virtual"><scope>BipedalLocomotion::IK::QPFixedBaseInverseKinematics</scope><name>~InputPort</name></member>
      <member refid="classBipedalLocomotion_1_1IK_1_1IntegrationBasedIK_1af7a521cfc81b2f7d2e0c881858133478" prot="public" virt="virtual"><scope>BipedalLocomotion::IK::QPFixedBaseInverseKinematics</scope><name>~IntegrationBasedIK</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1OutputPort_1adcc49c38152c9204dcab4f8e87f68977" prot="public" virt="virtual"><scope>BipedalLocomotion::IK::QPFixedBaseInverseKinematics</scope><name>~OutputPort</name></member>
      <member refid="classBipedalLocomotion_1_1IK_1_1QPFixedBaseInverseKinematics_1a4433d5a3e4b17a8970f697a17b5c2fda" prot="public" virt="non-virtual"><scope>BipedalLocomotion::IK::QPFixedBaseInverseKinematics</scope><name>~QPFixedBaseInverseKinematics</name></member>
      <member refid="classBipedalLocomotion_1_1IK_1_1QPInverseKinematics_1ab66c09c2e12b3496f357018d0818e831" prot="public" virt="virtual"><scope>BipedalLocomotion::IK::QPFixedBaseInverseKinematics</scope><name>~QPInverseKinematics</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Source_1acf12427433027de27b18e6e70ba0cae8" prot="public" virt="virtual"><scope>BipedalLocomotion::IK::QPFixedBaseInverseKinematics</scope><name>~Source</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
