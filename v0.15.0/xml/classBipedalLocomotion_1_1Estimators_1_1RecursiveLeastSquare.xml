<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classBipedalLocomotion_1_1Estimators_1_1RecursiveLeastSquare" kind="class" language="C++" prot="public">
    <compoundname>BipedalLocomotion::Estimators::RecursiveLeastSquare</compoundname>
    <basecompoundref refid="classBipedalLocomotion_1_1System_1_1Source" prot="public" virt="non-virtual">BipedalLocomotion::System::Source&lt; RecursiveLeastSquareState &gt;</basecompoundref>
      <sectiondef kind="private-type">
      <memberdef kind="enum" id="classBipedalLocomotion_1_1Estimators_1_1RecursiveLeastSquare_1a3b7f002a1677d08f574495ce9274ceed" prot="private" static="no" strong="yes">
        <type></type>
        <name>State</name>
        <enumvalue id="classBipedalLocomotion_1_1Estimators_1_1RecursiveLeastSquare_1a3b7f002a1677d08f574495ce9274ceeda9646ad3a1c3e708b4fa8b4b4270fbab6" prot="private">
          <name>NotInitialized</name>
          <briefdescription>
<para>The filter is not initialized yet call RecursiveLeastSquare::initialze method to initialize it. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classBipedalLocomotion_1_1Estimators_1_1RecursiveLeastSquare_1a3b7f002a1677d08f574495ce9274ceeda59d87a4758a9d35fbaf6b204341bb399" prot="private">
          <name>Initialized</name>
          <briefdescription>
<para>The filter is initialized and ready to be used. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classBipedalLocomotion_1_1Estimators_1_1RecursiveLeastSquare_1a3b7f002a1677d08f574495ce9274ceeda5bda814c4aedb126839228f1a3d92f09" prot="private">
          <name>Running</name>
          <briefdescription>
<para>The filter is running. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Enumerator useful to described the current status of the filter. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Estimators/RecursiveLeastSquare.h" line="64" column="5" bodyfile="BipedalLocomotion/Estimators/RecursiveLeastSquare.h" bodystart="65" bodyend="70"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classBipedalLocomotion_1_1Estimators_1_1RecursiveLeastSquare_1a09c84f970421fa9c680dcbd8d423c106" prot="private" static="no" mutable="no">
        <type><ref refid="structBipedalLocomotion_1_1Estimators_1_1RecursiveLeastSquareState" kindref="compound">RecursiveLeastSquareState</ref></type>
        <definition>RecursiveLeastSquareState BipedalLocomotion::Estimators::RecursiveLeastSquare::m_state</definition>
        <argsstring></argsstring>
        <name>m_state</name>
        <briefdescription>
<para>State of the RLS algorithm. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Estimators/RecursiveLeastSquare.h" line="39" column="31" bodyfile="BipedalLocomotion/Estimators/RecursiveLeastSquare.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBipedalLocomotion_1_1Estimators_1_1RecursiveLeastSquare_1af677566ffc4ebea52bbfcb327a7f4269" prot="private" static="no" mutable="no">
        <type>Eigen::VectorXd</type>
        <definition>Eigen::VectorXd BipedalLocomotion::Estimators::RecursiveLeastSquare::m_measurements</definition>
        <argsstring></argsstring>
        <name>m_measurements</name>
        <briefdescription>
<para>Vector containing the measurements. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Estimators/RecursiveLeastSquare.h" line="41" column="21" bodyfile="BipedalLocomotion/Estimators/RecursiveLeastSquare.h" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBipedalLocomotion_1_1Estimators_1_1RecursiveLeastSquare_1a744d4957c9472b17e93c1d50409f7b19" prot="private" static="no" mutable="no">
        <type>Eigen::MatrixXd</type>
        <definition>Eigen::MatrixXd BipedalLocomotion::Estimators::RecursiveLeastSquare::m_measurementCovarianceMatrix</definition>
        <argsstring></argsstring>
        <name>m_measurementCovarianceMatrix</name>
        <briefdescription>
<para>Covariance matrix of the measurements we assume that the measurements are uncorrelated (furthermore since the model of the noise is Gaussian the random variable are also independent) Since the variable are independent we are interested only on the element in the diagonal of the matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Estimators/RecursiveLeastSquare.h" line="48" column="21" bodyfile="BipedalLocomotion/Estimators/RecursiveLeastSquare.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBipedalLocomotion_1_1Estimators_1_1RecursiveLeastSquare_1a0a6e8b93c3a4106afdcb9d4fa146be06" prot="private" static="no" mutable="no">
        <type>Eigen::MatrixXd</type>
        <definition>Eigen::MatrixXd BipedalLocomotion::Estimators::RecursiveLeastSquare::m_kalmanGain</definition>
        <argsstring></argsstring>
        <name>m_kalmanGain</name>
        <briefdescription>
<para>Gain of the Kalman filter. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Estimators/RecursiveLeastSquare.h" line="50" column="21" bodyfile="BipedalLocomotion/Estimators/RecursiveLeastSquare.h" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBipedalLocomotion_1_1Estimators_1_1RecursiveLeastSquare_1a79dc42feea6a2e7672babac362b31eaa" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double BipedalLocomotion::Estimators::RecursiveLeastSquare::m_lambda</definition>
        <argsstring></argsstring>
        <name>m_lambda</name>
        <initializer>{1}</initializer>
        <briefdescription>
<para>Filter gain. </para>
        </briefdescription>
        <detaileddescription>
<para>The recursive least square filter is equivalent to a kalman filter if lambda is equal to 1 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Estimators/RecursiveLeastSquare.h" line="52" column="12" bodyfile="BipedalLocomotion/Estimators/RecursiveLeastSquare.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBipedalLocomotion_1_1Estimators_1_1RecursiveLeastSquare_1ab0ad099e2968a6cbef98adafea5c5473" prot="private" static="no" mutable="no">
        <type>std::function&lt; Eigen::MatrixXd(void)&gt;</type>
        <definition>std::function&lt;Eigen::MatrixXd(void)&gt; BipedalLocomotion::Estimators::RecursiveLeastSquare::m_regressorFunction</definition>
        <argsstring></argsstring>
        <name>m_regressorFunction</name>
        <briefdescription>
<para>Function containing the regressor of the system. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Estimators/RecursiveLeastSquare.h" line="56" column="19" bodyfile="BipedalLocomotion/Estimators/RecursiveLeastSquare.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBipedalLocomotion_1_1Estimators_1_1RecursiveLeastSquare_1a4e45121751f2a6a499a98d6530c8b023" prot="private" static="no" mutable="no">
        <type>Eigen::MatrixXd</type>
        <definition>Eigen::MatrixXd BipedalLocomotion::Estimators::RecursiveLeastSquare::m_regressor</definition>
        <argsstring></argsstring>
        <name>m_regressor</name>
        <briefdescription>
<para>Regressor matrix. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Estimators/RecursiveLeastSquare.h" line="59" column="21" bodyfile="BipedalLocomotion/Estimators/RecursiveLeastSquare.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classBipedalLocomotion_1_1Estimators_1_1RecursiveLeastSquare_1a3d1a4947f04c6ce03bff0e74edacb15a" prot="private" static="no" mutable="no">
        <type>State</type>
        <definition>State BipedalLocomotion::Estimators::RecursiveLeastSquare::m_estimatorState</definition>
        <argsstring></argsstring>
        <name>m_estimatorState</name>
        <initializer>{State::NotInitialized}</initializer>
        <briefdescription>
<para>State of the filter. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Estimators/RecursiveLeastSquare.h" line="72" column="11" bodyfile="BipedalLocomotion/Estimators/RecursiveLeastSquare.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classBipedalLocomotion_1_1Estimators_1_1RecursiveLeastSquare_1a0bb457e9ead4d3c7d62aab47457de1f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::Estimators::RecursiveLeastSquare::initialize</definition>
        <argsstring>(std::weak_ptr&lt; const ParametersHandler::IParametersHandler &gt; handlerWeak) override</argsstring>
        <name>initialize</name>
        <reimplements refid="classBipedalLocomotion_1_1System_1_1Advanceable_1a6db247d3db83217a16e963d01f6bcb77">initialize</reimplements>
        <param>
          <type>std::weak_ptr&lt; const <ref refid="classBipedalLocomotion_1_1ParametersHandler_1_1IParametersHandler" kindref="compound">ParametersHandler::IParametersHandler</ref> &gt;</type>
          <declname>handlerWeak</declname>
        </param>
        <briefdescription>
<para>Initialize the filter. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The following parameter are required by the filter:<itemizedlist>
<listitem><para>&quot;measurement_covariance&quot; vector containing the covariance of the measurements. We assume that the measurements are uncorrelated (furthermore since the model of the noise is Gaussian the random variable are also independent) Since the variable are independent we are interested only on the element in the diagonal of the matrix</para>
</listitem><listitem><para>&quot;lambda&quot; double containing the filter gain. (The recursive least square filter is equivalent to a kalman filter if lambda is equal to 1)</para>
</listitem><listitem><para>&quot;state&quot; vector containing the initial guess of the state</para>
</listitem><listitem><para>&quot;state_covariance&quot; vector containing the diagonal matrix of the covariance of the state </para>
</listitem></itemizedlist>
</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handlerWeak</parametername>
</parameternamelist>
<parameterdescription>
<para>weak pointer to a <ref refid="classBipedalLocomotion_1_1ParametersHandler_1_1IParametersHandler" kindref="compound">ParametersHandler::IParametersHandler</ref> interface @tparameter Derived particular implementation of the IParameterHandler </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True in case of success, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Estimators/RecursiveLeastSquare.h" line="90" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Estimators_1_1RecursiveLeastSquare_1a82b462c0e3cbbb9d3d45865238a7613a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BipedalLocomotion::Estimators::RecursiveLeastSquare::setRegressorFunction</definition>
        <argsstring>(std::function&lt; Eigen::MatrixXd(void)&gt; regressor)</argsstring>
        <name>setRegressorFunction</name>
        <param>
          <type>std::function&lt; Eigen::MatrixXd(void)&gt;</type>
          <declname>regressor</declname>
        </param>
        <briefdescription>
<para>Set the regressor function. </para>
        </briefdescription>
        <detaileddescription>
<para>@parameter regressor function that return an Eigen::MatrixXd containing the regressor of the system <simplesect kind="note"><para>The user can decide to set the regressor function or set the regressor matrix by calling setReressor(). If <ref refid="classBipedalLocomotion_1_1Estimators_1_1RecursiveLeastSquare_1a82b462c0e3cbbb9d3d45865238a7613a" kindref="member">setRegressorFunction()</ref> is called, the RLS algorithm will compute the regressor every time the <ref refid="classBipedalLocomotion_1_1Estimators_1_1RecursiveLeastSquare_1a24cd1a3554e663f9745152f1aa7f3360" kindref="member">advance()</ref> function is called. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Estimators/RecursiveLeastSquare.h" line="100" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Estimators_1_1RecursiveLeastSquare_1ac29279c5794195e4fb8e709c57a884fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BipedalLocomotion::Estimators::RecursiveLeastSquare::setRegressor</definition>
        <argsstring>(const Eigen::Ref&lt; const Eigen::MatrixXd &gt; &amp;regressor)</argsstring>
        <name>setRegressor</name>
        <param>
          <type>const Eigen::Ref&lt; const Eigen::MatrixXd &gt; &amp;</type>
          <declname>regressor</declname>
        </param>
        <briefdescription>
<para>Set the regressor function. </para>
        </briefdescription>
        <detaileddescription>
<para>@parameter regressor is the regressor matrix. <simplesect kind="note"><para>The user can decide to set the regressor function or set the regressor matrix by calling setReressor(). If <ref refid="classBipedalLocomotion_1_1Estimators_1_1RecursiveLeastSquare_1a82b462c0e3cbbb9d3d45865238a7613a" kindref="member">setRegressorFunction()</ref> is called, the RLS algorithm will compute the regressor every time the <ref refid="classBipedalLocomotion_1_1Estimators_1_1RecursiveLeastSquare_1a24cd1a3554e663f9745152f1aa7f3360" kindref="member">advance()</ref> function is called. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Estimators/RecursiveLeastSquare.h" line="109" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Estimators_1_1RecursiveLeastSquare_1a676c2e41954b046a6491b83d5daa8a01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BipedalLocomotion::Estimators::RecursiveLeastSquare::setMeasurements</definition>
        <argsstring>(const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;measurements)</argsstring>
        <name>setMeasurements</name>
        <param>
          <type>const Eigen::Ref&lt; const Eigen::VectorXd &gt; &amp;</type>
          <declname>measurements</declname>
        </param>
        <briefdescription>
<para>Set the measurements @parameter measurements vector containing all the measurements. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Estimators/RecursiveLeastSquare.h" line="115" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Estimators_1_1RecursiveLeastSquare_1a24cd1a3554e663f9745152f1aa7f3360" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::Estimators::RecursiveLeastSquare::advance</definition>
        <argsstring>() final</argsstring>
        <name>advance</name>
        <reimplements refid="classBipedalLocomotion_1_1System_1_1Advanceable_1a67107e46e831d93f572558b541aab6d2">advance</reimplements>
        <briefdescription>
<para>Compute one step of the filter. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True in case of success, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Estimators/RecursiveLeastSquare.h" line="121" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Estimators_1_1RecursiveLeastSquare_1a8560d01b521beb3e1564071d05bf9f8e" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>const <ref refid="structBipedalLocomotion_1_1Estimators_1_1RecursiveLeastSquareState" kindref="compound">RecursiveLeastSquareState</ref> &amp;</type>
        <definition>const RecursiveLeastSquareState&amp; BipedalLocomotion::Estimators::RecursiveLeastSquare::getOutput</definition>
        <argsstring>() const final</argsstring>
        <name>getOutput</name>
        <reimplements refid="classBipedalLocomotion_1_1System_1_1OutputPort_1a8c089ecf2dd8ff0fb2732233994b6cac">getOutput</reimplements>
        <briefdescription>
<para>Get the expected value and the covariance matrix of the estimated parameters. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A struct containing the expected value and the covariance of the estimated parameters. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Estimators/RecursiveLeastSquare.h" line="128" column="37"/>
      </memberdef>
      <memberdef kind="function" id="classBipedalLocomotion_1_1Estimators_1_1RecursiveLeastSquare_1a7d9bea401a1490a1c3074773a7d0f31a" prot="public" static="no" const="yes" explicit="no" inline="no" final="yes" virt="virtual">
        <type>bool</type>
        <definition>bool BipedalLocomotion::Estimators::RecursiveLeastSquare::isOutputValid</definition>
        <argsstring>() const final</argsstring>
        <name>isOutputValid</name>
        <reimplements refid="classBipedalLocomotion_1_1System_1_1OutputPort_1ac50de29a6160baa2bba195af9d69430a">isOutputValid</reimplements>
        <briefdescription>
<para>Determines the validity of the object retrieved with <ref refid="NamedTuple_8h_1ab70c8bf5efee8eb732d3dfa7d05efa58" kindref="member">get()</ref> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if the object is valid, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="BipedalLocomotion/Estimators/RecursiveLeastSquare.h" line="134" column="10"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="4">
        <label>BipedalLocomotion::System::InputPort&lt; _Input &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1InputPort"/>
      </node>
      <node id="2">
        <label>BipedalLocomotion::System::Source&lt; RecursiveLeastSquareState &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Source"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="template-instance">
          <edgelabel>&lt; RecursiveLeastSquareState &gt;</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>BipedalLocomotion::System::OutputPort&lt; _Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1OutputPort"/>
      </node>
      <node id="1">
        <label>BipedalLocomotion::Estimators::RecursiveLeastSquare</label>
        <link refid="classBipedalLocomotion_1_1Estimators_1_1RecursiveLeastSquare"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>BipedalLocomotion::System::Advanceable&lt; EmptySignal, Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Advanceable"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="template-instance">
          <edgelabel>&lt; EmptySignal, Output &gt;</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>BipedalLocomotion::System::Source&lt; Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Source"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>BipedalLocomotion::System::Advanceable&lt; _Input, _Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Advanceable"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="4">
        <label>BipedalLocomotion::System::InputPort&lt; _Input &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1InputPort"/>
      </node>
      <node id="2">
        <label>BipedalLocomotion::System::Source&lt; RecursiveLeastSquareState &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Source"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="6" relation="template-instance">
          <edgelabel>&lt; RecursiveLeastSquareState &gt;</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>BipedalLocomotion::System::OutputPort&lt; _Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1OutputPort"/>
      </node>
      <node id="1">
        <label>BipedalLocomotion::Estimators::RecursiveLeastSquare</label>
        <link refid="classBipedalLocomotion_1_1Estimators_1_1RecursiveLeastSquare"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>BipedalLocomotion::System::Advanceable&lt; EmptySignal, Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Advanceable"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="template-instance">
          <edgelabel>&lt; EmptySignal, Output &gt;</edgelabel>
        </childnode>
      </node>
      <node id="6">
        <label>BipedalLocomotion::System::Source&lt; Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Source"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>BipedalLocomotion::System::Advanceable&lt; _Input, _Output &gt;</label>
        <link refid="classBipedalLocomotion_1_1System_1_1Advanceable"/>
        <childnode refid="4" relation="public-inheritance">
        </childnode>
        <childnode refid="5" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="BipedalLocomotion/Estimators/RecursiveLeastSquare.h" line="36" column="1" bodyfile="BipedalLocomotion/Estimators/RecursiveLeastSquare.h" bodystart="37" bodyend="135"/>
    <listofallmembers>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1RecursiveLeastSquare_1a24cd1a3554e663f9745152f1aa7f3360" prot="public" virt="virtual"><scope>BipedalLocomotion::Estimators::RecursiveLeastSquare</scope><name>advance</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1a09ee5b41c77c6b626f4d5cb775065325" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Estimators::RecursiveLeastSquare</scope><name>Advanceable</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1aaeb3eba3073fbc844dea1eba4c9b68f3" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Estimators::RecursiveLeastSquare</scope><name>Advanceable</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1ac1549cb26bd896e27370e97b0795ba3f" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Estimators::RecursiveLeastSquare</scope><name>Advanceable</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1a618ab786bb43814b3b3012b843fce93b" prot="public" virt="virtual"><scope>BipedalLocomotion::Estimators::RecursiveLeastSquare</scope><name>close</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1RecursiveLeastSquare_1a8560d01b521beb3e1564071d05bf9f8e" prot="public" virt="virtual"><scope>BipedalLocomotion::Estimators::RecursiveLeastSquare</scope><name>getOutput</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1RecursiveLeastSquare_1a0bb457e9ead4d3c7d62aab47457de1f8" prot="public" virt="virtual"><scope>BipedalLocomotion::Estimators::RecursiveLeastSquare</scope><name>initialize</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1a975a7ecbf38c917c7b72519581fc7dba" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Estimators::RecursiveLeastSquare</scope><name>Input</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1InputPort_1a27c614cb30c1e4b78e64791f4919dfa7" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Estimators::RecursiveLeastSquare</scope><name>InputPort</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1InputPort_1a74d1418613e89a7f2993ea936228a44a" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Estimators::RecursiveLeastSquare</scope><name>InputPort</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1InputPort_1a02ec5c947f1d2d83d2952c3b899cc58f" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Estimators::RecursiveLeastSquare</scope><name>InputPort</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1RecursiveLeastSquare_1a7d9bea401a1490a1c3074773a7d0f31a" prot="public" virt="virtual"><scope>BipedalLocomotion::Estimators::RecursiveLeastSquare</scope><name>isOutputValid</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1RecursiveLeastSquare_1a3d1a4947f04c6ce03bff0e74edacb15a" prot="private" virt="non-virtual"><scope>BipedalLocomotion::Estimators::RecursiveLeastSquare</scope><name>m_estimatorState</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1RecursiveLeastSquare_1a0a6e8b93c3a4106afdcb9d4fa146be06" prot="private" virt="non-virtual"><scope>BipedalLocomotion::Estimators::RecursiveLeastSquare</scope><name>m_kalmanGain</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1RecursiveLeastSquare_1a79dc42feea6a2e7672babac362b31eaa" prot="private" virt="non-virtual"><scope>BipedalLocomotion::Estimators::RecursiveLeastSquare</scope><name>m_lambda</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1RecursiveLeastSquare_1a744d4957c9472b17e93c1d50409f7b19" prot="private" virt="non-virtual"><scope>BipedalLocomotion::Estimators::RecursiveLeastSquare</scope><name>m_measurementCovarianceMatrix</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1RecursiveLeastSquare_1af677566ffc4ebea52bbfcb327a7f4269" prot="private" virt="non-virtual"><scope>BipedalLocomotion::Estimators::RecursiveLeastSquare</scope><name>m_measurements</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1RecursiveLeastSquare_1a4e45121751f2a6a499a98d6530c8b023" prot="private" virt="non-virtual"><scope>BipedalLocomotion::Estimators::RecursiveLeastSquare</scope><name>m_regressor</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1RecursiveLeastSquare_1ab0ad099e2968a6cbef98adafea5c5473" prot="private" virt="non-virtual"><scope>BipedalLocomotion::Estimators::RecursiveLeastSquare</scope><name>m_regressorFunction</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1RecursiveLeastSquare_1a09c84f970421fa9c680dcbd8d423c106" prot="private" virt="non-virtual"><scope>BipedalLocomotion::Estimators::RecursiveLeastSquare</scope><name>m_state</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Source_1a922e6eec2f74620c49f9fcd1ddf709ae" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Estimators::RecursiveLeastSquare</scope><name>operator=</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Source_1ad63e64dcad4c269263ecd20b2c81352b" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Estimators::RecursiveLeastSquare</scope><name>operator=</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1ae147cdee9ff9160a9dfe0d3e349a9aad" prot="public" virt="non-virtual" ambiguityscope="BipedalLocomotion::System::Advanceable::"><scope>BipedalLocomotion::Estimators::RecursiveLeastSquare</scope><name>operator=</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1adf0d9fc07bab0ec5d4db7f3a35816bf2" prot="public" virt="non-virtual" ambiguityscope="BipedalLocomotion::System::Advanceable::"><scope>BipedalLocomotion::Estimators::RecursiveLeastSquare</scope><name>operator=</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1InputPort_1a54f476d3c8d6d003fb714309ea6272aa" prot="public" virt="non-virtual" ambiguityscope="BipedalLocomotion::System::InputPort::"><scope>BipedalLocomotion::Estimators::RecursiveLeastSquare</scope><name>operator=</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1InputPort_1adb341b37472241b6da8b552166308d7b" prot="public" virt="non-virtual" ambiguityscope="BipedalLocomotion::System::InputPort::"><scope>BipedalLocomotion::Estimators::RecursiveLeastSquare</scope><name>operator=</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1OutputPort_1af5e15f5e4962a5c8e0f0c0a49adb9ca1" prot="public" virt="non-virtual" ambiguityscope="BipedalLocomotion::System::OutputPort::"><scope>BipedalLocomotion::Estimators::RecursiveLeastSquare</scope><name>operator=</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1OutputPort_1ad5c6ce3ad7d2a064d7bb512fe0bc489e" prot="public" virt="non-virtual" ambiguityscope="BipedalLocomotion::System::OutputPort::"><scope>BipedalLocomotion::Estimators::RecursiveLeastSquare</scope><name>operator=</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1a69603f2c9c608815908425b5b8c2005c" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Estimators::RecursiveLeastSquare</scope><name>Output</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1OutputPort_1a7c0d15e677a1935918fc747ba4c25ec1" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Estimators::RecursiveLeastSquare</scope><name>OutputPort</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1OutputPort_1a0a39b891749961d34507b4b591886741" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Estimators::RecursiveLeastSquare</scope><name>OutputPort</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1OutputPort_1a581340f280eca1890a8a7b2331761b57" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Estimators::RecursiveLeastSquare</scope><name>OutputPort</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Source_1a472624c76d5e02e8ae16991cd77016ce" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Estimators::RecursiveLeastSquare</scope><name>setInput</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1InputPort_1ad2637be5c9075a2d8f09fedc6a42d808" prot="public" virt="pure-virtual" ambiguityscope="BipedalLocomotion::System::Advanceable::"><scope>BipedalLocomotion::Estimators::RecursiveLeastSquare</scope><name>setInput</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1RecursiveLeastSquare_1a676c2e41954b046a6491b83d5daa8a01" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Estimators::RecursiveLeastSquare</scope><name>setMeasurements</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1RecursiveLeastSquare_1ac29279c5794195e4fb8e709c57a884fa" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Estimators::RecursiveLeastSquare</scope><name>setRegressor</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1RecursiveLeastSquare_1a82b462c0e3cbbb9d3d45865238a7613a" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Estimators::RecursiveLeastSquare</scope><name>setRegressorFunction</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Source_1aa6af70cc2e04e6a7e011af3d968b3b4b" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Estimators::RecursiveLeastSquare</scope><name>Source</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Source_1a1c126531af21d485f09f297cb162c30a" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Estimators::RecursiveLeastSquare</scope><name>Source</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Source_1af0cf2abdf10e6594372a0b062fe4a8af" prot="public" virt="non-virtual"><scope>BipedalLocomotion::Estimators::RecursiveLeastSquare</scope><name>Source</name></member>
      <member refid="classBipedalLocomotion_1_1Estimators_1_1RecursiveLeastSquare_1a3b7f002a1677d08f574495ce9274ceed" prot="private" virt="non-virtual"><scope>BipedalLocomotion::Estimators::RecursiveLeastSquare</scope><name>State</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Advanceable_1afae1137cba829874bab4a1d25d559896" prot="public" virt="virtual"><scope>BipedalLocomotion::Estimators::RecursiveLeastSquare</scope><name>~Advanceable</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1InputPort_1ac9b58b0d2f6ae8821b873ed6f9817ccb" prot="public" virt="virtual"><scope>BipedalLocomotion::Estimators::RecursiveLeastSquare</scope><name>~InputPort</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1OutputPort_1adcc49c38152c9204dcab4f8e87f68977" prot="public" virt="virtual"><scope>BipedalLocomotion::Estimators::RecursiveLeastSquare</scope><name>~OutputPort</name></member>
      <member refid="classBipedalLocomotion_1_1System_1_1Source_1acf12427433027de27b18e6e70ba0cae8" prot="public" virt="virtual"><scope>BipedalLocomotion::Estimators::RecursiveLeastSquare</scope><name>~Source</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
